
Network.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f20c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ab0  0800f3e0  0800f3e0  000103e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e90  08013e90  000156e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013e90  08013e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e98  08013e98  000156e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e98  08013e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013e9c  08013e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006e4  20000000  08013ea0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f18  20000700  08014584  00015700  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20040000  20040000  00016000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000156e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfbb  00000000  00000000  00015714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000417a  00000000  00000000  000336cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  00037850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001344  00000000  00000000  00039150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003674a  00000000  00000000  0003a494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d9d  00000000  00000000  00070bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013f2a7  00000000  00000000  0009397b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001d2c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000717c  00000000  00000000  001d2ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001d9e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000700 	.word	0x20000700
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f3b4 	.word	0x0800f3b4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000704 	.word	0x20000704
 80001fc:	0800f3b4 	.word	0x0800f3b4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b96a 	b.w	8000f38 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	460c      	mov	r4, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14e      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c88:	4694      	mov	ip, r2
 8000c8a:	458c      	cmp	ip, r1
 8000c8c:	4686      	mov	lr, r0
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	d962      	bls.n	8000d5a <__udivmoddi4+0xde>
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f f68c 	uxth.w	r6, ip
 8000cb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb07 1114 	mls	r1, r7, r4, r1
 8000cbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc2:	fb04 f106 	mul.w	r1, r4, r6
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cd2:	f080 8112 	bcs.w	8000efa <__udivmoddi4+0x27e>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 810f 	bls.w	8000efa <__udivmoddi4+0x27e>
 8000cdc:	3c02      	subs	r4, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	fa1f f38e 	uxth.w	r3, lr
 8000ce6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cea:	fb07 1110 	mls	r1, r7, r0, r1
 8000cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf2:	fb00 f606 	mul.w	r6, r0, r6
 8000cf6:	429e      	cmp	r6, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x94>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d02:	f080 80fc 	bcs.w	8000efe <__udivmoddi4+0x282>
 8000d06:	429e      	cmp	r6, r3
 8000d08:	f240 80f9 	bls.w	8000efe <__udivmoddi4+0x282>
 8000d0c:	4463      	add	r3, ip
 8000d0e:	3802      	subs	r0, #2
 8000d10:	1b9b      	subs	r3, r3, r6
 8000d12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11d      	cbz	r5, 8000d22 <__udivmoddi4+0xa6>
 8000d1a:	40d3      	lsrs	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d905      	bls.n	8000d36 <__udivmoddi4+0xba>
 8000d2a:	b10d      	cbz	r5, 8000d30 <__udivmoddi4+0xb4>
 8000d2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4608      	mov	r0, r1
 8000d34:	e7f5      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d146      	bne.n	8000dcc <__udivmoddi4+0x150>
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xcc>
 8000d42:	4290      	cmp	r0, r2
 8000d44:	f0c0 80f0 	bcc.w	8000f28 <__udivmoddi4+0x2ac>
 8000d48:	1a86      	subs	r6, r0, r2
 8000d4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d0e6      	beq.n	8000d22 <__udivmoddi4+0xa6>
 8000d54:	e9c5 6300 	strd	r6, r3, [r5]
 8000d58:	e7e3      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	f040 8090 	bne.w	8000e80 <__udivmoddi4+0x204>
 8000d60:	eba1 040c 	sub.w	r4, r1, ip
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa1f f78c 	uxth.w	r7, ip
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb08 4416 	mls	r4, r8, r6, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb07 f006 	mul.w	r0, r7, r6
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x11c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x11a>
 8000d90:	4298      	cmp	r0, r3
 8000d92:	f200 80cd 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d96:	4626      	mov	r6, r4
 8000d98:	1a1c      	subs	r4, r3, r0
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000da2:	fb08 4410 	mls	r4, r8, r0, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb00 f707 	mul.w	r7, r0, r7
 8000dae:	429f      	cmp	r7, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x148>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x146>
 8000dbc:	429f      	cmp	r7, r3
 8000dbe:	f200 80b0 	bhi.w	8000f22 <__udivmoddi4+0x2a6>
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	1bdb      	subs	r3, r3, r7
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0x9c>
 8000dcc:	f1c1 0620 	rsb	r6, r1, #32
 8000dd0:	408b      	lsls	r3, r1
 8000dd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ddc:	fa04 f301 	lsl.w	r3, r4, r1
 8000de0:	ea43 030c 	orr.w	r3, r3, ip
 8000de4:	40f4      	lsrs	r4, r6
 8000de6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dea:	0c38      	lsrs	r0, r7, #16
 8000dec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df0:	fbb4 fef0 	udiv	lr, r4, r0
 8000df4:	fa1f fc87 	uxth.w	ip, r7
 8000df8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e00:	fb0e f90c 	mul.w	r9, lr, ip
 8000e04:	45a1      	cmp	r9, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	d90a      	bls.n	8000e22 <__udivmoddi4+0x1a6>
 8000e0c:	193c      	adds	r4, r7, r4
 8000e0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e12:	f080 8084 	bcs.w	8000f1e <__udivmoddi4+0x2a2>
 8000e16:	45a1      	cmp	r9, r4
 8000e18:	f240 8081 	bls.w	8000f1e <__udivmoddi4+0x2a2>
 8000e1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	eba4 0409 	sub.w	r4, r4, r9
 8000e26:	fa1f f983 	uxth.w	r9, r3
 8000e2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e3a:	45a4      	cmp	ip, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x1d2>
 8000e3e:	193c      	adds	r4, r7, r4
 8000e40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e44:	d267      	bcs.n	8000f16 <__udivmoddi4+0x29a>
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d965      	bls.n	8000f16 <__udivmoddi4+0x29a>
 8000e4a:	3b02      	subs	r3, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e52:	fba0 9302 	umull	r9, r3, r0, r2
 8000e56:	eba4 040c 	sub.w	r4, r4, ip
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	46ce      	mov	lr, r9
 8000e5e:	469c      	mov	ip, r3
 8000e60:	d351      	bcc.n	8000f06 <__udivmoddi4+0x28a>
 8000e62:	d04e      	beq.n	8000f02 <__udivmoddi4+0x286>
 8000e64:	b155      	cbz	r5, 8000e7c <__udivmoddi4+0x200>
 8000e66:	ebb8 030e 	subs.w	r3, r8, lr
 8000e6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431e      	orrs	r6, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	e9c5 6400 	strd	r6, r4, [r5]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e750      	b.n	8000d22 <__udivmoddi4+0xa6>
 8000e80:	f1c2 0320 	rsb	r3, r2, #32
 8000e84:	fa20 f103 	lsr.w	r1, r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e90:	4094      	lsls	r4, r2
 8000e92:	430c      	orrs	r4, r1
 8000e94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e9c:	fa1f f78c 	uxth.w	r7, ip
 8000ea0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea8:	0c23      	lsrs	r3, r4, #16
 8000eaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eae:	fb00 f107 	mul.w	r1, r0, r7
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x24c>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ebe:	d22c      	bcs.n	8000f1a <__udivmoddi4+0x29e>
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	d92a      	bls.n	8000f1a <__udivmoddi4+0x29e>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed8:	fb01 f307 	mul.w	r3, r1, r7
 8000edc:	42a3      	cmp	r3, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x276>
 8000ee0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee8:	d213      	bcs.n	8000f12 <__udivmoddi4+0x296>
 8000eea:	42a3      	cmp	r3, r4
 8000eec:	d911      	bls.n	8000f12 <__udivmoddi4+0x296>
 8000eee:	3902      	subs	r1, #2
 8000ef0:	4464      	add	r4, ip
 8000ef2:	1ae4      	subs	r4, r4, r3
 8000ef4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef8:	e739      	b.n	8000d6e <__udivmoddi4+0xf2>
 8000efa:	4604      	mov	r4, r0
 8000efc:	e6f0      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000efe:	4608      	mov	r0, r1
 8000f00:	e706      	b.n	8000d10 <__udivmoddi4+0x94>
 8000f02:	45c8      	cmp	r8, r9
 8000f04:	d2ae      	bcs.n	8000e64 <__udivmoddi4+0x1e8>
 8000f06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0e:	3801      	subs	r0, #1
 8000f10:	e7a8      	b.n	8000e64 <__udivmoddi4+0x1e8>
 8000f12:	4631      	mov	r1, r6
 8000f14:	e7ed      	b.n	8000ef2 <__udivmoddi4+0x276>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e799      	b.n	8000e4e <__udivmoddi4+0x1d2>
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	e7d4      	b.n	8000ec8 <__udivmoddi4+0x24c>
 8000f1e:	46d6      	mov	lr, sl
 8000f20:	e77f      	b.n	8000e22 <__udivmoddi4+0x1a6>
 8000f22:	4463      	add	r3, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e74d      	b.n	8000dc4 <__udivmoddi4+0x148>
 8000f28:	4606      	mov	r6, r0
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e70f      	b.n	8000d50 <__udivmoddi4+0xd4>
 8000f30:	3e02      	subs	r6, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	e730      	b.n	8000d98 <__udivmoddi4+0x11c>
 8000f36:	bf00      	nop

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f001 f904 	bl	800214e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f911 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 fa45 	bl	80013d8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f4e:	f000 f95f 	bl	8001210 <MX_CRC_Init>
  MX_SDMMC1_SD_Init();
 8000f52:	f000 f97f 	bl	8001254 <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 8000f56:	f000 f99f 	bl	8001298 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 f9f1 	bl	8001340 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000f5e:	f008 fda3 	bl	8009aa8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  //creo un instanza della rete  e degli opportuni buffer per ingressi e uscite
  if (ai_init() != 0)
 8000f62:	f000 fd19 	bl	8001998 <ai_init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <main+0x34>
     	  {
     		  Error_Handler();
 8000f6c:	f000 fede 	bl	8001d2c <Error_Handler>
     	  }
  FRESULT res = FR_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	76fb      	strb	r3, [r7, #27]

  //monto la scheda SD
  res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	4972      	ldr	r1, [pc, #456]	@ (8001140 <main+0x204>)
 8000f78:	4872      	ldr	r0, [pc, #456]	@ (8001144 <main+0x208>)
 8000f7a:	f00a fc97 	bl	800b8ac <f_mount>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	76fb      	strb	r3, [r7, #27]
      if(res != FR_OK)
 8000f82:	7efb      	ldrb	r3, [r7, #27]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <main+0x50>
      {
       	  	   	Error_Handler();
 8000f88:	f000 fed0 	bl	8001d2c <Error_Handler>
      }

   strcpy (buffer, "Rete neurale: ");
 8000f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001148 <main+0x20c>)
 8000f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800114c <main+0x210>)
 8000f90:	4614      	mov	r4, r2
 8000f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f94:	c407      	stmia	r4!, {r0, r1, r2}
 8000f96:	8023      	strh	r3, [r4, #0]
 8000f98:	3402      	adds	r4, #2
 8000f9a:	0c1b      	lsrs	r3, r3, #16
 8000f9c:	7023      	strb	r3, [r4, #0]
   write_report (buffer, strlen(buffer));
 8000f9e:	486a      	ldr	r0, [pc, #424]	@ (8001148 <main+0x20c>)
 8000fa0:	f7ff f92e 	bl	8000200 <strlen>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4867      	ldr	r0, [pc, #412]	@ (8001148 <main+0x20c>)
 8000faa:	f000 fe87 	bl	8001cbc <write_report>

   int string_len = strlen(AI_NETWORK_ORIGIN_MODEL_NAME);
 8000fae:	230c      	movs	r3, #12
 8000fb0:	617b      	str	r3, [r7, #20]
   write_report(AI_NETWORK_ORIGIN_MODEL_NAME, string_len);
 8000fb2:	6979      	ldr	r1, [r7, #20]
 8000fb4:	4866      	ldr	r0, [pc, #408]	@ (8001150 <main+0x214>)
 8000fb6:	f000 fe81 	bl	8001cbc <write_report>

   res = f_open(&file_in, F_INPUT, FA_READ);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4965      	ldr	r1, [pc, #404]	@ (8001154 <main+0x218>)
 8000fbe:	4866      	ldr	r0, [pc, #408]	@ (8001158 <main+0x21c>)
 8000fc0:	f00a fcba 	bl	800b938 <f_open>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	76fb      	strb	r3, [r7, #27]
   if(res != FR_OK)
 8000fc8:	7efb      	ldrb	r3, [r7, #27]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <main+0x96>
   {
   Error_Handler();
 8000fce:	f000 fead 	bl	8001d2c <Error_Handler>
   }
   //salvo la dimensione dell'intero file di input
   long int file_length = f_size(&file_in);
 8000fd2:	4b61      	ldr	r3, [pc, #388]	@ (8001158 <main+0x21c>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	613b      	str	r3, [r7, #16]
   res = f_close(&file_in);
 8000fd8:	485f      	ldr	r0, [pc, #380]	@ (8001158 <main+0x21c>)
 8000fda:	f00b f999 	bl	800c310 <f_close>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	76fb      	strb	r3, [r7, #27]
   if(res != FR_OK)
 8000fe2:	7efb      	ldrb	r3, [r7, #27]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <main+0xb0>
   {
   Error_Handler();
 8000fe8:	f000 fea0 	bl	8001d2c <Error_Handler>
   }

   //calcolo il numero di valori (float32) contenuti nel file di input
   long int n_valori = file_length / sizeof(ai_float);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]

   //dimensione di ogni blocco in cui suddivido il file input da leggere
   long int size_blocco = 10000;
 8000ff2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ff6:	60bb      	str	r3, [r7, #8]

   //numero di blocchi in cui suddivido il file input
   int b_max = n_valori / size_blocco;
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001000:	607b      	str	r3, [r7, #4]
   int blocco_attuale = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24

   ai_float* ingresso;


   strcpy (buffer, "\nCalcolo tempi per ogni inferenza:\n");
 8001006:	4a50      	ldr	r2, [pc, #320]	@ (8001148 <main+0x20c>)
 8001008:	4b54      	ldr	r3, [pc, #336]	@ (800115c <main+0x220>)
 800100a:	4614      	mov	r4, r2
 800100c:	461d      	mov	r5, r3
 800100e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	682b      	ldr	r3, [r5, #0]
 8001018:	6023      	str	r3, [r4, #0]
   string_len = strlen(buffer);
 800101a:	484b      	ldr	r0, [pc, #300]	@ (8001148 <main+0x20c>)
 800101c:	f7ff f8f0 	bl	8000200 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	617b      	str	r3, [r7, #20]
   write_report(buffer, string_len);
 8001024:	6979      	ldr	r1, [r7, #20]
 8001026:	4848      	ldr	r0, [pc, #288]	@ (8001148 <main+0x20c>)
 8001028:	f000 fe48 	bl	8001cbc <write_report>

   while(blocco_attuale < b_max)
 800102c:	e031      	b.n	8001092 <main+0x156>
   {
	   //vado ad allocare lo spazio per un blocco, sul quale farò le inferenze
	   ingresso = malloc(sizeof(ai_float) * size_blocco);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4618      	mov	r0, r3
 8001034:	f00d fb02 	bl	800e63c <malloc>
 8001038:	4603      	mov	r3, r0
 800103a:	603b      	str	r3, [r7, #0]

	   //il blocco di valori è letto dal file di input nella scheda SD
	   //mi posiziono nel punto opportuno definito da blocco_attuale
	   res = read_from_sd(size_blocco, ingresso, blocco_attuale);
 800103c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103e:	6839      	ldr	r1, [r7, #0]
 8001040:	68b8      	ldr	r0, [r7, #8]
 8001042:	f000 fdb3 	bl	8001bac <read_from_sd>
 8001046:	4603      	mov	r3, r0
 8001048:	76fb      	strb	r3, [r7, #27]
	    	  if(res != FR_OK)
 800104a:	7efb      	ldrb	r3, [r7, #27]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <main+0x118>
	    	  {
	       	    	  Error_Handler();
 8001050:	f000 fe6c 	bl	8001d2c <Error_Handler>

	   //ciclo su tutto il blocco corrente
	   //attenzione: bisogna passare alla rete 4 valori alla volta
	   //senza sovrapposizioni e senza perdere dati

	   int k = 0; //indice del valore letto
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
	   while (k < size_blocco)
 8001058:	e011      	b.n	800107e <main+0x142>
	   {


		   set_input_data(in_data, k, ingresso);
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	6a39      	ldr	r1, [r7, #32]
 800105e:	4840      	ldr	r0, [pc, #256]	@ (8001160 <main+0x224>)
 8001060:	f000 fcfa 	bl	8001a58 <set_input_data>

		   if (network_run(in_data, out_data, ingresso) != 0)
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	493f      	ldr	r1, [pc, #252]	@ (8001164 <main+0x228>)
 8001068:	483d      	ldr	r0, [pc, #244]	@ (8001160 <main+0x224>)
 800106a:	f000 fd65 	bl	8001b38 <network_run>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <main+0x13c>
		    			  Error_Handler();
 8001074:	f000 fe5a 	bl	8001d2c <Error_Handler>

		   //scorro al prossimo array di ingresso per la rete
		   k = k + AI_NETWORK_IN_1_SIZE;
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	3304      	adds	r3, #4
 800107c:	623b      	str	r3, [r7, #32]
	   while (k < size_blocco)
 800107e:	6a3a      	ldr	r2, [r7, #32]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	429a      	cmp	r2, r3
 8001084:	dbe9      	blt.n	800105a <main+0x11e>

	   }

	   free(ingresso); //libero lo spazio di memoria allocato per questo blocco terminato
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f00d fae0 	bl	800e64c <free>
	   blocco_attuale++; //passo al blocco successivo
 800108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108e:	3301      	adds	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
   while(blocco_attuale < b_max)
 8001092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbc9      	blt.n	800102e <main+0xf2>

   }

   //se sono arrivato all'ultimo blocco, che contiene meno valori della dimensione predefinita
   //oppure l'intero file di input è più piccolo della dimensione predefinita
   if(((blocco_attuale) == b_max)||(b_max == 0))
 800109a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d002      	beq.n	80010a8 <main+0x16c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d130      	bne.n	800110a <main+0x1ce>
   {
	   n_valori = n_valori - (b_max * size_blocco);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	60fb      	str	r3, [r7, #12]
	   ingresso = malloc(sizeof(ai_float)* n_valori);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f00d fabe 	bl	800e63c <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	603b      	str	r3, [r7, #0]
	   res = read_from_sd(n_valori, ingresso, blocco_attuale);
 80010c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 fd6f 	bl	8001bac <read_from_sd>
 80010ce:	4603      	mov	r3, r0
 80010d0:	76fb      	strb	r3, [r7, #27]
	   if(res != FR_OK)
 80010d2:	7efb      	ldrb	r3, [r7, #27]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <main+0x1a0>
	   	  {
	   		  Error_Handler();
 80010d8:	f000 fe28 	bl	8001d2c <Error_Handler>
	   	  }
	   int k = 0; //indice del valore di partenza dell'array letto
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
	   while (k < size_blocco)
 80010e0:	e00c      	b.n	80010fc <main+0x1c0>
	   {
	   		if (network_run(in_data, out_data, ingresso) != 0)
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	491f      	ldr	r1, [pc, #124]	@ (8001164 <main+0x228>)
 80010e6:	481e      	ldr	r0, [pc, #120]	@ (8001160 <main+0x224>)
 80010e8:	f000 fd26 	bl	8001b38 <network_run>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <main+0x1ba>
	   		    			  Error_Handler();
 80010f2:	f000 fe1b 	bl	8001d2c <Error_Handler>

	   		//scorro al prossimo array di ingresso per la rete
	   		k = k + AI_NETWORK_IN_1_SIZE;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	61fb      	str	r3, [r7, #28]
	   while (k < size_blocco)
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbee      	blt.n	80010e2 <main+0x1a6>
       }

	   free(ingresso);
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f00d faa1 	bl	800e64c <free>


   }

   strcpy (buffer,"\nFine\n");
 800110a:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <main+0x20c>)
 800110c:	4a16      	ldr	r2, [pc, #88]	@ (8001168 <main+0x22c>)
 800110e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001112:	6018      	str	r0, [r3, #0]
 8001114:	3304      	adds	r3, #4
 8001116:	8019      	strh	r1, [r3, #0]
 8001118:	3302      	adds	r3, #2
 800111a:	0c0a      	lsrs	r2, r1, #16
 800111c:	701a      	strb	r2, [r3, #0]
   string_len = strlen(buffer);
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <main+0x20c>)
 8001120:	f7ff f86e 	bl	8000200 <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	617b      	str	r3, [r7, #20]
   write_report(buffer, string_len);
 8001128:	6979      	ldr	r1, [r7, #20]
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <main+0x20c>)
 800112c:	f000 fdc6 	bl	8001cbc <write_report>

   f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	4803      	ldr	r0, [pc, #12]	@ (8001144 <main+0x208>)
 8001136:	f00a fbb9 	bl	800b8ac <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800113a:	bf00      	nop
 800113c:	e7fd      	b.n	800113a <main+0x1fe>
 800113e:	bf00      	nop
 8001140:	200011dc 	.word	0x200011dc
 8001144:	200011e0 	.word	0x200011e0
 8001148:	20000f30 	.word	0x20000f30
 800114c:	0800f3e0 	.word	0x0800f3e0
 8001150:	0800f3f0 	.word	0x0800f3f0
 8001154:	0800f400 	.word	0x0800f400
 8001158:	20000ad0 	.word	0x20000ad0
 800115c:	0800f40c 	.word	0x0800f40c
 8001160:	200011a0 	.word	0x200011a0
 8001164:	200011c0 	.word	0x200011c0
 8001168:	0800f430 	.word	0x0800f430

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b096      	sub	sp, #88	@ 0x58
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2244      	movs	r2, #68	@ 0x44
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f00d fb6a 	bl	800e854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800118e:	2000      	movs	r0, #0
 8001190:	f001 fd18 	bl	8002bc4 <HAL_PWREx_ControlVoltageScaling>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800119a:	f000 fdc7 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800119e:	2322      	movs	r3, #34	@ 0x22
 80011a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011a8:	2301      	movs	r3, #1
 80011aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ac:	2340      	movs	r3, #64	@ 0x40
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b4:	2302      	movs	r3, #2
 80011b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80011bc:	231e      	movs	r3, #30
 80011be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fdab 	bl	8002d2c <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011dc:	f000 fda6 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e4:	2303      	movs	r3, #3
 80011e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	2105      	movs	r1, #5
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 f9b1 	bl	8003560 <HAL_RCC_ClockConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001204:	f000 fd92 	bl	8001d2c <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	3758      	adds	r7, #88	@ 0x58
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <MX_CRC_Init+0x3c>)
 8001216:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <MX_CRC_Init+0x40>)
 8001218:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_CRC_Init+0x3c>)
 800121c:	2200      	movs	r2, #0
 800121e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <MX_CRC_Init+0x3c>)
 8001222:	2200      	movs	r2, #0
 8001224:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_CRC_Init+0x3c>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <MX_CRC_Init+0x3c>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001232:	4b06      	ldr	r3, [pc, #24]	@ (800124c <MX_CRC_Init+0x3c>)
 8001234:	2201      	movs	r2, #1
 8001236:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_CRC_Init+0x3c>)
 800123a:	f001 f933 	bl	80024a4 <HAL_CRC_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001244:	f000 fd72 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000071c 	.word	0x2000071c
 8001250:	40023000 	.word	0x40023000

08001254 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <MX_SDMMC1_SD_Init+0x3c>)
 800125a:	4a0e      	ldr	r2, [pc, #56]	@ (8001294 <MX_SDMMC1_SD_Init+0x40>)
 800125c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800125e:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <MX_SDMMC1_SD_Init+0x3c>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <MX_SDMMC1_SD_Init+0x3c>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <MX_SDMMC1_SD_Init+0x3c>)
 800126c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001270:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <MX_SDMMC1_SD_Init+0x3c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <MX_SDMMC1_SD_Init+0x3c>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <MX_SDMMC1_SD_Init+0x3c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000740 	.word	0x20000740
 8001294:	50062400 	.word	0x50062400

08001298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012b8:	4a20      	ldr	r2, [pc, #128]	@ (800133c <MX_TIM1_Init+0xa4>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012be:	2278      	movs	r2, #120	@ 0x78
 80012c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e2:	4815      	ldr	r0, [pc, #84]	@ (8001338 <MX_TIM1_Init+0xa0>)
 80012e4:	f006 f879 	bl	80073da <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80012ee:	f000 fd1d 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	4619      	mov	r1, r3
 80012fe:	480e      	ldr	r0, [pc, #56]	@ (8001338 <MX_TIM1_Init+0xa0>)
 8001300:	f006 f92a 	bl	8007558 <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800130a:	f000 fd0f 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <MX_TIM1_Init+0xa0>)
 8001320:	f006 fb24 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800132a:	f000 fcff 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200007c0 	.word	0x200007c0
 800133c:	40012c00 	.word	0x40012c00

08001340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001344:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 8001346:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <MX_USART2_UART_Init+0x94>)
 8001348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001388:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 800138a:	f006 fb77 	bl	8007a7c <HAL_UART_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fcca 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001398:	2100      	movs	r1, #0
 800139a:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 800139c:	f007 fcd3 	bl	8008d46 <HAL_UARTEx_SetTxFifoThreshold>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013a6:	f000 fcc1 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 80013ae:	f007 fd08 	bl	8008dc2 <HAL_UARTEx_SetRxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f000 fcb8 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_USART2_UART_Init+0x90>)
 80013be:	f007 fc89 	bl	8008cd4 <HAL_UARTEx_DisableFifoMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f000 fcb0 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000080c 	.word	0x2000080c
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	@ 0x38
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4bb7      	ldr	r3, [pc, #732]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4ab6      	ldr	r2, [pc, #728]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4bb4      	ldr	r3, [pc, #720]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4bb1      	ldr	r3, [pc, #708]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4ab0      	ldr	r2, [pc, #704]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4bae      	ldr	r3, [pc, #696]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	4bab      	ldr	r3, [pc, #684]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4aaa      	ldr	r2, [pc, #680]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4ba8      	ldr	r3, [pc, #672]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4ba5      	ldr	r3, [pc, #660]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4aa4      	ldr	r2, [pc, #656]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4ba2      	ldr	r3, [pc, #648]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b9f      	ldr	r3, [pc, #636]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4a9e      	ldr	r2, [pc, #632]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4b9c      	ldr	r3, [pc, #624]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b99      	ldr	r3, [pc, #612]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a98      	ldr	r2, [pc, #608]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b96      	ldr	r3, [pc, #600]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147e:	4b93      	ldr	r3, [pc, #588]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	4a92      	ldr	r2, [pc, #584]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148a:	4b90      	ldr	r3, [pc, #576]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001496:	f001 fc39 	bl	8002d0c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b8c      	ldr	r3, [pc, #560]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	4a8b      	ldr	r2, [pc, #556]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a6:	4b89      	ldr	r3, [pc, #548]	@ (80016cc <MX_GPIO_Init+0x2f4>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f242 0102 	movw	r1, #8194	@ 0x2002
 80014b8:	4885      	ldr	r0, [pc, #532]	@ (80016d0 <MX_GPIO_Init+0x2f8>)
 80014ba:	f001 fb4b 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f648 0181 	movw	r1, #34945	@ 0x8881
 80014c4:	4883      	ldr	r0, [pc, #524]	@ (80016d4 <MX_GPIO_Init+0x2fc>)
 80014c6:	f001 fb45 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d4:	f001 fb3e 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_RST_Pin|SPI2_MISO_p2_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2144      	movs	r1, #68	@ 0x44
 80014dc:	487e      	ldr	r0, [pc, #504]	@ (80016d8 <MX_GPIO_Init+0x300>)
 80014de:	f001 fb39 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80014e2:	2200      	movs	r2, #0
 80014e4:	f247 5128 	movw	r1, #29992	@ 0x7528
 80014e8:	487c      	ldr	r0, [pc, #496]	@ (80016dc <MX_GPIO_Init+0x304>)
 80014ea:	f001 fb33 	bl	8002b54 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2121      	movs	r1, #33	@ 0x21
 80014f2:	487b      	ldr	r0, [pc, #492]	@ (80016e0 <MX_GPIO_Init+0x308>)
 80014f4:	f001 fb2e 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 80014fe:	4879      	ldr	r0, [pc, #484]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001500:	f001 fb28 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8001504:	f240 4301 	movw	r3, #1025	@ 0x401
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	486d      	ldr	r0, [pc, #436]	@ (80016d0 <MX_GPIO_Init+0x2f8>)
 800151a:	f001 f971 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 800151e:	f244 3301 	movw	r3, #17153	@ 0x4301
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	486c      	ldr	r0, [pc, #432]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001534:	f001 f964 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8001538:	2308      	movs	r3, #8
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	4867      	ldr	r0, [pc, #412]	@ (80016e8 <MX_GPIO_Init+0x310>)
 800154c:	f001 f958 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001550:	2338      	movs	r3, #56	@ 0x38
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001560:	2306      	movs	r3, #6
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	485e      	ldr	r0, [pc, #376]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 800156c:	f001 f948 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001570:	230a      	movs	r3, #10
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001580:	2305      	movs	r3, #5
 8001582:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	4852      	ldr	r0, [pc, #328]	@ (80016d4 <MX_GPIO_Init+0x2fc>)
 800158c:	f001 f938 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8001590:	f64c 1308 	movw	r3, #51464	@ 0xc908
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001596:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	484a      	ldr	r0, [pc, #296]	@ (80016d0 <MX_GPIO_Init+0x2f8>)
 80015a8:	f001 f92a 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 80015ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015be:	2301      	movs	r3, #1
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015cc:	f001 f918 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DP_Pin OTG_FS_DM_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 80015d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015e2:	230a      	movs	r3, #10
 80015e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f0:	f001 f906 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 80015f4:	23f4      	movs	r3, #244	@ 0xf4
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001604:	230d      	movs	r3, #13
 8001606:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4830      	ldr	r0, [pc, #192]	@ (80016d0 <MX_GPIO_Init+0x2f8>)
 8001610:	f001 f8f6 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8001614:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4828      	ldr	r0, [pc, #160]	@ (80016d0 <MX_GPIO_Init+0x2f8>)
 800162e:	f001 f8e7 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 8001632:	f648 0381 	movw	r3, #34945	@ 0x8881
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4822      	ldr	r0, [pc, #136]	@ (80016d4 <MX_GPIO_Init+0x2fc>)
 800164c:	f001 f8d8 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 8001650:	f240 6313 	movw	r3, #1555	@ 0x613
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001656:	2303      	movs	r3, #3
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001668:	f001 f8ca 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 800166c:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001676:	2302      	movs	r3, #2
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800167e:	2306      	movs	r3, #6
 8001680:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	4816      	ldr	r0, [pc, #88]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 800168a:	f001 f8b9 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 800168e:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001694:	2303      	movs	r3, #3
 8001696:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	480f      	ldr	r0, [pc, #60]	@ (80016e0 <MX_GPIO_Init+0x308>)
 80016a4:	f001 f8ac 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 80016a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c4:	f001 f89c 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|SPI2_MISO_p2_Pin;
 80016c8:	2344      	movs	r3, #68	@ 0x44
 80016ca:	e00f      	b.n	80016ec <MX_GPIO_Init+0x314>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48001000 	.word	0x48001000
 80016d4:	48000c00 	.word	0x48000c00
 80016d8:	48000800 	.word	0x48000800
 80016dc:	48001400 	.word	0x48001400
 80016e0:	48001800 	.word	0x48001800
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48001c00 	.word	0x48001c00
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	489f      	ldr	r0, [pc, #636]	@ (8001980 <MX_GPIO_Init+0x5a8>)
 8001702:	f001 f87d 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8001706:	2307      	movs	r3, #7
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170a:	2312      	movs	r3, #18
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001716:	2304      	movs	r3, #4
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800171a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171e:	4619      	mov	r1, r3
 8001720:	4898      	ldr	r0, [pc, #608]	@ (8001984 <MX_GPIO_Init+0x5ac>)
 8001722:	f001 f86d 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001726:	f247 5328 	movw	r3, #29992	@ 0x7528
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	4891      	ldr	r0, [pc, #580]	@ (8001984 <MX_GPIO_Init+0x5ac>)
 8001740:	f001 f85e 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001744:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174a:	2312      	movs	r3, #18
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001756:	2304      	movs	r3, #4
 8001758:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800175a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175e:	4619      	mov	r1, r3
 8001760:	4889      	ldr	r0, [pc, #548]	@ (8001988 <MX_GPIO_Init+0x5b0>)
 8001762:	f001 f84d 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8001766:	2340      	movs	r3, #64	@ 0x40
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2302      	movs	r3, #2
 8001774:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001776:	2302      	movs	r3, #2
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4880      	ldr	r0, [pc, #512]	@ (8001984 <MX_GPIO_Init+0x5ac>)
 8001782:	f001 f83d 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8001786:	f44f 7324 	mov.w	r3, #656	@ 0x290
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4879      	ldr	r0, [pc, #484]	@ (8001984 <MX_GPIO_Init+0x5ac>)
 800179e:	f001 f82f 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 80017a2:	231c      	movs	r3, #28
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b2:	2305      	movs	r3, #5
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	4872      	ldr	r0, [pc, #456]	@ (8001988 <MX_GPIO_Init+0x5b0>)
 80017be:	f001 f81f 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 80017c2:	2321      	movs	r3, #33	@ 0x21
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	486b      	ldr	r0, [pc, #428]	@ (8001988 <MX_GPIO_Init+0x5b0>)
 80017da:	f001 f811 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 80017de:	2342      	movs	r3, #66	@ 0x42
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4865      	ldr	r0, [pc, #404]	@ (8001988 <MX_GPIO_Init+0x5b0>)
 80017f4:	f001 f804 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 80017f8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fe:	2312      	movs	r3, #18
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800180a:	2304      	movs	r3, #4
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	485d      	ldr	r0, [pc, #372]	@ (800198c <MX_GPIO_Init+0x5b4>)
 8001816:	f000 fff3 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_IN1_Pin ADC1_IN2_Pin uC_ADC_BATT_Pin */
  GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 800181a:	2313      	movs	r3, #19
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800181e:	230b      	movs	r3, #11
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182a:	4619      	mov	r1, r3
 800182c:	4854      	ldr	r0, [pc, #336]	@ (8001980 <MX_GPIO_Init+0x5a8>)
 800182e:	f000 ffe7 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8001832:	f241 0304 	movw	r3, #4100	@ 0x1004
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	4852      	ldr	r0, [pc, #328]	@ (8001990 <MX_GPIO_Init+0x5b8>)
 8001848:	f000 ffda 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 800184c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	4848      	ldr	r0, [pc, #288]	@ (8001984 <MX_GPIO_Init+0x5ac>)
 8001862:	f000 ffcd 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187a:	4619      	mov	r1, r3
 800187c:	4843      	ldr	r0, [pc, #268]	@ (800198c <MX_GPIO_Init+0x5b4>)
 800187e:	f000 ffbf 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001882:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001894:	2307      	movs	r3, #7
 8001896:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189c:	4619      	mov	r1, r3
 800189e:	483b      	ldr	r0, [pc, #236]	@ (800198c <MX_GPIO_Init+0x5b4>)
 80018a0:	f000 ffae 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80018a4:	2308      	movs	r3, #8
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b4:	2305      	movs	r3, #5
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	4830      	ldr	r0, [pc, #192]	@ (8001980 <MX_GPIO_Init+0x5a8>)
 80018c0:	f000 ff9e 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 80018c4:	f242 0302 	movw	r3, #8194	@ 0x2002
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d6:	2307      	movs	r3, #7
 80018d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	482b      	ldr	r0, [pc, #172]	@ (8001990 <MX_GPIO_Init+0x5b8>)
 80018e2:	f000 ff8d 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80018e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f0:	2302      	movs	r3, #2
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018f8:	2306      	movs	r3, #6
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4824      	ldr	r0, [pc, #144]	@ (8001994 <MX_GPIO_Init+0x5bc>)
 8001904:	f000 ff7c 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8001908:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	481b      	ldr	r0, [pc, #108]	@ (8001990 <MX_GPIO_Init+0x5b8>)
 8001922:	f000 ff6d 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8001926:	2304      	movs	r3, #4
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001938:	4619      	mov	r1, r3
 800193a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193e:	f000 ff5f 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_ADC_Pin */
  GPIO_InitStruct.Pin = EX_ADC_Pin;
 8001942:	2320      	movs	r3, #32
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001946:	230b      	movs	r3, #11
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f000 ff52 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 800195c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4808      	ldr	r0, [pc, #32]	@ (8001994 <MX_GPIO_Init+0x5bc>)
 8001972:	f000 ff45 	bl	8002800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001976:	bf00      	nop
 8001978:	3738      	adds	r7, #56	@ 0x38
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	48000800 	.word	0x48000800
 8001984:	48001400 	.word	0x48001400
 8001988:	48001800 	.word	0x48001800
 800198c:	48000c00 	.word	0x48000c00
 8001990:	48000400 	.word	0x48000400
 8001994:	48001000 	.word	0x48001000

08001998 <ai_init>:

/* USER CODE BEGIN 4 */

int ai_init(void) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
  ai_error error;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <ai_init+0x54>)
 80019a0:	603b      	str	r3, [r7, #0]
  error = ai_network_create_and_init(&network, acts, NULL);
 80019a2:	463b      	mov	r3, r7
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <ai_init+0x58>)
 80019aa:	f00b f859 	bl	800ca60 <ai_network_create_and_init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	607b      	str	r3, [r7, #4]
  if (error.type != AI_ERROR_NONE) {
 80019b2:	793b      	ldrb	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <ai_init+0x24>
	  Error_Handler();
 80019b8:	f000 f9b8 	bl	8001d2c <Error_Handler>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <ai_init+0x58>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00b f8ca 	bl	800cb5c <ai_network_inputs_get>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <ai_init+0x5c>)
 80019cc:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <ai_init+0x58>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00b f8db 	bl	800cb90 <ai_network_outputs_get>
 80019da:	4603      	mov	r3, r0
 80019dc:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <ai_init+0x60>)
 80019de:	6013      	str	r3, [r2, #0]

  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000fa0 	.word	0x20000fa0
 80019f0:	20000f80 	.word	0x20000f80
 80019f4:	200011c8 	.word	0x200011c8
 80019f8:	200011cc 	.word	0x200011cc

080019fc <ai_run>:



int ai_run(const void *in_data, void *out_data) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]

	ai_i32 n_batch;
	ai_error error;

	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <ai_run+0x50>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <ai_run+0x54>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	605a      	str	r2, [r3, #4]
/*run*/
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <ai_run+0x58>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a4c <ai_run+0x50>)
 8001a1c:	6811      	ldr	r1, [r2, #0]
 8001a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <ai_run+0x54>)
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00b f90a 	bl	800cc3c <ai_network_run>
 8001a28:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d008      	beq.n	8001a42 <ai_run+0x46>
		error = ai_network_get_error(network);
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <ai_run+0x58>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a fff1 	bl	800ca1c <ai_network_get_error>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60bb      	str	r3, [r7, #8]
		Error_Handler();
 8001a3e:	f000 f975 	bl	8001d2c <Error_Handler>
	};

	return 0;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200011c8 	.word	0x200011c8
 8001a50:	200011cc 	.word	0x200011cc
 8001a54:	20000f80 	.word	0x20000f80

08001a58 <set_input_data>:

void set_input_data(IN_TYPE* in_data, int k, IN_TYPE* ingresso)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	    //vado a riempire l'effettivo array di input da passare alla rete
		for (int i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e00e      	b.n	8001a88 <set_input_data+0x30>
			in_data[i] = ingresso[i+k];
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	441a      	add	r2, r3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	440b      	add	r3, r1
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	dded      	ble.n	8001a6a <set_input_data+0x12>
		//in_data è lungo AI_MODEL_IN_1_SIZE e dipende da k
		// ovvero da dove sono posizionato del blocco corrente

}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <process_output>:

int process_output(IN_TYPE* out_data) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    // Applica la softmax
    ai_float exp0 = exp(out_data[0]);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd65 	bl	8000578 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ec43 2b10 	vmov	d0, r2, r3
 8001ab6:	f00d fa73 	bl	800efa0 <exp>
 8001aba:	ec53 2b10 	vmov	r2, r3, d0
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f873 	bl	8000bac <__aeabi_d2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	61fb      	str	r3, [r7, #28]
    ai_float exp1 = exp(out_data[1]);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd51 	bl	8000578 <__aeabi_f2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	ec43 2b10 	vmov	d0, r2, r3
 8001ade:	f00d fa5f 	bl	800efa0 <exp>
 8001ae2:	ec53 2b10 	vmov	r2, r3, d0
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f85f 	bl	8000bac <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	61bb      	str	r3, [r7, #24]
    ai_float sum_exp = exp0 + exp1;
 8001af2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001af6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afe:	edc7 7a05 	vstr	s15, [r7, #20]

    ai_float softmax1 = exp1 / sum_exp;  // Probabilità per la classe 1
 8001b02:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Determina il risultato
    int risultato = (softmax1 > 0.5f) ? 1 : 0;  // 0.5 è la soglia tipica
 8001b12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b16:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b22:	bfcc      	ite	gt
 8001b24:	2301      	movgt	r3, #1
 8001b26:	2300      	movle	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	60fb      	str	r3, [r7, #12]

    // Scrivi il risultato nel file di output
    return risultato;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <network_run>:

int network_run(IN_TYPE* in_data, IN_TYPE* out_data, IN_TYPE* ingresso)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
    uint16_t time;

    // Avvia il timer per misurare il tempo di inferenza
    HAL_TIM_Base_Start(&htim1);
 8001b44:	4816      	ldr	r0, [pc, #88]	@ (8001ba0 <network_run+0x68>)
 8001b46:	f005 fc9f 	bl	8007488 <HAL_TIM_Base_Start>

    time = __HAL_TIM_GET_COUNTER(&htim1);
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <network_run+0x68>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	83fb      	strh	r3, [r7, #30]

    // Esegui la rete neurale
    ai_run(in_data, out_data);
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff ff51 	bl	80019fc <ai_run>

    // Calcola il tempo di inferenza
    time = __HAL_TIM_GET_COUNTER(&htim1) - time;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <network_run+0x68>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	8bfb      	ldrh	r3, [r7, #30]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	83fb      	strh	r3, [r7, #30]

    // Scrivi il report del tempo di inferenza
    sprintf(buffer, "tempo inferenza : %uus\n", time);
 8001b68:	8bfb      	ldrh	r3, [r7, #30]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	490d      	ldr	r1, [pc, #52]	@ (8001ba4 <network_run+0x6c>)
 8001b6e:	480e      	ldr	r0, [pc, #56]	@ (8001ba8 <network_run+0x70>)
 8001b70:	f00c fe50 	bl	800e814 <siprintf>
    int lunghezza_stringa = strlen(buffer);
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <network_run+0x70>)
 8001b76:	f7fe fb43 	bl	8000200 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	61bb      	str	r3, [r7, #24]
    write_report(buffer, lunghezza_stringa);
 8001b7e:	69b9      	ldr	r1, [r7, #24]
 8001b80:	4809      	ldr	r0, [pc, #36]	@ (8001ba8 <network_run+0x70>)
 8001b82:	f000 f89b 	bl	8001cbc <write_report>


    // Determina l'etichetta (0 o 1) in base al risultato
    int risultato = process_output(out_data);
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	f7ff ff88 	bl	8001a9c <process_output>
 8001b8c:	6178      	str	r0, [r7, #20]

    //aggiungo il risultato dell'inferenza al file di output
    write_to_sd(risultato);
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f000 f860 	bl	8001c54 <write_to_sd>

    return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200007c0 	.word	0x200007c0
 8001ba4:	0800f438 	.word	0x0800f438
 8001ba8:	20000f30 	.word	0x20000f30

08001bac <read_from_sd>:

FRESULT read_from_sd(long int size_blocco, ai_float* valori, int blocco)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
    FRESULT res;

    // Apro il file in modalità lettura
    res = f_open(&file_in, F_INPUT, FA_READ);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4924      	ldr	r1, [pc, #144]	@ (8001c4c <read_from_sd+0xa0>)
 8001bbc:	4824      	ldr	r0, [pc, #144]	@ (8001c50 <read_from_sd+0xa4>)
 8001bbe:	f009 febb 	bl	800b938 <f_open>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK) {
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <read_from_sd+0x28>
        Error_Handler();  // Gestione errore apertura file
 8001bcc:	f000 f8ae 	bl	8001d2c <Error_Handler>
        return res;
 8001bd0:	7ffb      	ldrb	r3, [r7, #31]
 8001bd2:	e036      	b.n	8001c42 <read_from_sd+0x96>
    }

    // Calcolo l'offset per posizionarmi nel file di ingresso secondo il blocco in cui mi trovo
    // size_blocco definisce la dimensione del blocco
    int offset = blocco * size_blocco * sizeof(ai_float);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]

    // Posiziono il puntatore del file all'offset calcolato
    res = f_lseek(&file_in, offset);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	4619      	mov	r1, r3
 8001be4:	481a      	ldr	r0, [pc, #104]	@ (8001c50 <read_from_sd+0xa4>)
 8001be6:	f00a fbbd 	bl	800c364 <f_lseek>
 8001bea:	4603      	mov	r3, r0
 8001bec:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK) {
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <read_from_sd+0x50>
        Error_Handler();  // Gestione errore
 8001bf4:	f000 f89a 	bl	8001d2c <Error_Handler>
        return res;
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
 8001bfa:	e022      	b.n	8001c42 <read_from_sd+0x96>
    }

    // Leggiamo i 'chunk_size' valori dal file
    UINT br;
    res = f_read(&file_in, valori, sizeof(ai_float) * size_blocco, &br);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	009a      	lsls	r2, r3, #2
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	4812      	ldr	r0, [pc, #72]	@ (8001c50 <read_from_sd+0xa4>)
 8001c08:	f00a f850 	bl	800bcac <f_read>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK || br != (sizeof(ai_float) * size_blocco)) {
 8001c10:	7ffb      	ldrb	r3, [r7, #31]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d104      	bne.n	8001c20 <read_from_sd+0x74>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	009a      	lsls	r2, r3, #2
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d003      	beq.n	8001c28 <read_from_sd+0x7c>
        Error_Handler();  // Gestione errore durante la lettura
 8001c20:	f000 f884 	bl	8001d2c <Error_Handler>
        return res;
 8001c24:	7ffb      	ldrb	r3, [r7, #31]
 8001c26:	e00c      	b.n	8001c42 <read_from_sd+0x96>
    }

    // Chiudiamo il file
    res = f_close(&file_in);
 8001c28:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <read_from_sd+0xa4>)
 8001c2a:	f00a fb71 	bl	800c310 <f_close>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	77fb      	strb	r3, [r7, #31]
    if (res != FR_OK) {
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <read_from_sd+0x94>
        Error_Handler();  // Gestione errore durante la chiusura del file
 8001c38:	f000 f878 	bl	8001d2c <Error_Handler>
        return res;
 8001c3c:	7ffb      	ldrb	r3, [r7, #31]
 8001c3e:	e000      	b.n	8001c42 <read_from_sd+0x96>
    }

    return res;  // 	Restituisce FR_OK se non ci sono stati errori
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0800f400 	.word	0x0800f400
 8001c50:	20000ad0 	.word	0x20000ad0

08001c54 <write_to_sd>:




void write_to_sd (int risultato)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
    UINT bw;
	res = f_open(&file_out, F_OUT, FA_WRITE | FA_OPEN_APPEND);
 8001c5c:	2232      	movs	r2, #50	@ 0x32
 8001c5e:	4915      	ldr	r1, [pc, #84]	@ (8001cb4 <write_to_sd+0x60>)
 8001c60:	4815      	ldr	r0, [pc, #84]	@ (8001cb8 <write_to_sd+0x64>)
 8001c62:	f009 fe69 	bl	800b938 <f_open>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <write_to_sd+0x20>
	{
		 Error_Handler();
 8001c70:	f000 f85c 	bl	8001d2c <Error_Handler>
	}
	res = f_write(&file_out, &risultato, sizeof(risultato), &bw);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	1d39      	adds	r1, r7, #4
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	480e      	ldr	r0, [pc, #56]	@ (8001cb8 <write_to_sd+0x64>)
 8001c7e:	f00a f954 	bl	800bf2a <f_write>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
	if((res != FR_OK)||(bw == 0))
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <write_to_sd+0x3e>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <write_to_sd+0x42>
	{
		Error_Handler();
 8001c92:	f000 f84b 	bl	8001d2c <Error_Handler>
	}
	res = f_close(&file_out);
 8001c96:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <write_to_sd+0x64>)
 8001c98:	f00a fb3a 	bl	800c310 <f_close>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <write_to_sd+0x56>
	{
		 Error_Handler();
 8001ca6:	f000 f841 	bl	8001d2c <Error_Handler>
	}

}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	0800f450 	.word	0x0800f450
 8001cb8:	200008a0 	.word	0x200008a0

08001cbc <write_report>:


void write_report(char* string, int string_len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT bw;
	res = f_open(&f_report, F_REPORT, FA_WRITE | FA_OPEN_APPEND);
 8001cc6:	2232      	movs	r2, #50	@ 0x32
 8001cc8:	4916      	ldr	r1, [pc, #88]	@ (8001d24 <write_report+0x68>)
 8001cca:	4817      	ldr	r0, [pc, #92]	@ (8001d28 <write_report+0x6c>)
 8001ccc:	f009 fe34 	bl	800b938 <f_open>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <write_report+0x22>
	{
		Error_Handler();
 8001cda:	f000 f827 	bl	8001d2c <Error_Handler>
	}
	res = f_write(&f_report, string, string_len, &bw);
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4810      	ldr	r0, [pc, #64]	@ (8001d28 <write_report+0x6c>)
 8001ce8:	f00a f91f 	bl	800bf2a <f_write>
 8001cec:	4603      	mov	r3, r0
 8001cee:	73fb      	strb	r3, [r7, #15]
	if((res != FR_OK)||(bw != string_len))
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <write_report+0x42>
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <write_report+0x46>
	{
		Error_Handler();
 8001cfe:	f000 f815 	bl	8001d2c <Error_Handler>
	}
	res = f_close(&f_report);
 8001d02:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <write_report+0x6c>)
 8001d04:	f00a fb04 	bl	800c310 <f_close>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
	if((res != FR_OK)||(bw == 0))
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <write_report+0x5c>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <write_report+0x60>
	{
		Error_Handler();
 8001d18:	f000 f808 	bl	8001d2c <Error_Handler>
	}
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	0800f45c 	.word	0x0800f45c
 8001d28:	20000d00 	.word	0x20000d00

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <Error_Handler+0x8>

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_MspInit+0x44>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d42:	4a0e      	ldr	r2, [pc, #56]	@ (8001d7c <HAL_MspInit+0x44>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <HAL_MspInit+0x44>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	4a08      	ldr	r2, [pc, #32]	@ (8001d7c <HAL_MspInit+0x44>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_MspInit+0x44>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <HAL_CRC_MspInit+0x38>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d10b      	bne.n	8001daa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_CRC_MspInit+0x3c>)
 8001d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_CRC_MspInit+0x3c>)
 8001d98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <HAL_CRC_MspInit+0x3c>)
 8001da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023000 	.word	0x40023000
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0b2      	sub	sp, #200	@ 0xc8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	229c      	movs	r2, #156	@ 0x9c
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00c fd37 	bl	800e854 <memset>
  if(hsd->Instance==SDMMC1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <HAL_SD_MspInit+0x108>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d166      	bne.n	8001ebe <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001df0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001df4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfc:	f107 0318 	add.w	r3, r7, #24
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 fe67 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8001e0c:	f7ff ff8e 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e14:	4a2d      	ldr	r2, [pc, #180]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e28:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2c:	4a27      	ldr	r2, [pc, #156]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e44:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <HAL_SD_MspInit+0x10c>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> SDMMC1_D1
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8001e58:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                          |SDMMC_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e72:	230c      	movs	r3, #12
 8001e74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4814      	ldr	r0, [pc, #80]	@ (8001ed0 <HAL_SD_MspInit+0x110>)
 8001e80:	f000 fcbe 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e84:	2304      	movs	r3, #4
 8001e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480a      	ldr	r0, [pc, #40]	@ (8001ed4 <HAL_SD_MspInit+0x114>)
 8001eaa:	f000 fca9 	bl	8002800 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2031      	movs	r0, #49	@ 0x31
 8001eb4:	f000 fabf 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001eb8:	2031      	movs	r0, #49	@ 0x31
 8001eba:	f000 fad8 	bl	800246e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001ebe:	bf00      	nop
 8001ec0:	37c8      	adds	r7, #200	@ 0xc8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	50062400 	.word	0x50062400
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000c00 	.word	0x48000c00

08001ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <HAL_TIM_Base_MspInit+0x38>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10b      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_TIM_Base_MspInit+0x3c>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eee:	4a09      	ldr	r2, [pc, #36]	@ (8001f14 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ef4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <HAL_TIM_Base_MspInit+0x3c>)
 8001ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0b0      	sub	sp, #192	@ 0xc0
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	229c      	movs	r2, #156	@ 0x9c
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00c fc8b 	bl	800e854 <memset>
  if(huart->Instance==USART2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a25      	ldr	r2, [pc, #148]	@ (8001fd8 <HAL_UART_MspInit+0xc0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d142      	bne.n	8001fce <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 fdbd 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f60:	f7ff fee4 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f64:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <HAL_UART_MspInit+0xc4>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <HAL_UART_MspInit+0xc4>)
 8001f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_UART_MspInit+0xc4>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7c:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <HAL_UART_MspInit+0xc4>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f80:	4a16      	ldr	r2, [pc, #88]	@ (8001fdc <HAL_UART_MspInit+0xc4>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f88:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <HAL_UART_MspInit+0xc4>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001f94:	2370      	movs	r3, #112	@ 0x70
 8001f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fac:	2307      	movs	r3, #7
 8001fae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4809      	ldr	r0, [pc, #36]	@ (8001fe0 <HAL_UART_MspInit+0xc8>)
 8001fba:	f000 fc21 	bl	8002800 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2026      	movs	r0, #38	@ 0x26
 8001fc4:	f000 fa37 	bl	8002436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc8:	2026      	movs	r0, #38	@ 0x26
 8001fca:	f000 fa50 	bl	800246e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001fce:	bf00      	nop
 8001fd0:	37c0      	adds	r7, #192	@ 0xc0
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40004400 	.word	0x40004400
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	48000c00 	.word	0x48000c00

08001fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <NMI_Handler+0x4>

08001fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <UsageFault_Handler+0x4>

0800200c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203a:	f000 f8dd 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <USART2_IRQHandler+0x10>)
 800204a:	f005 fd67 	bl	8007b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000080c 	.word	0x2000080c

08002058 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <SDMMC1_IRQHandler+0x10>)
 800205e:	f003 ff3f 	bl	8005ee0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000740 	.word	0x20000740

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f00c fbf2 	bl	800e884 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200a0000 	.word	0x200a0000
 80020cc:	00000800 	.word	0x00000800
 80020d0:	200011d0 	.word	0x200011d0
 80020d4:	20040000 	.word	0x20040000

080020d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002134 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002100:	f7ff ffea 	bl	80020d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <LoopForever+0x6>)
  ldr r1, =_edata
 8002106:	490d      	ldr	r1, [pc, #52]	@ (800213c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <LoopForever+0xe>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800211c:	4c0a      	ldr	r4, [pc, #40]	@ (8002148 <LoopForever+0x16>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212a:	f00c fbb1 	bl	800e890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800212e:	f7fe ff05 	bl	8000f3c <main>

08002132 <LoopForever>:

LoopForever:
    b LoopForever
 8002132:	e7fe      	b.n	8002132 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002134:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	200006e4 	.word	0x200006e4
  ldr r2, =_sidata
 8002140:	08013ea0 	.word	0x08013ea0
  ldr r2, =_sbss
 8002144:	20000700 	.word	0x20000700
  ldr r4, =_ebss
 8002148:	20001618 	.word	0x20001618

0800214c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC1_IRQHandler>

0800214e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f961 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f80e 	bl	8002180 <HAL_InitTick>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	71fb      	strb	r3, [r7, #7]
 800216e:	e001      	b.n	8002174 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002170:	f7ff fde2 	bl	8001d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002174:	79fb      	ldrb	r3, [r7, #7]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800218c:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <HAL_InitTick+0x6c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d023      	beq.n	80021dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <HAL_InitTick+0x70>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_InitTick+0x6c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f96d 	bl	800248a <HAL_SYSTICK_Config>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d809      	bhi.n	80021d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f000 f937 	bl	8002436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c8:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_InitTick+0x74>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e007      	b.n	80021e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	e004      	b.n	80021e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	e001      	b.n	80021e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008
 800221c:	200011d4 	.word	0x200011d4

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	200011d4 	.word	0x200011d4

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4907      	ldr	r1, [pc, #28]	@ (800231c <__NVIC_EnableIRQ+0x38>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	@ (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	@ (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	@ 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	@ 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff8e 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	@ (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff29 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff3e 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff8e 	bl	8002374 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5d 	bl	8002320 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff31 	bl	80022e4 <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e054      	b.n	8002560 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7f5b      	ldrb	r3, [r3, #29]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fc5a 	bl	8001d80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a22      	ldr	r2, [pc, #136]	@ (8002568 <HAL_CRC_Init+0xc4>)
 80024e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0218 	bic.w	r2, r2, #24
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	e00c      	b.n	800250e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	461a      	mov	r2, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f834 	bl	800256c <HAL_CRCEx_Polynomial_Set>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e028      	b.n	8002560 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	795b      	ldrb	r3, [r3, #5]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	611a      	str	r2, [r3, #16]
 8002520:	e004      	b.n	800252c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6912      	ldr	r2, [r2, #16]
 800252a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699a      	ldr	r2, [r3, #24]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	04c11db7 	.word	0x04c11db7

0800256c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800257c:	231f      	movs	r3, #31
 800257e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
 800258e:	e063      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002590:	bf00      	nop
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	613a      	str	r2, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_CRCEx_Polynomial_Set+0x44>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b18      	cmp	r3, #24
 80025b4:	d846      	bhi.n	8002644 <HAL_CRCEx_Polynomial_Set+0xd8>
 80025b6:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <HAL_CRCEx_Polynomial_Set+0x50>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	0800264b 	.word	0x0800264b
 80025c0:	08002645 	.word	0x08002645
 80025c4:	08002645 	.word	0x08002645
 80025c8:	08002645 	.word	0x08002645
 80025cc:	08002645 	.word	0x08002645
 80025d0:	08002645 	.word	0x08002645
 80025d4:	08002645 	.word	0x08002645
 80025d8:	08002645 	.word	0x08002645
 80025dc:	08002639 	.word	0x08002639
 80025e0:	08002645 	.word	0x08002645
 80025e4:	08002645 	.word	0x08002645
 80025e8:	08002645 	.word	0x08002645
 80025ec:	08002645 	.word	0x08002645
 80025f0:	08002645 	.word	0x08002645
 80025f4:	08002645 	.word	0x08002645
 80025f8:	08002645 	.word	0x08002645
 80025fc:	0800262d 	.word	0x0800262d
 8002600:	08002645 	.word	0x08002645
 8002604:	08002645 	.word	0x08002645
 8002608:	08002645 	.word	0x08002645
 800260c:	08002645 	.word	0x08002645
 8002610:	08002645 	.word	0x08002645
 8002614:	08002645 	.word	0x08002645
 8002618:	08002645 	.word	0x08002645
 800261c:	08002621 	.word	0x08002621
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d913      	bls.n	800264e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800262a:	e010      	b.n	800264e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b07      	cmp	r3, #7
 8002630:	d90f      	bls.n	8002652 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002636:	e00c      	b.n	8002652 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b0f      	cmp	r3, #15
 800263c:	d90b      	bls.n	8002656 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002642:	e008      	b.n	8002656 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
        break;
 8002648:	e006      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800264a:	bf00      	nop
 800264c:	e004      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800264e:	bf00      	nop
 8002650:	e002      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002652:	bf00      	nop
 8002654:	e000      	b.n	8002658 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002656:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 0118 	bic.w	r1, r3, #24
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d008      	beq.n	80026b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e040      	b.n	8002734 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 020e 	bic.w	r2, r2, #14
 80026c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f003 021c 	and.w	r2, r3, #28
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f202 	lsl.w	r2, r1, r2
 80026f4:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002716:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002720:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d005      	beq.n	8002764 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2204      	movs	r2, #4
 800275c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e047      	b.n	80027f4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020e 	bic.w	r2, r2, #14
 8002772:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	f003 021c 	and.w	r2, r3, #28
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	2101      	movs	r1, #1
 80027a2:	fa01 f202 	lsl.w	r2, r1, r2
 80027a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027d2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
    }
  }
  return status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280e:	e166      	b.n	8002ade <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8158 	beq.w	8002ad8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d005      	beq.n	8002840 <HAL_GPIO_Init+0x40>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d130      	bne.n	80028a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002876:	2201      	movs	r2, #1
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4013      	ands	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 0201 	and.w	r2, r3, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d017      	beq.n	80028de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d123      	bne.n	8002932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	08da      	lsrs	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3208      	adds	r2, #8
 80028f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	6939      	ldr	r1, [r7, #16]
 800292e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0203 	and.w	r2, r3, #3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80b2 	beq.w	8002ad8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002974:	4b61      	ldr	r3, [pc, #388]	@ (8002afc <HAL_GPIO_Init+0x2fc>)
 8002976:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002978:	4a60      	ldr	r2, [pc, #384]	@ (8002afc <HAL_GPIO_Init+0x2fc>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002980:	4b5e      	ldr	r3, [pc, #376]	@ (8002afc <HAL_GPIO_Init+0x2fc>)
 8002982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800298c:	4a5c      	ldr	r2, [pc, #368]	@ (8002b00 <HAL_GPIO_Init+0x300>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029b6:	d02b      	beq.n	8002a10 <HAL_GPIO_Init+0x210>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_GPIO_Init+0x304>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d025      	beq.n	8002a0c <HAL_GPIO_Init+0x20c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a51      	ldr	r2, [pc, #324]	@ (8002b08 <HAL_GPIO_Init+0x308>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d01f      	beq.n	8002a08 <HAL_GPIO_Init+0x208>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a50      	ldr	r2, [pc, #320]	@ (8002b0c <HAL_GPIO_Init+0x30c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d019      	beq.n	8002a04 <HAL_GPIO_Init+0x204>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002b10 <HAL_GPIO_Init+0x310>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_GPIO_Init+0x200>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_GPIO_Init+0x314>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00d      	beq.n	80029fc <HAL_GPIO_Init+0x1fc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <HAL_GPIO_Init+0x318>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <HAL_GPIO_Init+0x1f8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a4c      	ldr	r2, [pc, #304]	@ (8002b1c <HAL_GPIO_Init+0x31c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_GPIO_Init+0x1f4>
 80029f0:	2307      	movs	r3, #7
 80029f2:	e00e      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 80029f4:	2308      	movs	r3, #8
 80029f6:	e00c      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 80029f8:	2306      	movs	r3, #6
 80029fa:	e00a      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 80029fc:	2305      	movs	r3, #5
 80029fe:	e008      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a00:	2304      	movs	r3, #4
 8002a02:	e006      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a04:	2303      	movs	r3, #3
 8002a06:	e004      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e002      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_GPIO_Init+0x212>
 8002a10:	2300      	movs	r3, #0
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	f002 0203 	and.w	r2, r2, #3
 8002a18:	0092      	lsls	r2, r2, #2
 8002a1a:	4093      	lsls	r3, r2
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a22:	4937      	ldr	r1, [pc, #220]	@ (8002b00 <HAL_GPIO_Init+0x300>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a30:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a54:	4a32      	ldr	r2, [pc, #200]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a7e:	4a28      	ldr	r2, [pc, #160]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a84:	4b26      	ldr	r3, [pc, #152]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002aae:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ad2:	4a13      	ldr	r2, [pc, #76]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f ae91 	bne.w	8002810 <HAL_GPIO_Init+0x10>
  }
}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	371c      	adds	r7, #28
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010000 	.word	0x40010000
 8002b04:	48000400 	.word	0x48000400
 8002b08:	48000800 	.word	0x48000800
 8002b0c:	48000c00 	.word	0x48000c00
 8002b10:	48001000 	.word	0x48001000
 8002b14:	48001400 	.word	0x48001400
 8002b18:	48001800 	.word	0x48001800
 8002b1c:	48001c00 	.word	0x48001c00
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b88:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b94:	d102      	bne.n	8002b9c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b9a:	e00b      	b.n	8002bb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	d102      	bne.n	8002bb2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bb0:	e000      	b.n	8002bb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002bb2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40007000 	.word	0x40007000

08002bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d141      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bde:	d131      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002be0:	4b47      	ldr	r3, [pc, #284]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be6:	4a46      	ldr	r2, [pc, #280]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf0:	4b43      	ldr	r3, [pc, #268]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bf8:	4a41      	ldr	r2, [pc, #260]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c00:	4b40      	ldr	r3, [pc, #256]	@ (8002d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2232      	movs	r2, #50	@ 0x32
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	0c9b      	lsrs	r3, r3, #18
 8002c12:	3301      	adds	r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c16:	e002      	b.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c1e:	4b38      	ldr	r3, [pc, #224]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d102      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f2      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c32:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d158      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e057      	b.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c44:	4b2e      	ldr	r3, [pc, #184]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c54:	e04d      	b.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5c:	d141      	bne.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5e:	4b28      	ldr	r3, [pc, #160]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c6a:	d131      	bne.n	8002cd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c6c:	4b24      	ldr	r3, [pc, #144]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c72:	4a23      	ldr	r2, [pc, #140]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	4b20      	ldr	r3, [pc, #128]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c84:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2232      	movs	r2, #50	@ 0x32
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	0c9b      	lsrs	r3, r3, #18
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ca2:	e002      	b.n	8002caa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002caa:	4b15      	ldr	r3, [pc, #84]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb6:	d102      	bne.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f2      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d112      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e011      	b.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ce0:	e007      	b.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ce2:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cf0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40007000 	.word	0x40007000
 8002d04:	20000000 	.word	0x20000000
 8002d08:	431bde83 	.word	0x431bde83

08002d0c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d1a:	6053      	str	r3, [r2, #4]
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40007000 	.word	0x40007000

08002d2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f000 bc08 	b.w	8003550 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d40:	4b96      	ldr	r3, [pc, #600]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4a:	4b94      	ldr	r3, [pc, #592]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80e4 	beq.w	8002f2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4c>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b0c      	cmp	r3, #12
 8002d6c:	f040 808b 	bne.w	8002e86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	f040 8087 	bne.w	8002e86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d78:	4b88      	ldr	r3, [pc, #544]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_OscConfig+0x64>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e3df      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	4b81      	ldr	r3, [pc, #516]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <HAL_RCC_OscConfig+0x7e>
 8002da0:	4b7e      	ldr	r3, [pc, #504]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002da8:	e005      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a>
 8002daa:	4b7c      	ldr	r3, [pc, #496]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d223      	bcs.n	8002e02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fdca 	bl	8003958 <RCC_SetFlashLatencyFromMSIRange>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e3c0      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dce:	4b73      	ldr	r3, [pc, #460]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a72      	ldr	r2, [pc, #456]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002dd4:	f043 0308 	orr.w	r3, r3, #8
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b70      	ldr	r3, [pc, #448]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	496d      	ldr	r1, [pc, #436]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dec:	4b6b      	ldr	r3, [pc, #428]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	4968      	ldr	r1, [pc, #416]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	e025      	b.n	8002e4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e02:	4b66      	ldr	r3, [pc, #408]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a65      	ldr	r2, [pc, #404]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b63      	ldr	r3, [pc, #396]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	4960      	ldr	r1, [pc, #384]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e20:	4b5e      	ldr	r3, [pc, #376]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	495b      	ldr	r1, [pc, #364]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fd8a 	bl	8003958 <RCC_SetFlashLatencyFromMSIRange>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e380      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e4e:	f000 fcc1 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b51      	ldr	r3, [pc, #324]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	4950      	ldr	r1, [pc, #320]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa4 <HAL_RCC_OscConfig+0x278>)
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f984 	bl	8002180 <HAL_InitTick>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d052      	beq.n	8002f28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	e364      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d032      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e8e:	4b43      	ldr	r3, [pc, #268]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a42      	ldr	r2, [pc, #264]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e9a:	f7ff f9c1 	bl	8002220 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ea2:	f7ff f9bd 	bl	8002220 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e34d      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eb4:	4b39      	ldr	r3, [pc, #228]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec0:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a35      	ldr	r2, [pc, #212]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b33      	ldr	r3, [pc, #204]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4930      	ldr	r1, [pc, #192]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ede:	4b2f      	ldr	r3, [pc, #188]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	492b      	ldr	r1, [pc, #172]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
 8002ef2:	e01a      	b.n	8002f2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ef4:	4b29      	ldr	r3, [pc, #164]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a28      	ldr	r2, [pc, #160]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f00:	f7ff f98e 	bl	8002220 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f08:	f7ff f98a 	bl	8002220 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e31a      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f1a:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x1dc>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d073      	beq.n	800301e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d005      	beq.n	8002f48 <HAL_RCC_OscConfig+0x21c>
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d10e      	bne.n	8002f60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d063      	beq.n	800301c <HAL_RCC_OscConfig+0x2f0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d15f      	bne.n	800301c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e2f7      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x24c>
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e025      	b.n	8002fc4 <HAL_RCC_OscConfig+0x298>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f80:	d114      	bne.n	8002fac <HAL_RCC_OscConfig+0x280>
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a02      	ldr	r2, [pc, #8]	@ (8002f9c <HAL_RCC_OscConfig+0x270>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e013      	b.n	8002fc4 <HAL_RCC_OscConfig+0x298>
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	0800f4dc 	.word	0x0800f4dc
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	4ba0      	ldr	r3, [pc, #640]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a9f      	ldr	r2, [pc, #636]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b9d      	ldr	r3, [pc, #628]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a9c      	ldr	r2, [pc, #624]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7ff f928 	bl	8002220 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f924 	bl	8002220 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	@ 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e2b4      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe6:	4b92      	ldr	r3, [pc, #584]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2a8>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7ff f914 	bl	8002220 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7ff f910 	bl	8002220 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	@ 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e2a0      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800300e:	4b88      	ldr	r3, [pc, #544]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2d0>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d060      	beq.n	80030ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d005      	beq.n	800303c <HAL_RCC_OscConfig+0x310>
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d119      	bne.n	800306a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d116      	bne.n	800306a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800303c:	4b7c      	ldr	r3, [pc, #496]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_OscConfig+0x328>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e27d      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	4973      	ldr	r1, [pc, #460]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003068:	e040      	b.n	80030ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d023      	beq.n	80030ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003072:	4b6f      	ldr	r3, [pc, #444]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6e      	ldr	r2, [pc, #440]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7ff f8cf 	bl	8002220 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003086:	f7ff f8cb 	bl	8002220 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e25b      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003098:	4b65      	ldr	r3, [pc, #404]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b62      	ldr	r3, [pc, #392]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	495f      	ldr	r1, [pc, #380]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
 80030b8:	e018      	b.n	80030ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5c      	ldr	r2, [pc, #368]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 80030c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7ff f8ab 	bl	8002220 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ce:	f7ff f8a7 	bl	8002220 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e237      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e0:	4b53      	ldr	r3, [pc, #332]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d03c      	beq.n	8003172 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01c      	beq.n	800313a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003100:	4b4b      	ldr	r3, [pc, #300]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003106:	4a4a      	ldr	r2, [pc, #296]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7ff f886 	bl	8002220 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7ff f882 	bl	8002220 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e212      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 800312c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ef      	beq.n	8003118 <HAL_RCC_OscConfig+0x3ec>
 8003138:	e01b      	b.n	8003172 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313a:	4b3d      	ldr	r3, [pc, #244]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 800313c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003140:	4a3b      	ldr	r2, [pc, #236]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7ff f869 	bl	8002220 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003152:	f7ff f865 	bl	8002220 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1f5      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003164:	4b32      	ldr	r3, [pc, #200]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ef      	bne.n	8003152 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80a6 	beq.w	80032cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003180:	2300      	movs	r3, #0
 8003182:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003184:	4b2a      	ldr	r3, [pc, #168]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003190:	4b27      	ldr	r3, [pc, #156]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003194:	4a26      	ldr	r2, [pc, #152]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319a:	6593      	str	r3, [r2, #88]	@ 0x58
 800319c:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a8:	2301      	movs	r3, #1
 80031aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ac:	4b21      	ldr	r3, [pc, #132]	@ (8003234 <HAL_RCC_OscConfig+0x508>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d118      	bne.n	80031ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_RCC_OscConfig+0x508>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_RCC_OscConfig+0x508>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c4:	f7ff f82c 	bl	8002220 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031cc:	f7ff f828 	bl	8002220 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1b8      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <HAL_RCC_OscConfig+0x508>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d108      	bne.n	8003204 <HAL_RCC_OscConfig+0x4d8>
 80031f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003202:	e029      	b.n	8003258 <HAL_RCC_OscConfig+0x52c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b05      	cmp	r3, #5
 800320a:	d115      	bne.n	8003238 <HAL_RCC_OscConfig+0x50c>
 800320c:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003212:	4a07      	ldr	r2, [pc, #28]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800321c:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	4a03      	ldr	r2, [pc, #12]	@ (8003230 <HAL_RCC_OscConfig+0x504>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800322c:	e014      	b.n	8003258 <HAL_RCC_OscConfig+0x52c>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	40007000 	.word	0x40007000
 8003238:	4b9d      	ldr	r3, [pc, #628]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323e:	4a9c      	ldr	r2, [pc, #624]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003248:	4b99      	ldr	r3, [pc, #612]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324e:	4a98      	ldr	r2, [pc, #608]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d016      	beq.n	800328e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe ffde 	bl	8002220 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fe ffda 	bl	8002220 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e168      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327e:	4b8c      	ldr	r3, [pc, #560]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ed      	beq.n	8003268 <HAL_RCC_OscConfig+0x53c>
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe ffc7 	bl	8002220 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe ffc3 	bl	8002220 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e151      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ac:	4b80      	ldr	r3, [pc, #512]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ed      	bne.n	8003296 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b7b      	ldr	r3, [pc, #492]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c4:	4a7a      	ldr	r2, [pc, #488]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d03c      	beq.n	8003352 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01c      	beq.n	800331a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032e0:	4b73      	ldr	r3, [pc, #460]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80032e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032e6:	4a72      	ldr	r2, [pc, #456]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe ff96 	bl	8002220 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032f8:	f7fe ff92 	bl	8002220 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e122      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800330a:	4b69      	ldr	r3, [pc, #420]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800330c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ef      	beq.n	80032f8 <HAL_RCC_OscConfig+0x5cc>
 8003318:	e01b      	b.n	8003352 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800331a:	4b65      	ldr	r3, [pc, #404]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800331c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003320:	4a63      	ldr	r2, [pc, #396]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332a:	f7fe ff79 	bl	8002220 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003332:	f7fe ff75 	bl	8002220 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e105      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003344:	4b5a      	ldr	r3, [pc, #360]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003346:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1ef      	bne.n	8003332 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80f9 	beq.w	800354e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	2b02      	cmp	r3, #2
 8003362:	f040 80cf 	bne.w	8003504 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003366:	4b52      	ldr	r3, [pc, #328]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f003 0203 	and.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	429a      	cmp	r2, r3
 8003378:	d12c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003384:	3b01      	subs	r3, #1
 8003386:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d123      	bne.n	80033d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d11b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d113      	bne.n	80033d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	3b01      	subs	r3, #1
 80033ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d109      	bne.n	80033d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d071      	beq.n	80034b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d068      	beq.n	80034ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033da:	4b35      	ldr	r3, [pc, #212]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033e6:	4b32      	ldr	r3, [pc, #200]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0ac      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033f6:	4b2e      	ldr	r3, [pc, #184]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2d      	ldr	r2, [pc, #180]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80033fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003400:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003402:	f7fe ff0d 	bl	8002220 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe ff09 	bl	8002220 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e099      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341c:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003428:	4b21      	ldr	r3, [pc, #132]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	4b21      	ldr	r3, [pc, #132]	@ (80034b4 <HAL_RCC_OscConfig+0x788>)
 800342e:	4013      	ands	r3, r2
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003438:	3a01      	subs	r2, #1
 800343a:	0112      	lsls	r2, r2, #4
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003442:	0212      	lsls	r2, r2, #8
 8003444:	4311      	orrs	r1, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800344a:	0852      	lsrs	r2, r2, #1
 800344c:	3a01      	subs	r2, #1
 800344e:	0552      	lsls	r2, r2, #21
 8003450:	4311      	orrs	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003456:	0852      	lsrs	r2, r2, #1
 8003458:	3a01      	subs	r2, #1
 800345a:	0652      	lsls	r2, r2, #25
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003462:	06d2      	lsls	r2, r2, #27
 8003464:	430a      	orrs	r2, r1
 8003466:	4912      	ldr	r1, [pc, #72]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003468:	4313      	orrs	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800346c:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0f      	ldr	r2, [pc, #60]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003478:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a0c      	ldr	r2, [pc, #48]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003484:	f7fe fecc 	bl	8002220 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fec8 	bl	8002220 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e058      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <HAL_RCC_OscConfig+0x784>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034aa:	e050      	b.n	800354e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e04f      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
 80034b0:	40021000 	.word	0x40021000
 80034b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b8:	4b27      	ldr	r3, [pc, #156]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d144      	bne.n	800354e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034c4:	4b24      	ldr	r3, [pc, #144]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a23      	ldr	r2, [pc, #140]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d0:	4b21      	ldr	r3, [pc, #132]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a20      	ldr	r2, [pc, #128]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034dc:	f7fe fea0 	bl	8002220 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fe9c 	bl	8002220 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e02c      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f6:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x7b8>
 8003502:	e024      	b.n	800354e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d01f      	beq.n	800354a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a12      	ldr	r2, [pc, #72]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 8003510:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fe fe83 	bl	8002220 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351e:	f7fe fe7f 	bl	8002220 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e00f      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	4905      	ldr	r1, [pc, #20]	@ (8003558 <HAL_RCC_OscConfig+0x82c>)
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_RCC_OscConfig+0x830>)
 8003544:	4013      	ands	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
 8003548:	e001      	b.n	800354e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	feeefffc 	.word	0xfeeefffc

08003560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e11d      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b90      	ldr	r3, [pc, #576]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d910      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b8d      	ldr	r3, [pc, #564]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 020f 	bic.w	r2, r3, #15
 800358e:	498b      	ldr	r1, [pc, #556]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b89      	ldr	r3, [pc, #548]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e105      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	4b81      	ldr	r3, [pc, #516]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d908      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b7e      	ldr	r3, [pc, #504]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	497b      	ldr	r1, [pc, #492]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d079      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d11e      	bne.n	8003628 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	4b75      	ldr	r3, [pc, #468]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0dc      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80035fa:	f000 fa07 	bl	8003a0c <RCC_GetSysClockFreqFromPLLSource>
 80035fe:	4603      	mov	r3, r0
 8003600:	4a70      	ldr	r2, [pc, #448]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d946      	bls.n	8003694 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003606:	4b6e      	ldr	r3, [pc, #440]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d140      	bne.n	8003694 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003612:	4b6b      	ldr	r3, [pc, #428]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800361a:	4a69      	ldr	r2, [pc, #420]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800361c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003620:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e035      	b.n	8003694 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d107      	bne.n	8003640 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003630:	4b63      	ldr	r3, [pc, #396]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d115      	bne.n	8003668 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b9      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003648:	4b5d      	ldr	r3, [pc, #372]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0ad      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003658:	4b59      	ldr	r3, [pc, #356]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0a5      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003668:	f000 f8b4 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800366c:	4603      	mov	r3, r0
 800366e:	4a55      	ldr	r2, [pc, #340]	@ (80037c4 <HAL_RCC_ClockConfig+0x264>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d90f      	bls.n	8003694 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003674:	4b52      	ldr	r3, [pc, #328]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003680:	4b4f      	ldr	r3, [pc, #316]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003688:	4a4d      	ldr	r2, [pc, #308]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800368a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800368e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003690:	2380      	movs	r3, #128	@ 0x80
 8003692:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003694:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 0203 	bic.w	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4947      	ldr	r1, [pc, #284]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a6:	f7fe fdbb 	bl	8002220 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ae:	f7fe fdb7 	bl	8002220 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e077      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c4:	4b3e      	ldr	r3, [pc, #248]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 020c 	and.w	r2, r3, #12
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d1eb      	bne.n	80036ae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b80      	cmp	r3, #128	@ 0x80
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036dc:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a37      	ldr	r2, [pc, #220]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80036e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036e6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003700:	429a      	cmp	r2, r3
 8003702:	d208      	bcs.n	8003716 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	492b      	ldr	r1, [pc, #172]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d210      	bcs.n	8003746 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003724:	4b25      	ldr	r3, [pc, #148]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 020f 	bic.w	r2, r3, #15
 800372c:	4923      	ldr	r1, [pc, #140]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003734:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_RCC_ClockConfig+0x25c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d001      	beq.n	8003746 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e036      	b.n	80037b4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003752:	4b1b      	ldr	r3, [pc, #108]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4918      	ldr	r1, [pc, #96]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003770:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4910      	ldr	r1, [pc, #64]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003784:	f000 f826 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <HAL_RCC_ClockConfig+0x260>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	490c      	ldr	r1, [pc, #48]	@ (80037c8 <HAL_RCC_ClockConfig+0x268>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <HAL_RCC_ClockConfig+0x26c>)
 80037a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037a4:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <HAL_RCC_ClockConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe fce9 	bl	8002180 <HAL_InitTick>
 80037ae:	4603      	mov	r3, r0
 80037b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	04c4b400 	.word	0x04c4b400
 80037c8:	0800f4dc 	.word	0x0800f4dc
 80037cc:	20000000 	.word	0x20000000
 80037d0:	20000004 	.word	0x20000004

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b3e      	ldr	r3, [pc, #248]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x34>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d121      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d11e      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003808:	4b34      	ldr	r3, [pc, #208]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003814:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003824:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003830:	4a2b      	ldr	r2, [pc, #172]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10d      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003844:	e00a      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d102      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800384c:	4b25      	ldr	r3, [pc, #148]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e004      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d101      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003858:	4b22      	ldr	r3, [pc, #136]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800385a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d134      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003862:	4b1e      	ldr	r3, [pc, #120]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0xa6>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d003      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0xac>
 8003878:	e005      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800387a:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800387c:	617b      	str	r3, [r7, #20]
      break;
 800387e:	e005      	b.n	800388c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003880:	4b18      	ldr	r3, [pc, #96]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003882:	617b      	str	r3, [r7, #20]
      break;
 8003884:	e002      	b.n	800388c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	617b      	str	r3, [r7, #20]
      break;
 800388a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800388c:	4b13      	ldr	r3, [pc, #76]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3301      	adds	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800389a:	4b10      	ldr	r3, [pc, #64]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	fb03 f202 	mul.w	r2, r3, r2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b2:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	0e5b      	lsrs	r3, r3, #25
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	3301      	adds	r3, #1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038cc:	69bb      	ldr	r3, [r7, #24]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	@ 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	0800f4f4 	.word	0x0800f4f4
 80038e4:	00f42400 	.word	0x00f42400

080038e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000000 	.word	0x20000000

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4904      	ldr	r1, [pc, #16]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	0800f4ec 	.word	0x0800f4ec

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003930:	f7ff ffda 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0adb      	lsrs	r3, r3, #11
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4904      	ldr	r1, [pc, #16]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	f003 031f 	and.w	r3, r3, #31
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	0800f4ec 	.word	0x0800f4ec

08003958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003964:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003970:	f7ff f908 	bl	8002b84 <HAL_PWREx_GetVoltageRange>
 8003974:	6178      	str	r0, [r7, #20]
 8003976:	e014      	b.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003978:	4b22      	ldr	r3, [pc, #136]	@ (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	4a21      	ldr	r2, [pc, #132]	@ (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003982:	6593      	str	r3, [r2, #88]	@ 0x58
 8003984:	4b1f      	ldr	r3, [pc, #124]	@ (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003990:	f7ff f8f8 	bl	8002b84 <HAL_PWREx_GetVoltageRange>
 8003994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800399c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a8:	d10b      	bne.n	80039c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b80      	cmp	r3, #128	@ 0x80
 80039ae:	d913      	bls.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80039b4:	d902      	bls.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b6:	2302      	movs	r3, #2
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	e00d      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039bc:	2301      	movs	r3, #1
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e00a      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80039c6:	d902      	bls.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80039c8:	2302      	movs	r3, #2
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	e004      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b70      	cmp	r3, #112	@ 0x70
 80039d2:	d101      	bne.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d4:	2301      	movs	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 020f 	bic.w	r2, r3, #15
 80039e0:	4909      	ldr	r1, [pc, #36]	@ (8003a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039e8:	4b07      	ldr	r3, [pc, #28]	@ (8003a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d001      	beq.n	80039fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40022000 	.word	0x40022000

08003a0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a12:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d00b      	beq.n	8003a3a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d825      	bhi.n	8003a74 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d008      	beq.n	8003a40 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d11f      	bne.n	8003a74 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003a34:	4b25      	ldr	r3, [pc, #148]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a36:	613b      	str	r3, [r7, #16]
    break;
 8003a38:	e01f      	b.n	8003a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003a3c:	613b      	str	r3, [r7, #16]
    break;
 8003a3e:	e01c      	b.n	8003a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a40:	4b21      	ldr	r3, [pc, #132]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d107      	bne.n	8003a5c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e005      	b.n	8003a68 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	091b      	lsrs	r3, r3, #4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	613b      	str	r3, [r7, #16]
    break;
 8003a72:	e002      	b.n	8003a7a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
    break;
 8003a78:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	3301      	adds	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	fb03 f202 	mul.w	r2, r3, r2
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0e5b      	lsrs	r3, r3, #25
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003aba:	683b      	ldr	r3, [r7, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	0800f4f4 	.word	0x0800f4f4

08003ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003adc:	2300      	movs	r3, #0
 8003ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d040      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003af4:	2b80      	cmp	r3, #128	@ 0x80
 8003af6:	d02a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003af8:	2b80      	cmp	r3, #128	@ 0x80
 8003afa:	d825      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003afc:	2b60      	cmp	r3, #96	@ 0x60
 8003afe:	d026      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b00:	2b60      	cmp	r3, #96	@ 0x60
 8003b02:	d821      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b04:	2b40      	cmp	r3, #64	@ 0x40
 8003b06:	d006      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d81d      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d010      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003b14:	e018      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b16:	4b89      	ldr	r3, [pc, #548]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	4a88      	ldr	r2, [pc, #544]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b22:	e015      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 fa82 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b34:	e00c      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3320      	adds	r3, #32
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fb6d 	bl	800521c <RCCEx_PLLSAI2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	74fb      	strb	r3, [r7, #19]
      break;
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b56:	4b79      	ldr	r3, [pc, #484]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b5c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b64:	4975      	ldr	r1, [pc, #468]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003b6c:	e001      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d047      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b86:	d030      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8c:	d82a      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b92:	d02a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b98:	d824      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba4:	d81e      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bae:	d010      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bb0:	e018      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bb2:	4b62      	ldr	r3, [pc, #392]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	4a61      	ldr	r2, [pc, #388]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bbe:	e015      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fa34 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bd0:	e00c      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3320      	adds	r3, #32
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 fb1f 	bl	800521c <RCCEx_PLLSAI2_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	74fb      	strb	r3, [r7, #19]
      break;
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bf2:	4b52      	ldr	r3, [pc, #328]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c00:	494e      	ldr	r1, [pc, #312]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003c08:	e001      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 809f 	beq.w	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c20:	4b46      	ldr	r3, [pc, #280]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	4b41      	ldr	r3, [pc, #260]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3a:	4a40      	ldr	r2, [pc, #256]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c42:	4b3e      	ldr	r3, [pc, #248]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c52:	4b3b      	ldr	r3, [pc, #236]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3a      	ldr	r2, [pc, #232]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fadf 	bl	8002220 <HAL_GetTick>
 8003c62:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c64:	e009      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c66:	f7fe fadb 	bl	8002220 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d902      	bls.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	74fb      	strb	r3, [r7, #19]
        break;
 8003c78:	e005      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c7a:	4b31      	ldr	r3, [pc, #196]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ef      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d15b      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c96:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01f      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d019      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003caa:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cb6:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cd6:	4a19      	ldr	r2, [pc, #100]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fa9a 	bl	8002220 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cee:	e00b      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fe fa96 	bl	8002220 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d902      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	74fb      	strb	r3, [r7, #19]
            break;
 8003d06:	e006      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d08:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ec      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d16:	7cfb      	ldrb	r3, [r7, #19]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d1c:	4b07      	ldr	r3, [pc, #28]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d2c:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d34:	e008      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	74bb      	strb	r3, [r7, #18]
 8003d3a:	e005      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d48:	7c7b      	ldrb	r3, [r7, #17]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4ba0      	ldr	r3, [pc, #640]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	4a9f      	ldr	r2, [pc, #636]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d66:	4b9a      	ldr	r3, [pc, #616]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6c:	f023 0203 	bic.w	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	4996      	ldr	r1, [pc, #600]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d88:	4b91      	ldr	r3, [pc, #580]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d8e:	f023 020c 	bic.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	498e      	ldr	r1, [pc, #568]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003daa:	4b89      	ldr	r3, [pc, #548]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db8:	4985      	ldr	r1, [pc, #532]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dcc:	4b80      	ldr	r3, [pc, #512]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dda:	497d      	ldr	r1, [pc, #500]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dee:	4b78      	ldr	r3, [pc, #480]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfc:	4974      	ldr	r1, [pc, #464]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e10:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e1e:	496c      	ldr	r1, [pc, #432]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e32:	4b67      	ldr	r3, [pc, #412]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e40:	4963      	ldr	r1, [pc, #396]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e54:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e62:	495b      	ldr	r1, [pc, #364]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e76:	4b56      	ldr	r3, [pc, #344]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	4952      	ldr	r1, [pc, #328]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e98:	4b4d      	ldr	r3, [pc, #308]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea6:	494a      	ldr	r1, [pc, #296]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eba:	4b45      	ldr	r3, [pc, #276]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec8:	4941      	ldr	r1, [pc, #260]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003edc:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eea:	4939      	ldr	r1, [pc, #228]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d028      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003efe:	4b34      	ldr	r3, [pc, #208]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f0c:	4930      	ldr	r1, [pc, #192]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f1c:	d106      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f28:	60d3      	str	r3, [r2, #12]
 8003f2a:	e011      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f879 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f46:	7cfb      	ldrb	r3, [r7, #19]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d04d      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f64:	d108      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003f66:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f6c:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f72:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003f76:	e012      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003f78:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f7e:	4a14      	ldr	r2, [pc, #80]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f96:	490e      	ldr	r1, [pc, #56]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a08      	ldr	r2, [pc, #32]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fb2:	60d3      	str	r3, [r2, #12]
 8003fb4:	e020      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fbe:	d109      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fc0:	4b03      	ldr	r3, [pc, #12]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a02      	ldr	r2, [pc, #8]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fca:	60d3      	str	r3, [r2, #12]
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 f825 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d028      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004004:	4b7a      	ldr	r3, [pc, #488]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004012:	4977      	ldr	r1, [pc, #476]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800401e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004022:	d106      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004024:	4b72      	ldr	r3, [pc, #456]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a71      	ldr	r2, [pc, #452]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800402a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402e:	60d3      	str	r3, [r2, #12]
 8004030:	e011      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004036:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800403a:	d10c      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fff6 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004062:	4b63      	ldr	r3, [pc, #396]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004068:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004072:	495f      	ldr	r1, [pc, #380]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004080:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004084:	d10c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3304      	adds	r3, #4
 800408a:	2102      	movs	r1, #2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 ffd1 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ac:	4b50      	ldr	r3, [pc, #320]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040b2:	f023 0204 	bic.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040bc:	494c      	ldr	r1, [pc, #304]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040d0:	4b47      	ldr	r3, [pc, #284]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040d6:	f023 0218 	bic.w	r2, r3, #24
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e0:	4943      	ldr	r1, [pc, #268]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d035      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040f4:	4b3e      	ldr	r3, [pc, #248]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a3d      	ldr	r2, [pc, #244]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80040fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004100:	f7fe f88e 	bl	8002220 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004106:	e009      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004108:	f7fe f88a 	bl	8002220 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d902      	bls.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	74fb      	strb	r3, [r7, #19]
        break;
 800411a:	e005      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800411c:	4b34      	ldr	r3, [pc, #208]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ef      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d113      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800412e:	4b30      	ldr	r3, [pc, #192]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004134:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800413e:	492c      	ldr	r1, [pc, #176]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3320      	adds	r3, #32
 800414a:	2102      	movs	r1, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f001 f865 	bl	800521c <RCCEx_PLLSAI2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8004156:	7cfb      	ldrb	r3, [r7, #19]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800416c:	4b20      	ldr	r3, [pc, #128]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800416e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004172:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	491c      	ldr	r1, [pc, #112]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418e:	d10c      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3320      	adds	r3, #32
 8004194:	2101      	movs	r1, #1
 8004196:	4618      	mov	r0, r3
 8004198:	f001 f840 	bl	800521c <RCCEx_PLLSAI2_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041b6:	4b0e      	ldr	r3, [pc, #56]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c6:	490a      	ldr	r1, [pc, #40]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041d8:	d105      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041da:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4a04      	ldr	r2, [pc, #16]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80041e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000

080041f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004206:	d13e      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004208:	4bb6      	ldr	r3, [pc, #728]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004212:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800421a:	d028      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004222:	f200 86f2 	bhi.w	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422c:	d005      	beq.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004234:	d00e      	beq.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004236:	f000 bee8 	b.w	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800423a:	4baa      	ldr	r3, [pc, #680]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b02      	cmp	r3, #2
 8004246:	f040 86e2 	bne.w	800500e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800424a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800424e:	61fb      	str	r3, [r7, #28]
      break;
 8004250:	f000 bedd 	b.w	800500e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004254:	4ba3      	ldr	r3, [pc, #652]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b02      	cmp	r3, #2
 8004260:	f040 86d7 	bne.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 8004264:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004268:	61fb      	str	r3, [r7, #28]
      break;
 800426a:	f000 bed2 	b.w	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800426e:	4b9d      	ldr	r3, [pc, #628]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800427a:	f040 86cc 	bne.w	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800427e:	4b9a      	ldr	r3, [pc, #616]	@ (80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8004280:	61fb      	str	r3, [r7, #28]
      break;
 8004282:	f000 bec8 	b.w	8005016 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004286:	4b97      	ldr	r3, [pc, #604]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d036      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d840      	bhi.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d003      	beq.n	80042aa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d020      	beq.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80042a8:	e039      	b.n	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80042aa:	4b8e      	ldr	r3, [pc, #568]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d116      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80042b6:	4b8b      	ldr	r3, [pc, #556]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80042c2:	4b88      	ldr	r3, [pc, #544]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	e005      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80042ce:	4b85      	ldr	r3, [pc, #532]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	4a84      	ldr	r2, [pc, #528]	@ (80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80042dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042e2:	e01f      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61bb      	str	r3, [r7, #24]
      break;
 80042e8:	e01c      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042ea:	4b7e      	ldr	r3, [pc, #504]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f6:	d102      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80042f8:	4b7d      	ldr	r3, [pc, #500]	@ (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80042fa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80042fc:	e012      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
      break;
 8004302:	e00f      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004304:	4b77      	ldr	r3, [pc, #476]	@ (80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004310:	d102      	bne.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004312:	4b77      	ldr	r3, [pc, #476]	@ (80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8004314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004316:	e005      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
      break;
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
      break;
 8004322:	bf00      	nop
    }

    switch(PeriphClk)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800432a:	f000 8604 	beq.w	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004334:	f200 8671 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800433e:	f000 8467 	beq.w	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004348:	f200 8667 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004352:	f000 852f 	beq.w	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800435c:	f200 865d 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004366:	f000 8185 	beq.w	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004370:	f200 8653 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800437a:	f000 80cb 	beq.w	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004384:	f200 8649 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438e:	f000 842e 	beq.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004398:	f200 863f 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043a2:	f000 83e2 	beq.w	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043ac:	f200 8635 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b6:	f000 80ad 	beq.w	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043c0:	f200 862b 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ca:	f000 809b 	beq.w	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043d4:	f200 8621 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043de:	f000 8089 	beq.w	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e8:	f200 8617 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f2:	f000 8552 	beq.w	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fc:	f200 860d 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004406:	f000 84fe 	beq.w	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004410:	f200 8603 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800441a:	f000 849f 	beq.w	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004424:	f200 85f9 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b80      	cmp	r3, #128	@ 0x80
 800442c:	f000 846a 	beq.w	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	f200 85f1 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b20      	cmp	r3, #32
 800443c:	d84c      	bhi.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 85ea 	beq.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3b01      	subs	r3, #1
 800444a:	2b1f      	cmp	r3, #31
 800444c:	f200 85e5 	bhi.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8004450:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	08004869 	.word	0x08004869
 800445c:	080048d7 	.word	0x080048d7
 8004460:	0800501b 	.word	0x0800501b
 8004464:	0800496b 	.word	0x0800496b
 8004468:	0800501b 	.word	0x0800501b
 800446c:	0800501b 	.word	0x0800501b
 8004470:	0800501b 	.word	0x0800501b
 8004474:	080049e3 	.word	0x080049e3
 8004478:	0800501b 	.word	0x0800501b
 800447c:	0800501b 	.word	0x0800501b
 8004480:	0800501b 	.word	0x0800501b
 8004484:	0800501b 	.word	0x0800501b
 8004488:	0800501b 	.word	0x0800501b
 800448c:	0800501b 	.word	0x0800501b
 8004490:	0800501b 	.word	0x0800501b
 8004494:	08004a67 	.word	0x08004a67
 8004498:	0800501b 	.word	0x0800501b
 800449c:	0800501b 	.word	0x0800501b
 80044a0:	0800501b 	.word	0x0800501b
 80044a4:	0800501b 	.word	0x0800501b
 80044a8:	0800501b 	.word	0x0800501b
 80044ac:	0800501b 	.word	0x0800501b
 80044b0:	0800501b 	.word	0x0800501b
 80044b4:	0800501b 	.word	0x0800501b
 80044b8:	0800501b 	.word	0x0800501b
 80044bc:	0800501b 	.word	0x0800501b
 80044c0:	0800501b 	.word	0x0800501b
 80044c4:	0800501b 	.word	0x0800501b
 80044c8:	0800501b 	.word	0x0800501b
 80044cc:	0800501b 	.word	0x0800501b
 80044d0:	0800501b 	.word	0x0800501b
 80044d4:	08004ae9 	.word	0x08004ae9
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b40      	cmp	r3, #64	@ 0x40
 80044dc:	f000 83e6 	beq.w	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80044e0:	f000 bd9b 	b.w	800501a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80044e4:	40021000 	.word	0x40021000
 80044e8:	0007a120 	.word	0x0007a120
 80044ec:	0800f4f4 	.word	0x0800f4f4
 80044f0:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80044fa:	f000 ff83 	bl	8005404 <RCCEx_GetSAIxPeriphCLKFreq>
 80044fe:	61f8      	str	r0, [r7, #28]
      break;
 8004500:	f000 bd8e 	b.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004504:	69b9      	ldr	r1, [r7, #24]
 8004506:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800450a:	f000 ff7b 	bl	8005404 <RCCEx_GetSAIxPeriphCLKFreq>
 800450e:	61f8      	str	r0, [r7, #28]
      break;
 8004510:	f000 bd86 	b.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004514:	4b9a      	ldr	r3, [pc, #616]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004526:	d015      	beq.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800452e:	f200 8092 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004538:	d029      	beq.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004540:	f200 8089 	bhi.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d07b      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004550:	d04a      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8004552:	e080      	b.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004554:	4b8a      	ldr	r3, [pc, #552]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b02      	cmp	r3, #2
 800455e:	d17d      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004560:	4b87      	ldr	r3, [pc, #540]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 800456c:	4b84      	ldr	r3, [pc, #528]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	e005      	b.n	8004584 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8004578:	4b81      	ldr	r3, [pc, #516]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800457a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	4a7f      	ldr	r2, [pc, #508]	@ (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800458a:	61fb      	str	r3, [r7, #28]
          break;
 800458c:	e066      	b.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800458e:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800459a:	d162      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800459c:	4b78      	ldr	r3, [pc, #480]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045a8:	d15b      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80045aa:	4b75      	ldr	r3, [pc, #468]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	0a1b      	lsrs	r3, r3, #8
 80045b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	fb03 f202 	mul.w	r2, r3, r2
 80045be:	4b70      	ldr	r3, [pc, #448]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	3301      	adds	r3, #1
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80045d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0d5b      	lsrs	r3, r3, #21
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	61fb      	str	r3, [r7, #28]
          break;
 80045e6:	e03c      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80045e8:	4b65      	ldr	r3, [pc, #404]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045f4:	d138      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80045f6:	4b62      	ldr	r3, [pc, #392]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004602:	d131      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004604:	4b5e      	ldr	r3, [pc, #376]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	0a1b      	lsrs	r3, r3, #8
 800460a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800460e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	fb03 f202 	mul.w	r2, r3, r2
 8004618:	4b59      	ldr	r3, [pc, #356]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	3301      	adds	r3, #1
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800462a:	4b55      	ldr	r3, [pc, #340]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	0d5b      	lsrs	r3, r3, #21
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	3301      	adds	r3, #1
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	61fb      	str	r3, [r7, #28]
          break;
 8004640:	e012      	b.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004642:	4b4f      	ldr	r3, [pc, #316]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004644:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d10e      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8004650:	4b4d      	ldr	r3, [pc, #308]	@ (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004652:	61fb      	str	r3, [r7, #28]
          break;
 8004654:	e00b      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8004656:	bf00      	nop
 8004658:	f000 bce2 	b.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800465c:	bf00      	nop
 800465e:	f000 bcdf 	b.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004662:	bf00      	nop
 8004664:	f000 bcdc 	b.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004668:	bf00      	nop
 800466a:	f000 bcd9 	b.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800466e:	bf00      	nop
        break;
 8004670:	f000 bcd6 	b.w	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8004674:	4b42      	ldr	r3, [pc, #264]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800467a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800467e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004682:	d13d      	bne.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004684:	4b3e      	ldr	r3, [pc, #248]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004690:	f040 84c5 	bne.w	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004694:	4b3a      	ldr	r3, [pc, #232]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a0:	f040 84bd 	bne.w	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80046a4:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ae:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	fb03 f202 	mul.w	r2, r3, r2
 80046b8:	4b31      	ldr	r3, [pc, #196]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	3301      	adds	r3, #1
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80046ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	0edb      	lsrs	r3, r3, #27
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80046dc:	4b28      	ldr	r3, [pc, #160]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 80046e8:	2311      	movs	r3, #17
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e001      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 80046ee:	2307      	movs	r3, #7
 80046f0:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	61fb      	str	r3, [r7, #28]
      break;
 80046fc:	f000 bc8f 	b.w	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004700:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004712:	d016      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800471a:	f200 809b 	bhi.w	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004724:	d032      	beq.n	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800472c:	f200 8092 	bhi.w	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8084 	beq.w	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800473e:	d052      	beq.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8004740:	e088      	b.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004742:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	f040 8084 	bne.w	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800475c:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	e005      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	4a03      	ldr	r2, [pc, #12]	@ (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	61fb      	str	r3, [r7, #28]
          break;
 800477c:	e06c      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	0800f4f4 	.word	0x0800f4f4
 8004788:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800478c:	4ba5      	ldr	r3, [pc, #660]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004798:	d160      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800479a:	4ba2      	ldr	r3, [pc, #648]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047a6:	d159      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	fb03 f202 	mul.w	r2, r3, r2
 80047bc:	4b99      	ldr	r3, [pc, #612]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	3301      	adds	r3, #1
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80047ce:	4b95      	ldr	r3, [pc, #596]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	0d5b      	lsrs	r3, r3, #21
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	3301      	adds	r3, #1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	61fb      	str	r3, [r7, #28]
          break;
 80047e4:	e03a      	b.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80047e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047f2:	d135      	bne.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80047f4:	4b8b      	ldr	r3, [pc, #556]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004800:	d12e      	bne.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004802:	4b88      	ldr	r3, [pc, #544]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800480c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	fb03 f202 	mul.w	r2, r3, r2
 8004816:	4b83      	ldr	r3, [pc, #524]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	3301      	adds	r3, #1
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004828:	4b7e      	ldr	r3, [pc, #504]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	0d5b      	lsrs	r3, r3, #21
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	3301      	adds	r3, #1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	61fb      	str	r3, [r7, #28]
          break;
 800483e:	e00f      	b.n	8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8004840:	4b78      	ldr	r3, [pc, #480]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d10a      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800484e:	4b76      	ldr	r3, [pc, #472]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004850:	61fb      	str	r3, [r7, #28]
          break;
 8004852:	e007      	b.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8004854:	bf00      	nop
 8004856:	e3e2      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004858:	bf00      	nop
 800485a:	e3e0      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800485c:	bf00      	nop
 800485e:	e3de      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004860:	bf00      	nop
 8004862:	e3dc      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8004864:	bf00      	nop
      break;
 8004866:	e3da      	b.n	800501e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004868:	4b6e      	ldr	r3, [pc, #440]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d827      	bhi.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800487a:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	08004891 	.word	0x08004891
 8004884:	08004899 	.word	0x08004899
 8004888:	080048a1 	.word	0x080048a1
 800488c:	080048b5 	.word	0x080048b5
          frequency = HAL_RCC_GetPCLK2Freq();
 8004890:	f7ff f84c 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8004894:	61f8      	str	r0, [r7, #28]
          break;
 8004896:	e01d      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004898:	f7fe ff9c 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800489c:	61f8      	str	r0, [r7, #28]
          break;
 800489e:	e019      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048a0:	4b60      	ldr	r3, [pc, #384]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ac:	d10f      	bne.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 80048ae:	4b5f      	ldr	r3, [pc, #380]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80048b0:	61fb      	str	r3, [r7, #28]
          break;
 80048b2:	e00c      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c6:	61fb      	str	r3, [r7, #28]
          break;
 80048c8:	e003      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 80048ca:	bf00      	nop
 80048cc:	e3a8      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048ce:	bf00      	nop
 80048d0:	e3a6      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80048d2:	bf00      	nop
        break;
 80048d4:	e3a4      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80048d6:	4b53      	ldr	r3, [pc, #332]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	d83a      	bhi.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80048e8:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004925 	.word	0x08004925
 80048f4:	0800495f 	.word	0x0800495f
 80048f8:	0800495f 	.word	0x0800495f
 80048fc:	0800495f 	.word	0x0800495f
 8004900:	0800492d 	.word	0x0800492d
 8004904:	0800495f 	.word	0x0800495f
 8004908:	0800495f 	.word	0x0800495f
 800490c:	0800495f 	.word	0x0800495f
 8004910:	08004935 	.word	0x08004935
 8004914:	0800495f 	.word	0x0800495f
 8004918:	0800495f 	.word	0x0800495f
 800491c:	0800495f 	.word	0x0800495f
 8004920:	08004949 	.word	0x08004949
          frequency = HAL_RCC_GetPCLK1Freq();
 8004924:	f7fe ffec 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004928:	61f8      	str	r0, [r7, #28]
          break;
 800492a:	e01d      	b.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800492c:	f7fe ff52 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004930:	61f8      	str	r0, [r7, #28]
          break;
 8004932:	e019      	b.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004934:	4b3b      	ldr	r3, [pc, #236]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004940:	d10f      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8004942:	4b3a      	ldr	r3, [pc, #232]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004944:	61fb      	str	r3, [r7, #28]
          break;
 8004946:	e00c      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004948:	4b36      	ldr	r3, [pc, #216]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d107      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8004956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800495a:	61fb      	str	r3, [r7, #28]
          break;
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800495e:	bf00      	nop
 8004960:	e35e      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004962:	bf00      	nop
 8004964:	e35c      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004966:	bf00      	nop
        break;
 8004968:	e35a      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800496a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004970:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b30      	cmp	r3, #48	@ 0x30
 800497a:	d021      	beq.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b30      	cmp	r3, #48	@ 0x30
 8004980:	d829      	bhi.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b20      	cmp	r3, #32
 8004986:	d011      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b20      	cmp	r3, #32
 800498c:	d823      	bhi.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b10      	cmp	r3, #16
 8004998:	d004      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800499a:	e01c      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fe ffb0 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 80049a0:	61f8      	str	r0, [r7, #28]
          break;
 80049a2:	e01d      	b.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 80049a4:	f7fe ff16 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 80049a8:	61f8      	str	r0, [r7, #28]
          break;
 80049aa:	e019      	b.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b8:	d10f      	bne.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 80049ba:	4b1c      	ldr	r3, [pc, #112]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80049bc:	61fb      	str	r3, [r7, #28]
          break;
 80049be:	e00c      	b.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049c0:	4b18      	ldr	r3, [pc, #96]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d107      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80049ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d2:	61fb      	str	r3, [r7, #28]
          break;
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80049d6:	bf00      	nop
 80049d8:	e322      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049da:	bf00      	nop
 80049dc:	e320      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80049de:	bf00      	nop
        break;
 80049e0:	e31e      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80049e2:	4b10      	ldr	r3, [pc, #64]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80049f2:	d027      	beq.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049f8:	d82f      	bhi.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b80      	cmp	r3, #128	@ 0x80
 80049fe:	d017      	beq.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b80      	cmp	r3, #128	@ 0x80
 8004a04:	d829      	bhi.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b40      	cmp	r3, #64	@ 0x40
 8004a10:	d004      	beq.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8004a12:	e022      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7fe ff74 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004a18:	61f8      	str	r0, [r7, #28]
          break;
 8004a1a:	e023      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a1c:	f7fe feda 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004a20:	61f8      	str	r0, [r7, #28]
          break;
 8004a22:	e01f      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004a24:	40021000 	.word	0x40021000
 8004a28:	02dc6c00 	.word	0x02dc6c00
 8004a2c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a30:	4b9b      	ldr	r3, [pc, #620]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a3c:	d10f      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8004a3e:	4b99      	ldr	r3, [pc, #612]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004a40:	61fb      	str	r3, [r7, #28]
          break;
 8004a42:	e00c      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a44:	4b96      	ldr	r3, [pc, #600]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d107      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a56:	61fb      	str	r3, [r7, #28]
          break;
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8004a5a:	bf00      	nop
 8004a5c:	e2e0      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a5e:	bf00      	nop
 8004a60:	e2de      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004a62:	bf00      	nop
        break;
 8004a64:	e2dc      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004a66:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a78:	d025      	beq.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a80:	d82c      	bhi.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a88:	d013      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a90:	d824      	bhi.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9e:	d004      	beq.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004aa0:	e01c      	b.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fe ff2d 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	61f8      	str	r0, [r7, #28]
          break;
 8004aa8:	e01d      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004aaa:	f7fe fe93 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004aae:	61f8      	str	r0, [r7, #28]
          break;
 8004ab0:	e019      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004abe:	d10f      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004ac0:	4b78      	ldr	r3, [pc, #480]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004ac2:	61fb      	str	r3, [r7, #28]
          break;
 8004ac4:	e00c      	b.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ac6:	4b76      	ldr	r3, [pc, #472]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8004ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad8:	61fb      	str	r3, [r7, #28]
          break;
 8004ada:	e003      	b.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8004adc:	bf00      	nop
 8004ade:	e29f      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004ae0:	bf00      	nop
 8004ae2:	e29d      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004ae4:	bf00      	nop
        break;
 8004ae6:	e29b      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004ae8:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004afa:	d025      	beq.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b02:	d82c      	bhi.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0a:	d013      	beq.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b12:	d824      	bhi.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b20:	d004      	beq.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8004b22:	e01c      	b.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe feec 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004b28:	61f8      	str	r0, [r7, #28]
          break;
 8004b2a:	e01d      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b2c:	f7fe fe52 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004b30:	61f8      	str	r0, [r7, #28]
          break;
 8004b32:	e019      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b34:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b40:	d10f      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8004b42:	4b58      	ldr	r3, [pc, #352]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004b44:	61fb      	str	r3, [r7, #28]
          break;
 8004b46:	e00c      	b.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b48:	4b55      	ldr	r3, [pc, #340]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d107      	bne.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5a:	61fb      	str	r3, [r7, #28]
          break;
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8004b5e:	bf00      	nop
 8004b60:	e25e      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004b62:	bf00      	nop
 8004b64:	e25c      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004b66:	bf00      	nop
        break;
 8004b68:	e25a      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b7c:	d007      	beq.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b84:	d12f      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b86:	f7fe fe25 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004b8a:	61f8      	str	r0, [r7, #28]
          break;
 8004b8c:	e02e      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004b8e:	4b44      	ldr	r3, [pc, #272]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b9a:	d126      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004b9c:	4b40      	ldr	r3, [pc, #256]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	0a1b      	lsrs	r3, r3, #8
 8004bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	fb03 f202 	mul.w	r2, r3, r2
 8004bbc:	4b38      	ldr	r3, [pc, #224]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004bce:	4b34      	ldr	r3, [pc, #208]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	0e5b      	lsrs	r3, r3, #25
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	61fb      	str	r3, [r7, #28]
          break;
 8004be4:	e001      	b.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8004be6:	bf00      	nop
 8004be8:	e21a      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004bea:	bf00      	nop
        break;
 8004bec:	e218      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004bee:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d103      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7fe fe94 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8004c04:	61f8      	str	r0, [r7, #28]
        break;
 8004c06:	e20b      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c08:	f7fe fde4 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004c0c:	61f8      	str	r0, [r7, #28]
        break;
 8004c0e:	e207      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004c10:	4b23      	ldr	r3, [pc, #140]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c16:	f003 0318 	and.w	r3, r3, #24
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d010      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d834      	bhi.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d024      	beq.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8004c34:	e02d      	b.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004c3c:	f000 fbe2 	bl	8005404 <RCCEx_GetSAIxPeriphCLKFreq>
 8004c40:	61f8      	str	r0, [r7, #28]
          break;
 8004c42:	e02b      	b.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c44:	4b16      	ldr	r3, [pc, #88]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d122      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004c50:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004c5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	e005      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004c68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	4a0c      	ldr	r2, [pc, #48]	@ (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8004c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7a:	61fb      	str	r3, [r7, #28]
          break;
 8004c7c:	e00b      	b.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004c8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004c8e:	61fb      	str	r3, [r7, #28]
          break;
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8004c92:	bf00      	nop
 8004c94:	e1c4      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004c96:	bf00      	nop
 8004c98:	e1c2      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004c9a:	bf00      	nop
        break;
 8004c9c:	e1c0      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	0800f4f4 	.word	0x0800f4f4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004cac:	4b96      	ldr	r3, [pc, #600]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc6:	d819      	bhi.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd4:	d004      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8004cd6:	e011      	b.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cd8:	f7fe fe12 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004cdc:	61f8      	str	r0, [r7, #28]
          break;
 8004cde:	e010      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ce0:	f7fe fd78 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004ce4:	61f8      	str	r0, [r7, #28]
          break;
 8004ce6:	e00c      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ce8:	4b87      	ldr	r3, [pc, #540]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf4:	d104      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8004cf6:	4b85      	ldr	r3, [pc, #532]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004cf8:	61fb      	str	r3, [r7, #28]
          break;
 8004cfa:	e001      	b.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8004cfc:	bf00      	nop
 8004cfe:	e18f      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004d00:	bf00      	nop
        break;
 8004d02:	e18d      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004d04:	4b80      	ldr	r3, [pc, #512]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d16:	d013      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d1e:	d819      	bhi.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d2c:	d004      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8004d2e:	e011      	b.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe fde6 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004d34:	61f8      	str	r0, [r7, #28]
          break;
 8004d36:	e010      	b.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d38:	f7fe fd4c 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004d3c:	61f8      	str	r0, [r7, #28]
          break;
 8004d3e:	e00c      	b.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d40:	4b71      	ldr	r3, [pc, #452]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d4c:	d104      	bne.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8004d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004d50:	61fb      	str	r3, [r7, #28]
          break;
 8004d52:	e001      	b.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8004d54:	bf00      	nop
 8004d56:	e163      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004d58:	bf00      	nop
        break;
 8004d5a:	e161      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d6e:	d013      	beq.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d76:	d819      	bhi.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d84:	d004      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8004d86:	e011      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe fdba 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
          break;
 8004d8e:	e010      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004d90:	f7fe fd20 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004d94:	61f8      	str	r0, [r7, #28]
          break;
 8004d96:	e00c      	b.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d98:	4b5b      	ldr	r3, [pc, #364]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da4:	d104      	bne.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8004da6:	4b59      	ldr	r3, [pc, #356]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004da8:	61fb      	str	r3, [r7, #28]
          break;
 8004daa:	e001      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004dac:	bf00      	nop
 8004dae:	e137      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004db0:	bf00      	nop
        break;
 8004db2:	e135      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004db4:	4b54      	ldr	r3, [pc, #336]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004db6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d011      	beq.n	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d818      	bhi.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d004      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8004dd8:	e011      	b.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dda:	f7fe fd91 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004dde:	61f8      	str	r0, [r7, #28]
          break;
 8004de0:	e010      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8004de2:	f7fe fcf7 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004de6:	61f8      	str	r0, [r7, #28]
          break;
 8004de8:	e00c      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dea:	4b47      	ldr	r3, [pc, #284]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d104      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8004df8:	4b44      	ldr	r3, [pc, #272]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004dfa:	61fb      	str	r3, [r7, #28]
          break;
 8004dfc:	e001      	b.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8004dfe:	bf00      	nop
 8004e00:	e10e      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e02:	bf00      	nop
        break;
 8004e04:	e10c      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004e06:	4b40      	ldr	r3, [pc, #256]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e18:	d02c      	beq.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e20:	d833      	bhi.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e28:	d01a      	beq.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e30:	d82b      	bhi.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d004      	beq.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e3e:	d004      	beq.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004e40:	e023      	b.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e42:	f7fe fd5d 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004e46:	61f8      	str	r0, [r7, #28]
          break;
 8004e48:	e026      	b.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d11a      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004e58:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e5c:	61fb      	str	r3, [r7, #28]
          break;
 8004e5e:	e016      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e60:	4b29      	ldr	r3, [pc, #164]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6c:	d111      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004e70:	61fb      	str	r3, [r7, #28]
          break;
 8004e72:	e00e      	b.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e74:	4b24      	ldr	r3, [pc, #144]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d109      	bne.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8004e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e86:	61fb      	str	r3, [r7, #28]
          break;
 8004e88:	e005      	b.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8004e8a:	bf00      	nop
 8004e8c:	e0c8      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e8e:	bf00      	nop
 8004e90:	e0c6      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e92:	bf00      	nop
 8004e94:	e0c4      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004e96:	bf00      	nop
        break;
 8004e98:	e0c2      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004eac:	d030      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004eb4:	d837      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ebc:	d01a      	beq.n	8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ec4:	d82f      	bhi.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ed2:	d004      	beq.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 8004ed4:	e027      	b.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ed6:	f7fe fd13 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8004eda:	61f8      	str	r0, [r7, #28]
          break;
 8004edc:	e02a      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004ede:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d11e      	bne.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8004eec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ef0:	61fb      	str	r3, [r7, #28]
          break;
 8004ef2:	e01a      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ef4:	4b04      	ldr	r3, [pc, #16]	@ (8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f00:	d115      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 8004f02:	4b02      	ldr	r3, [pc, #8]	@ (8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004f04:	61fb      	str	r3, [r7, #28]
          break;
 8004f06:	e012      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f10:	4b46      	ldr	r3, [pc, #280]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d109      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	61fb      	str	r3, [r7, #28]
          break;
 8004f24:	e005      	b.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 8004f26:	bf00      	nop
 8004f28:	e07a      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004f2a:	bf00      	nop
 8004f2c:	e078      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004f2e:	bf00      	nop
 8004f30:	e076      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004f32:	bf00      	nop
        break;
 8004f34:	e074      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004f36:	4b3d      	ldr	r3, [pc, #244]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f3c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f48:	d02c      	beq.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f50:	d855      	bhi.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f5e:	d004      	beq.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004f60:	e04d      	b.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f62:	f7fe fc37 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004f66:	61f8      	str	r0, [r7, #28]
          break;
 8004f68:	e04e      	b.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004f6a:	4b30      	ldr	r3, [pc, #192]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d145      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8004f82:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	e005      	b.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004f8e:	4b27      	ldr	r3, [pc, #156]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	4a25      	ldr	r2, [pc, #148]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa0:	61fb      	str	r3, [r7, #28]
          break;
 8004fa2:	e02e      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004fa4:	4b21      	ldr	r3, [pc, #132]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fb0:	d129      	bne.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fbe:	d122      	bne.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fca:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	fb03 f202 	mul.w	r2, r3, r2
 8004fd4:	4b15      	ldr	r3, [pc, #84]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	3301      	adds	r3, #1
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004fe6:	4b11      	ldr	r3, [pc, #68]	@ (800502c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	0d5b      	lsrs	r3, r3, #21
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	61fb      	str	r3, [r7, #28]
          break;
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8004ffe:	bf00      	nop
 8005000:	e00e      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005002:	bf00      	nop
 8005004:	e00c      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8005006:	bf00      	nop
        break;
 8005008:	e00a      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800500a:	bf00      	nop
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800500e:	bf00      	nop
 8005010:	e006      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005012:	bf00      	nop
 8005014:	e004      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8005016:	bf00      	nop
 8005018:	e002      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800501e:	bf00      	nop
    }
  }

  return(frequency);
 8005020:	69fb      	ldr	r3, [r7, #28]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	0800f4f4 	.word	0x0800f4f4

08005034 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005042:	4b72      	ldr	r3, [pc, #456]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00e      	beq.n	800506c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800504e:	4b6f      	ldr	r3, [pc, #444]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0203 	and.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d103      	bne.n	8005066 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
       ||
 8005062:	2b00      	cmp	r3, #0
 8005064:	d142      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	e03f      	b.n	80050ec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d018      	beq.n	80050a6 <RCCEx_PLLSAI1_Config+0x72>
 8005074:	2b03      	cmp	r3, #3
 8005076:	d825      	bhi.n	80050c4 <RCCEx_PLLSAI1_Config+0x90>
 8005078:	2b01      	cmp	r3, #1
 800507a:	d002      	beq.n	8005082 <RCCEx_PLLSAI1_Config+0x4e>
 800507c:	2b02      	cmp	r3, #2
 800507e:	d009      	beq.n	8005094 <RCCEx_PLLSAI1_Config+0x60>
 8005080:	e020      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005082:	4b62      	ldr	r3, [pc, #392]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d11d      	bne.n	80050ca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005092:	e01a      	b.n	80050ca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005094:	4b5d      	ldr	r3, [pc, #372]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800509c:	2b00      	cmp	r3, #0
 800509e:	d116      	bne.n	80050ce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a4:	e013      	b.n	80050ce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050a6:	4b59      	ldr	r3, [pc, #356]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10f      	bne.n	80050d2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050b2:	4b56      	ldr	r3, [pc, #344]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050c2:	e006      	b.n	80050d2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      break;
 80050c8:	e004      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050ca:	bf00      	nop
 80050cc:	e002      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80050d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80050da:	4b4c      	ldr	r3, [pc, #304]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4949      	ldr	r1, [pc, #292]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 8086 	bne.w	8005200 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050f4:	4b45      	ldr	r3, [pc, #276]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a44      	ldr	r2, [pc, #272]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80050fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005100:	f7fd f88e 	bl	8002220 <HAL_GetTick>
 8005104:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005106:	e009      	b.n	800511c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005108:	f7fd f88a 	bl	8002220 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d902      	bls.n	800511c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	73fb      	strb	r3, [r7, #15]
        break;
 800511a:	e005      	b.n	8005128 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800511c:	4b3b      	ldr	r3, [pc, #236]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1ef      	bne.n	8005108 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d168      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d113      	bne.n	800515c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005134:	4b35      	ldr	r3, [pc, #212]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	4b35      	ldr	r3, [pc, #212]	@ (8005210 <RCCEx_PLLSAI1_Config+0x1dc>)
 800513a:	4013      	ands	r3, r2
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	06d2      	lsls	r2, r2, #27
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6852      	ldr	r2, [r2, #4]
 800514e:	3a01      	subs	r2, #1
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	430a      	orrs	r2, r1
 8005154:	492d      	ldr	r1, [pc, #180]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	610b      	str	r3, [r1, #16]
 800515a:	e02d      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d115      	bne.n	800518e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005162:	4b2a      	ldr	r3, [pc, #168]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	4b2b      	ldr	r3, [pc, #172]	@ (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6892      	ldr	r2, [r2, #8]
 800516e:	0211      	lsls	r1, r2, #8
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6912      	ldr	r2, [r2, #16]
 8005174:	0852      	lsrs	r2, r2, #1
 8005176:	3a01      	subs	r2, #1
 8005178:	0552      	lsls	r2, r2, #21
 800517a:	4311      	orrs	r1, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6852      	ldr	r2, [r2, #4]
 8005180:	3a01      	subs	r2, #1
 8005182:	0112      	lsls	r2, r2, #4
 8005184:	430a      	orrs	r2, r1
 8005186:	4921      	ldr	r1, [pc, #132]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
 800518c:	e014      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800518e:	4b1f      	ldr	r3, [pc, #124]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	4b21      	ldr	r3, [pc, #132]	@ (8005218 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6892      	ldr	r2, [r2, #8]
 800519a:	0211      	lsls	r1, r2, #8
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6952      	ldr	r2, [r2, #20]
 80051a0:	0852      	lsrs	r2, r2, #1
 80051a2:	3a01      	subs	r2, #1
 80051a4:	0652      	lsls	r2, r2, #25
 80051a6:	4311      	orrs	r1, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6852      	ldr	r2, [r2, #4]
 80051ac:	3a01      	subs	r2, #1
 80051ae:	0112      	lsls	r2, r2, #4
 80051b0:	430a      	orrs	r2, r1
 80051b2:	4916      	ldr	r1, [pc, #88]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c4:	f7fd f82c 	bl	8002220 <HAL_GetTick>
 80051c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ca:	e009      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051cc:	f7fd f828 	bl	8002220 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d902      	bls.n	80051e0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	73fb      	strb	r3, [r7, #15]
          break;
 80051de:	e005      	b.n	80051ec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e0:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ef      	beq.n	80051cc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	4904      	ldr	r1, [pc, #16]	@ (800520c <RCCEx_PLLSAI1_Config+0x1d8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40021000 	.word	0x40021000
 8005210:	07ff800f 	.word	0x07ff800f
 8005214:	ff9f800f 	.word	0xff9f800f
 8005218:	f9ff800f 	.word	0xf9ff800f

0800521c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800522a:	4b72      	ldr	r3, [pc, #456]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00e      	beq.n	8005254 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005236:	4b6f      	ldr	r3, [pc, #444]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0203 	and.w	r2, r3, #3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d103      	bne.n	800524e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
       ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d142      	bne.n	80052d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	e03f      	b.n	80052d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d018      	beq.n	800528e <RCCEx_PLLSAI2_Config+0x72>
 800525c:	2b03      	cmp	r3, #3
 800525e:	d825      	bhi.n	80052ac <RCCEx_PLLSAI2_Config+0x90>
 8005260:	2b01      	cmp	r3, #1
 8005262:	d002      	beq.n	800526a <RCCEx_PLLSAI2_Config+0x4e>
 8005264:	2b02      	cmp	r3, #2
 8005266:	d009      	beq.n	800527c <RCCEx_PLLSAI2_Config+0x60>
 8005268:	e020      	b.n	80052ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800526a:	4b62      	ldr	r3, [pc, #392]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11d      	bne.n	80052b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527a:	e01a      	b.n	80052b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800527c:	4b5d      	ldr	r3, [pc, #372]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005284:	2b00      	cmp	r3, #0
 8005286:	d116      	bne.n	80052b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800528c:	e013      	b.n	80052b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800528e:	4b59      	ldr	r3, [pc, #356]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800529a:	4b56      	ldr	r3, [pc, #344]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052aa:	e006      	b.n	80052ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      break;
 80052b0:	e004      	b.n	80052bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d108      	bne.n	80052d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80052c2:	4b4c      	ldr	r3, [pc, #304]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f023 0203 	bic.w	r2, r3, #3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4949      	ldr	r1, [pc, #292]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 8086 	bne.w	80053e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052dc:	4b45      	ldr	r3, [pc, #276]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a44      	ldr	r2, [pc, #272]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e8:	f7fc ff9a 	bl	8002220 <HAL_GetTick>
 80052ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052ee:	e009      	b.n	8005304 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052f0:	f7fc ff96 	bl	8002220 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d902      	bls.n	8005304 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	73fb      	strb	r3, [r7, #15]
        break;
 8005302:	e005      	b.n	8005310 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005304:	4b3b      	ldr	r3, [pc, #236]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ef      	bne.n	80052f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d168      	bne.n	80053e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d113      	bne.n	8005344 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800531c:	4b35      	ldr	r3, [pc, #212]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800531e:	695a      	ldr	r2, [r3, #20]
 8005320:	4b35      	ldr	r3, [pc, #212]	@ (80053f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005322:	4013      	ands	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6892      	ldr	r2, [r2, #8]
 8005328:	0211      	lsls	r1, r2, #8
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	68d2      	ldr	r2, [r2, #12]
 800532e:	06d2      	lsls	r2, r2, #27
 8005330:	4311      	orrs	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6852      	ldr	r2, [r2, #4]
 8005336:	3a01      	subs	r2, #1
 8005338:	0112      	lsls	r2, r2, #4
 800533a:	430a      	orrs	r2, r1
 800533c:	492d      	ldr	r1, [pc, #180]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800533e:	4313      	orrs	r3, r2
 8005340:	614b      	str	r3, [r1, #20]
 8005342:	e02d      	b.n	80053a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d115      	bne.n	8005376 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800534a:	4b2a      	ldr	r3, [pc, #168]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	4b2b      	ldr	r3, [pc, #172]	@ (80053fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6892      	ldr	r2, [r2, #8]
 8005356:	0211      	lsls	r1, r2, #8
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6912      	ldr	r2, [r2, #16]
 800535c:	0852      	lsrs	r2, r2, #1
 800535e:	3a01      	subs	r2, #1
 8005360:	0552      	lsls	r2, r2, #21
 8005362:	4311      	orrs	r1, r2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6852      	ldr	r2, [r2, #4]
 8005368:	3a01      	subs	r2, #1
 800536a:	0112      	lsls	r2, r2, #4
 800536c:	430a      	orrs	r2, r1
 800536e:	4921      	ldr	r1, [pc, #132]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	614b      	str	r3, [r1, #20]
 8005374:	e014      	b.n	80053a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005376:	4b1f      	ldr	r3, [pc, #124]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005378:	695a      	ldr	r2, [r3, #20]
 800537a:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <RCCEx_PLLSAI2_Config+0x1e4>)
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6892      	ldr	r2, [r2, #8]
 8005382:	0211      	lsls	r1, r2, #8
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6952      	ldr	r2, [r2, #20]
 8005388:	0852      	lsrs	r2, r2, #1
 800538a:	3a01      	subs	r2, #1
 800538c:	0652      	lsls	r2, r2, #25
 800538e:	4311      	orrs	r1, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6852      	ldr	r2, [r2, #4]
 8005394:	3a01      	subs	r2, #1
 8005396:	0112      	lsls	r2, r2, #4
 8005398:	430a      	orrs	r2, r1
 800539a:	4916      	ldr	r1, [pc, #88]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800539c:	4313      	orrs	r3, r2
 800539e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053a0:	4b14      	ldr	r3, [pc, #80]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a13      	ldr	r2, [pc, #76]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7fc ff38 	bl	8002220 <HAL_GetTick>
 80053b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053b2:	e009      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053b4:	f7fc ff34 	bl	8002220 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d902      	bls.n	80053c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	73fb      	strb	r3, [r7, #15]
          break;
 80053c6:	e005      	b.n	80053d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053c8:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ef      	beq.n	80053b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053da:	4b06      	ldr	r3, [pc, #24]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	4904      	ldr	r1, [pc, #16]	@ (80053f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	07ff800f 	.word	0x07ff800f
 80053fc:	ff9f800f 	.word	0xff9f800f
 8005400:	f9ff800f 	.word	0xf9ff800f

08005404 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005404:	b480      	push	{r7}
 8005406:	b089      	sub	sp, #36	@ 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005420:	d10b      	bne.n	800543a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005422:	4b7e      	ldr	r3, [pc, #504]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005424:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005428:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800542c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b60      	cmp	r3, #96	@ 0x60
 8005432:	d112      	bne.n	800545a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005434:	4b7a      	ldr	r3, [pc, #488]	@ (8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	e00f      	b.n	800545a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005440:	d10b      	bne.n	800545a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005442:	4b76      	ldr	r3, [pc, #472]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005444:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005448:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800544c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005454:	d101      	bne.n	800545a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005456:	4b72      	ldr	r3, [pc, #456]	@ (8005620 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8005458:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 80d6 	bne.w	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d003      	beq.n	8005474 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005472:	d13b      	bne.n	80054ec <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005474:	4b69      	ldr	r3, [pc, #420]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005480:	f040 80c4 	bne.w	800560c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8005484:	4b65      	ldr	r3, [pc, #404]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80bd 	beq.w	800560c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005492:	4b62      	ldr	r3, [pc, #392]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	3301      	adds	r3, #1
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80054a6:	4b5d      	ldr	r3, [pc, #372]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80054b2:	4b5a      	ldr	r3, [pc, #360]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	0edb      	lsrs	r3, r3, #27
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80054c4:	4b55      	ldr	r3, [pc, #340]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80054d0:	2311      	movs	r3, #17
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e001      	b.n	80054da <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80054d6:	2307      	movs	r3, #7
 80054d8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	fb03 f202 	mul.w	r2, r3, r2
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80054ea:	e08f      	b.n	800560c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d13a      	bne.n	8005568 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80054f2:	4b4a      	ldr	r3, [pc, #296]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054fe:	f040 8086 	bne.w	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8005502:	4b46      	ldr	r3, [pc, #280]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d07f      	beq.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800550e:	4b43      	ldr	r3, [pc, #268]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	3301      	adds	r3, #1
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005522:	4b3e      	ldr	r3, [pc, #248]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800552e:	4b3b      	ldr	r3, [pc, #236]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	0edb      	lsrs	r3, r3, #27
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005540:	4b36      	ldr	r3, [pc, #216]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800554c:	2311      	movs	r3, #17
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e001      	b.n	8005556 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8005552:	2307      	movs	r3, #7
 8005554:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	fb03 f202 	mul.w	r2, r3, r2
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e052      	b.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d003      	beq.n	8005576 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005574:	d109      	bne.n	800558a <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005576:	4b29      	ldr	r3, [pc, #164]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005582:	d144      	bne.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8005584:	4b27      	ldr	r3, [pc, #156]	@ (8005624 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8005586:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005588:	e041      	b.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b20      	cmp	r3, #32
 800558e:	d003      	beq.n	8005598 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005596:	d13a      	bne.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005598:	4b20      	ldr	r3, [pc, #128]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055a4:	d133      	bne.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80055a6:	4b1d      	ldr	r3, [pc, #116]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02d      	beq.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80055b2:	4b1a      	ldr	r3, [pc, #104]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	3301      	adds	r3, #1
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80055c6:	4b15      	ldr	r3, [pc, #84]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80055d2:	4b12      	ldr	r3, [pc, #72]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	0edb      	lsrs	r3, r3, #27
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80055e4:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80055f0:	2311      	movs	r3, #17
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e001      	b.n	80055fa <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80055f6:	2307      	movs	r3, #7
 80055f8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	fb03 f202 	mul.w	r2, r3, r2
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	e000      	b.n	800560e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800560c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800560e:	69fb      	ldr	r3, [r7, #28]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3724      	adds	r7, #36	@ 0x24
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40021000 	.word	0x40021000
 8005620:	001fff68 	.word	0x001fff68
 8005624:	00f42400 	.word	0x00f42400

08005628 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	@ 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e083      	b.n	8005742 <HAL_SD_Init+0x11a>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d105      	bne.n	8005652 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fc fbb7 	bl	8001dc0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2203      	movs	r2, #3
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f876 	bl	800574c <HAL_SD_InitCard>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e06b      	b.n	8005742 <HAL_SD_Init+0x11a>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 ff99 	bl	80065a8 <HAL_SD_GetCardStatus>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e060      	b.n	8005742 <HAL_SD_Init+0x11a>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005680:	7e3b      	ldrb	r3, [r7, #24]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005686:	7e7b      	ldrb	r3, [r7, #25]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10a      	bne.n	80056aa <HAL_SD_Init+0x82>
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <HAL_SD_Init+0x78>
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056a8:	e00b      	b.n	80056c2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d104      	bne.n	80056bc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056ba:	e002      	b.n	80056c2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 f84f 	bl	800676c <HAL_SD_ConfigWideBusOperation>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e034      	b.n	8005742 <HAL_SD_Init+0x11a>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80056d8:	f7fc fda2 	bl	8002220 <HAL_GetTick>
 80056dc:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80056de:	e014      	b.n	800570a <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80056e0:	f7fc fd9e 	bl	8002220 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d10c      	bne.n	800570a <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e01b      	b.n	8005742 <HAL_SD_Init+0x11a>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 f942 	bl	8006994 <HAL_SD_GetCardState>
 8005710:	4603      	mov	r3, r0
 8005712:	2b04      	cmp	r3, #4
 8005714:	d1e4      	bne.n	80056e0 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f825 	bl	800676c <HAL_SD_ConfigWideBusOperation>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_SD_Init+0x104>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e00a      	b.n	8005742 <HAL_SD_Init+0x11a>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3728      	adds	r7, #40	@ 0x28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800574c:	b5b0      	push	{r4, r5, r7, lr}
 800574e:	b08e      	sub	sp, #56	@ 0x38
 8005750:	af04      	add	r7, sp, #16
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005754:	2300      	movs	r3, #0
 8005756:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005764:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005768:	f7fe fd44 	bl	80041f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800576c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e079      	b.n	800587c <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	0a1b      	lsrs	r3, r3, #8
 800578c:	4a3d      	ldr	r2, [pc, #244]	@ (8005884 <HAL_SD_InitCard+0x138>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0210 	orr.w	r2, r2, #16
 80057b2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681d      	ldr	r5, [r3, #0]
 80057b8:	466c      	mov	r4, sp
 80057ba:	f107 0314 	add.w	r3, r7, #20
 80057be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057cc:	4628      	mov	r0, r5
 80057ce:	f003 fb85 	bl	8008edc <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f003 fbc8 	bl	8008f6c <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80057e8:	4a27      	ldr	r2, [pc, #156]	@ (8005888 <HAL_SD_InitCard+0x13c>)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	3301      	adds	r3, #1
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fc fd20 	bl	8002238 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 f9ab 	bl	8006b54 <SD_PowerON>
 80057fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e02e      	b.n	800587c <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 f8d8 	bl	80069d4 <SD_InitCard>
 8005824:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e01b      	b.n	800587c <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800584c:	4618      	mov	r0, r3
 800584e:	f003 fc23 	bl	8009098 <SDMMC_CmdBlockLength>
 8005852:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00f      	beq.n	800587a <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a0b      	ldr	r2, [pc, #44]	@ (800588c <HAL_SD_InitCard+0x140>)
 8005860:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3728      	adds	r7, #40	@ 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bdb0      	pop	{r4, r5, r7, pc}
 8005884:	014f8b59 	.word	0x014f8b59
 8005888:	00012110 	.word	0x00012110
 800588c:	1fe00fff 	.word	0x1fe00fff

08005890 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b092      	sub	sp, #72	@ 0x48
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800589e:	f7fc fcbf 	bl	8002220 <HAL_GetTick>
 80058a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e170      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	f040 8163 	bne.w	8005b96 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80058d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	441a      	add	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d907      	bls.n	80058f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e157      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2203      	movs	r2, #3
 80058f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2200      	movs	r2, #0
 8005902:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d002      	beq.n	8005912 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800590c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590e:	025b      	lsls	r3, r3, #9
 8005910:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
 8005916:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	025b      	lsls	r3, r3, #9
 800591c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800591e:	2390      	movs	r3, #144	@ 0x90
 8005920:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005922:	2302      	movs	r3, #2
 8005924:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005926:	2300      	movs	r3, #0
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800592a:	2300      	movs	r3, #0
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f107 0214 	add.w	r2, r7, #20
 8005936:	4611      	mov	r1, r2
 8005938:	4618      	mov	r0, r3
 800593a:	f003 fb81 	bl	8009040 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800594c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d90a      	bls.n	800596a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2202      	movs	r2, #2
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005960:	4618      	mov	r0, r3
 8005962:	f003 fbdf 	bl	8009124 <SDMMC_CmdReadMultiBlock>
 8005966:	6478      	str	r0, [r7, #68]	@ 0x44
 8005968:	e009      	b.n	800597e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005976:	4618      	mov	r0, r3
 8005978:	f003 fbb1 	bl	80090de <SDMMC_CmdReadSingleBlock>
 800597c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800597e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005980:	2b00      	cmp	r3, #0
 8005982:	d012      	beq.n	80059aa <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a88      	ldr	r2, [pc, #544]	@ (8005bac <HAL_SD_ReadBlocks+0x31c>)
 800598a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005992:	431a      	orrs	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e0fc      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80059ae:	e061      	b.n	8005a74 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d03c      	beq.n	8005a38 <HAL_SD_ReadBlocks+0x1a8>
 80059be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d039      	beq.n	8005a38 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80059c8:	e033      	b.n	8005a32 <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f003 faae 	bl	8008f30 <SDMMC_ReadFIFO>
 80059d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80059de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e0:	3301      	adds	r3, #1
 80059e2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80059e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e6:	3b01      	subs	r3, #1
 80059e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80059ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ec:	0a1b      	lsrs	r3, r3, #8
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80059f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f6:	3301      	adds	r3, #1
 80059f8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80059fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fc:	3b01      	subs	r3, #1
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a08:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a12:	3b01      	subs	r3, #1
 8005a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a22:	3301      	adds	r3, #1
 8005a24:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a2e:	3301      	adds	r3, #1
 8005a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a34:	2b07      	cmp	r3, #7
 8005a36:	d9c8      	bls.n	80059ca <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a38:	f7fc fbf2 	bl	8002220 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d902      	bls.n	8005a4e <HAL_SD_ReadBlocks+0x1be>
 8005a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d112      	bne.n	8005a74 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a56      	ldr	r2, [pc, #344]	@ (8005bac <HAL_SD_ReadBlocks+0x31c>)
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e097      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d096      	beq.n	80059b0 <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a90:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d022      	beq.n	8005ae6 <HAL_SD_ReadBlocks+0x256>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d91f      	bls.n	8005ae6 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d01b      	beq.n	8005ae6 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f003 fba0 	bl	80091f8 <SDMMC_CmdStopTransfer>
 8005ab8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d012      	beq.n	8005ae6 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a39      	ldr	r2, [pc, #228]	@ (8005bac <HAL_SD_ReadBlocks+0x31c>)
 8005ac6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e05e      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d012      	beq.n	8005b1a <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2c      	ldr	r2, [pc, #176]	@ (8005bac <HAL_SD_ReadBlocks+0x31c>)
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	f043 0208 	orr.w	r2, r3, #8
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e044      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d012      	beq.n	8005b4e <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005bac <HAL_SD_ReadBlocks+0x31c>)
 8005b2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	f043 0202 	orr.w	r2, r3, #2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e02a      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a12      	ldr	r2, [pc, #72]	@ (8005bac <HAL_SD_ReadBlocks+0x31c>)
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e010      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb0 <HAL_SD_ReadBlocks+0x320>)
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e006      	b.n	8005ba4 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
  }
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3748      	adds	r7, #72	@ 0x48
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	1fe00fff 	.word	0x1fe00fff
 8005bb0:	18000f3a 	.word	0x18000f3a

08005bb4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b092      	sub	sp, #72	@ 0x48
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005bc2:	f7fc fb2d 	bl	8002220 <HAL_GetTick>
 8005bc6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d107      	bne.n	8005be6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e174      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	f040 8167 	bne.w	8005ec2 <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005bfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d907      	bls.n	8005c18 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e15b      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2200      	movs	r2, #0
 8005c26:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d002      	beq.n	8005c36 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	025b      	lsls	r3, r3, #9
 8005c34:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005c36:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	025b      	lsls	r3, r3, #9
 8005c40:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005c42:	2390      	movs	r3, #144	@ 0x90
 8005c44:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005c46:	2300      	movs	r3, #0
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f107 0218 	add.w	r2, r7, #24
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f003 f9ef 	bl	8009040 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c70:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d90a      	bls.n	8005c8e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c84:	4618      	mov	r0, r3
 8005c86:	f003 fa93 	bl	80091b0 <SDMMC_CmdWriteMultiBlock>
 8005c8a:	6478      	str	r0, [r7, #68]	@ 0x44
 8005c8c:	e009      	b.n	8005ca2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2210      	movs	r2, #16
 8005c92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f003 fa65 	bl	800916a <SDMMC_CmdWriteSingleBlock>
 8005ca0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a8a      	ldr	r2, [pc, #552]	@ (8005ed8 <HAL_SD_WriteBlocks+0x324>)
 8005cae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e100      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005cd2:	e065      	b.n	8005da0 <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d040      	beq.n	8005d64 <HAL_SD_WriteBlocks+0x1b0>
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d03d      	beq.n	8005d64 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cec:	e037      	b.n	8005d5e <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	021a      	lsls	r2, r3, #8
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0e:	3301      	adds	r3, #1
 8005d10:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d14:	3b01      	subs	r3, #1
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	041a      	lsls	r2, r3, #16
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	3301      	adds	r3, #1
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	061a      	lsls	r2, r3, #24
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	3301      	adds	r3, #1
 8005d40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	3b01      	subs	r3, #1
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f107 0214 	add.w	r2, r7, #20
 8005d50:	4611      	mov	r1, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f003 f8f9 	bl	8008f4a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d60:	2b07      	cmp	r3, #7
 8005d62:	d9c4      	bls.n	8005cee <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005d64:	f7fc fa5c 	bl	8002220 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d902      	bls.n	8005d7a <HAL_SD_WriteBlocks+0x1c6>
 8005d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d112      	bne.n	8005da0 <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	@ (8005ed8 <HAL_SD_WriteBlocks+0x324>)
 8005d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e097      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da6:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d092      	beq.n	8005cd4 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dbc:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d022      	beq.n	8005e12 <HAL_SD_WriteBlocks+0x25e>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d91f      	bls.n	8005e12 <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d01b      	beq.n	8005e12 <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f003 fa0a 	bl	80091f8 <SDMMC_CmdStopTransfer>
 8005de4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a39      	ldr	r2, [pc, #228]	@ (8005ed8 <HAL_SD_WriteBlocks+0x324>)
 8005df2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e05e      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d012      	beq.n	8005e46 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed8 <HAL_SD_WriteBlocks+0x324>)
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2c:	f043 0208 	orr.w	r2, r3, #8
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e044      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d012      	beq.n	8005e7a <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1f      	ldr	r2, [pc, #124]	@ (8005ed8 <HAL_SD_WriteBlocks+0x324>)
 8005e5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e60:	f043 0202 	orr.w	r2, r3, #2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e02a      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d012      	beq.n	8005eae <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a12      	ldr	r2, [pc, #72]	@ (8005ed8 <HAL_SD_WriteBlocks+0x324>)
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	f043 0210 	orr.w	r2, r3, #16
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e010      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005edc <HAL_SD_WriteBlocks+0x328>)
 8005eb4:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e006      	b.n	8005ed0 <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
  }
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3748      	adds	r7, #72	@ 0x48
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	1fe00fff 	.word	0x1fe00fff
 8005edc:	18000f3a 	.word	0x18000f3a

08005ee0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d008      	beq.n	8005f0e <HAL_SD_IRQHandler+0x2e>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 f98e 	bl	8007228 <SD_Read_IT>
 8005f0c:	e199      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80ae 	beq.w	800607a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8005f36:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8005f3a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f5a:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d038      	beq.n	8005fd8 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <HAL_SD_IRQHandler+0x9a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f003 f93a 	bl	80091f8 <SDMMC_CmdStopTransfer>
 8005f84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f957 	bl	800624c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a90      	ldr	r2, [pc, #576]	@ (80061e4 <HAL_SD_IRQHandler+0x304>)
 8005fa4:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <HAL_SD_IRQHandler+0xe8>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f003 fe11 	bl	8009bf0 <HAL_SD_RxCpltCallback>
 8005fce:	e138      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f003 fe03 	bl	8009bdc <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8005fd6:	e134      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 812f 	beq.w	8006242 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	651a      	str	r2, [r3, #80]	@ 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <HAL_SD_IRQHandler+0x130>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d011      	beq.n	8006034 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f003 f8ef 	bl	80091f8 <SDMMC_CmdStopTransfer>
 800601a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f90c 	bl	800624c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	d104      	bne.n	8006056 <HAL_SD_IRQHandler+0x176>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f003 fdc0 	bl	8009bdc <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <HAL_SD_IRQHandler+0x192>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80e8 	beq.w	8006242 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f003 fdbc 	bl	8009bf0 <HAL_SD_RxCpltCallback>
}
 8006078:	e0e3      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_SD_IRQHandler+0x1ba>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f919 	bl	80072ca <SD_Write_IT>
 8006098:	e0d3      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a0:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 809f 	beq.w	80061e8 <HAL_SD_IRQHandler+0x308>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	f043 0202 	orr.w	r2, r3, #2
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	f043 0208 	orr.w	r2, r3, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610a:	f043 0210 	orr.w	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a33      	ldr	r2, [pc, #204]	@ (80061e4 <HAL_SD_IRQHandler+0x304>)
 8006118:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006128:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006138:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006148:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006158:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f003 f84a 	bl	80091f8 <SDMMC_CmdStopTransfer>
 8006164:	4602      	mov	r2, r0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800617e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006188:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f852 	bl	800624c <HAL_SD_ErrorCallback>
}
 80061a8:	e04b      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d046      	beq.n	8006242 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d042      	beq.n	8006242 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80061ca:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2200      	movs	r2, #0
 80061d2:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_ErrorCallback(hsd);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f835 	bl	800624c <HAL_SD_ErrorCallback>
}
 80061e2:	e02e      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
 80061e4:	18000f3a 	.word	0x18000f3a
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d025      	beq.n	8006242 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 f8d4 	bl	80073c6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800621e:	e010      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 f8bc 	bl	800739e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8006226:	e00c      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 f8bd 	bl	80073b2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8006238:	e003      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 f8a5 	bl	800738a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8006240:	e7ff      	b.n	8006242 <HAL_SD_IRQHandler+0x362>
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop

0800624c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626e:	0f9b      	lsrs	r3, r3, #30
 8006270:	b2da      	uxtb	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627a:	0e9b      	lsrs	r3, r3, #26
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	b2da      	uxtb	r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800628c:	0e1b      	lsrs	r3, r3, #24
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	b2da      	uxtb	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800629e:	0c1b      	lsrs	r3, r3, #16
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062c0:	0d1b      	lsrs	r3, r3, #20
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062cc:	0c1b      	lsrs	r3, r3, #16
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062de:	0bdb      	lsrs	r3, r3, #15
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f0:	0b9b      	lsrs	r3, r3, #14
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006302:	0b5b      	lsrs	r3, r3, #13
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	b2da      	uxtb	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006314:	0b1b      	lsrs	r3, r3, #12
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	b2da      	uxtb	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2200      	movs	r2, #0
 8006326:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d163      	bne.n	80063f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006334:	009a      	lsls	r2, r3, #2
 8006336:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800633a:	4013      	ands	r3, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006340:	0f92      	lsrs	r2, r2, #30
 8006342:	431a      	orrs	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800634c:	0edb      	lsrs	r3, r3, #27
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	b2da      	uxtb	r2, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800635e:	0e1b      	lsrs	r3, r3, #24
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	b2da      	uxtb	r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006370:	0d5b      	lsrs	r3, r3, #21
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	b2da      	uxtb	r2, r3
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006382:	0c9b      	lsrs	r3, r3, #18
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	b2da      	uxtb	r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006394:	0bdb      	lsrs	r3, r3, #15
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	b2da      	uxtb	r2, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	7e1b      	ldrb	r3, [r3, #24]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	3302      	adds	r3, #2
 80063b8:	2201      	movs	r2, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80063c2:	fb03 f202 	mul.w	r2, r3, r2
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	7a1b      	ldrb	r3, [r3, #8]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	2201      	movs	r2, #1
 80063d6:	409a      	lsls	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	651a      	str	r2, [r3, #80]	@ 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80063e4:	0a52      	lsrs	r2, r2, #9
 80063e6:	fb03 f202 	mul.w	r2, r3, r2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80063f6:	e031      	b.n	800645c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d11d      	bne.n	800643c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800640e:	0c1b      	lsrs	r3, r3, #16
 8006410:	431a      	orrs	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	3301      	adds	r3, #1
 800641c:	029a      	lsls	r2, r3, #10
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006430:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	659a      	str	r2, [r3, #88]	@ 0x58
 800643a:	e00f      	b.n	800645c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a58      	ldr	r2, [pc, #352]	@ (80065a4 <HAL_SD_GetCardCSD+0x344>)
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e09d      	b.n	8006598 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006460:	0b9b      	lsrs	r3, r3, #14
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	b2da      	uxtb	r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006472:	09db      	lsrs	r3, r3, #7
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647a:	b2da      	uxtb	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006484:	b2db      	uxtb	r3, r3
 8006486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800648a:	b2da      	uxtb	r2, r3
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006494:	0fdb      	lsrs	r3, r3, #31
 8006496:	b2da      	uxtb	r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a0:	0f5b      	lsrs	r3, r3, #29
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064b2:	0e9b      	lsrs	r3, r3, #26
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064c4:	0d9b      	lsrs	r3, r3, #22
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064d6:	0d5b      	lsrs	r3, r3, #21
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f2:	0c1b      	lsrs	r3, r3, #16
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006506:	0bdb      	lsrs	r3, r3, #15
 8006508:	b2db      	uxtb	r3, r3
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800651a:	0b9b      	lsrs	r3, r3, #14
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	b2da      	uxtb	r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800652e:	0b5b      	lsrs	r3, r3, #13
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006542:	0b1b      	lsrs	r3, r3, #12
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	b2da      	uxtb	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006556:	0a9b      	lsrs	r3, r3, #10
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	b2da      	uxtb	r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	b2da      	uxtb	r2, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	b2db      	uxtb	r3, r3
 8006582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006586:	b2da      	uxtb	r2, r3
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	1fe00fff 	.word	0x1fe00fff

080065a8 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b094      	sub	sp, #80	@ 0x50
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80065b8:	f107 0308 	add.w	r3, r7, #8
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fbd4 	bl	8006d6c <SD_SendSDStatus>
 80065c4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80065c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d011      	beq.n	80065f0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a4f      	ldr	r2, [pc, #316]	@ (8006710 <HAL_SD_GetCardStatus+0x168>)
 80065d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80065ee:	e070      	b.n	80066d2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	099b      	lsrs	r3, r3, #6
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	b2da      	uxtb	r2, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	b29b      	uxth	r3, r3
 8006616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800661a:	b29a      	uxth	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	0e1b      	lsrs	r3, r3, #24
 8006620:	b29b      	uxth	r3, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	b29a      	uxth	r2, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	061a      	lsls	r2, r3, #24
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006636:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006640:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	0e1b      	lsrs	r3, r3, #24
 8006646:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	b2da      	uxtb	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b2da      	uxtb	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	0d1b      	lsrs	r3, r3, #20
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	b2da      	uxtb	r2, r3
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	0c1b      	lsrs	r3, r3, #16
 8006672:	b29b      	uxth	r3, r3
 8006674:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006678:	b29a      	uxth	r2, r3
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	b29b      	uxth	r3, r3
 800667e:	b2db      	uxtb	r3, r3
 8006680:	b29b      	uxth	r3, r3
 8006682:	4313      	orrs	r3, r2
 8006684:	b29a      	uxth	r2, r3
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	0a9b      	lsrs	r3, r3, #10
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006694:	b2da      	uxtb	r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	0e1b      	lsrs	r3, r3, #24
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066da:	4618      	mov	r0, r3
 80066dc:	f002 fcdc 	bl	8009098 <SDMMC_CmdBlockLength>
 80066e0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80066e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a08      	ldr	r2, [pc, #32]	@ (8006710 <HAL_SD_GetCardStatus+0x168>)
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8006704:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006708:	4618      	mov	r0, r3
 800670a:	3750      	adds	r7, #80	@ 0x50
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	1fe00fff 	.word	0x1fe00fff

08006714 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800676c:	b5b0      	push	{r4, r5, r7, lr}
 800676e:	b090      	sub	sp, #64	@ 0x40
 8006770:	af04      	add	r7, sp, #16
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2203      	movs	r2, #3
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006788:	2b03      	cmp	r3, #3
 800678a:	d02e      	beq.n	80067ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006792:	d106      	bne.n	80067a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006798:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	639a      	str	r2, [r3, #56]	@ 0x38
 80067a0:	e029      	b.n	80067f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067a8:	d10a      	bne.n	80067c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fbd6 	bl	8006f5c <SD_WideBus_Enable>
 80067b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80067be:	e01a      	b.n	80067f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fc13 	bl	8006ff2 <SD_WideBus_Disable>
 80067cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80067da:	e00c      	b.n	80067f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80067e8:	e005      	b.n	80067f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a60      	ldr	r2, [pc, #384]	@ (8006984 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006804:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800680c:	e097      	b.n	800693e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800680e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006812:	f7fd fcef 	bl	80041f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006816:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8086 	beq.w	800692c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695a      	ldr	r2, [r3, #20]
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	4952      	ldr	r1, [pc, #328]	@ (8006988 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800683e:	fba1 1303 	umull	r1, r3, r1, r3
 8006842:	0e1b      	lsrs	r3, r3, #24
 8006844:	429a      	cmp	r2, r3
 8006846:	d303      	bcc.n	8006850 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	e05a      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006858:	d103      	bne.n	8006862 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	e051      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800686a:	d126      	bne.n	80068ba <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10e      	bne.n	8006892 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	4a45      	ldr	r2, [pc, #276]	@ (800698c <HAL_SD_ConfigWideBusOperation+0x220>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d906      	bls.n	800688a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	4a42      	ldr	r2, [pc, #264]	@ (8006988 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	0e5b      	lsrs	r3, r3, #25
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e03d      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e039      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	4a3b      	ldr	r2, [pc, #236]	@ (800698c <HAL_SD_ConfigWideBusOperation+0x220>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d906      	bls.n	80068b2 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	4a38      	ldr	r2, [pc, #224]	@ (8006988 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	0e5b      	lsrs	r3, r3, #25
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e029      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e025      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10e      	bne.n	80068e0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	4a32      	ldr	r2, [pc, #200]	@ (8006990 <HAL_SD_ConfigWideBusOperation+0x224>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d906      	bls.n	80068d8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006988 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	0e1b      	lsrs	r3, r3, #24
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	e016      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	e012      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	4a28      	ldr	r2, [pc, #160]	@ (8006990 <HAL_SD_ConfigWideBusOperation+0x224>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d906      	bls.n	8006900 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	4a24      	ldr	r2, [pc, #144]	@ (8006988 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80068f6:	fba2 2303 	umull	r2, r3, r2, r3
 80068fa:	0e1b      	lsrs	r3, r3, #24
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	e002      	b.n	8006906 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681d      	ldr	r5, [r3, #0]
 8006910:	466c      	mov	r4, sp
 8006912:	f107 0318 	add.w	r3, r7, #24
 8006916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800691a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800691e:	f107 030c 	add.w	r3, r7, #12
 8006922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006924:	4628      	mov	r0, r5
 8006926:	f002 fad9 	bl	8008edc <SDMMC_Init>
 800692a:	e008      	b.n	800693e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006946:	4618      	mov	r0, r3
 8006948:	f002 fba6 	bl	8009098 <SDMMC_CmdBlockLength>
 800694c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a0a      	ldr	r2, [pc, #40]	@ (8006984 <HAL_SD_ConfigWideBusOperation+0x218>)
 800695a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006976:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800697a:	4618      	mov	r0, r3
 800697c:	3730      	adds	r7, #48	@ 0x30
 800697e:	46bd      	mov	sp, r7
 8006980:	bdb0      	pop	{r4, r5, r7, pc}
 8006982:	bf00      	nop
 8006984:	1fe00fff 	.word	0x1fe00fff
 8006988:	55e63b89 	.word	0x55e63b89
 800698c:	02faf080 	.word	0x02faf080
 8006990:	017d7840 	.word	0x017d7840

08006994 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fab0 	bl	8006f0c <SD_SendStatus>
 80069ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	0a5b      	lsrs	r3, r3, #9
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069ca:	693b      	ldr	r3, [r7, #16]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80069d4:	b5b0      	push	{r4, r5, r7, lr}
 80069d6:	b090      	sub	sp, #64	@ 0x40
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80069dc:	2301      	movs	r3, #1
 80069de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f002 fad3 	bl	8008f90 <SDMMC_GetPowerState>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d102      	bne.n	80069f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069f0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80069f4:	e0a9      	b.n	8006b4a <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d02e      	beq.n	8006a5c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f002 fd18 	bl	8009438 <SDMMC_CmdSendCID>
 8006a08:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <SD_InitCard+0x40>
    {
      return errorstate;
 8006a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a12:	e09a      	b.n	8006b4a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f002 fafd 	bl	800901a <SDMMC_GetResponse>
 8006a20:	4602      	mov	r2, r0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2104      	movs	r1, #4
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f002 faf4 	bl	800901a <SDMMC_GetResponse>
 8006a32:	4602      	mov	r2, r0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2108      	movs	r1, #8
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 faeb 	bl	800901a <SDMMC_GetResponse>
 8006a44:	4602      	mov	r2, r0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	210c      	movs	r1, #12
 8006a50:	4618      	mov	r0, r3
 8006a52:	f002 fae2 	bl	800901a <SDMMC_GetResponse>
 8006a56:	4602      	mov	r2, r0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d00d      	beq.n	8006a80 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f107 020e 	add.w	r2, r7, #14
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f002 fd21 	bl	80094b6 <SDMMC_CmdSetRelAdd>
 8006a74:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <SD_InitCard+0xac>
    {
      return errorstate;
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7e:	e064      	b.n	8006b4a <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d036      	beq.n	8006af6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a98:	041b      	lsls	r3, r3, #16
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f002 fcea 	bl	8009476 <SDMMC_CmdSendCSD>
 8006aa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <SD_InitCard+0xda>
    {
      return errorstate;
 8006aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aac:	e04d      	b.n	8006b4a <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f002 fab0 	bl	800901a <SDMMC_GetResponse>
 8006aba:	4602      	mov	r2, r0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f002 faa7 	bl	800901a <SDMMC_GetResponse>
 8006acc:	4602      	mov	r2, r0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2108      	movs	r1, #8
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f002 fa9e 	bl	800901a <SDMMC_GetResponse>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	210c      	movs	r1, #12
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 fa95 	bl	800901a <SDMMC_GetResponse>
 8006af0:	4602      	mov	r2, r0
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2104      	movs	r1, #4
 8006afc:	4618      	mov	r0, r3
 8006afe:	f002 fa8c 	bl	800901a <SDMMC_GetResponse>
 8006b02:	4603      	mov	r3, r0
 8006b04:	0d1a      	lsrs	r2, r3, #20
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006b0a:	f107 0310 	add.w	r3, r7, #16
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fba5 	bl	8006260 <HAL_SD_GetCardCSD>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b1c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006b20:	e013      	b.n	8006b4a <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	461c      	mov	r4, r3
 8006b30:	4615      	mov	r5, r2
 8006b32:	4622      	mov	r2, r4
 8006b34:	462b      	mov	r3, r5
 8006b36:	4608      	mov	r0, r1
 8006b38:	f002 fb94 	bl	8009264 <SDMMC_CmdSelDesel>
 8006b3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <SD_InitCard+0x174>
  {
    return errorstate;
 8006b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b46:	e000      	b.n	8006b4a <SD_InitCard+0x176>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3740      	adds	r7, #64	@ 0x40
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006b54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	2300      	movs	r3, #0
 8006b66:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8006b68:	f7fb fb5a 	bl	8002220 <HAL_GetTick>
 8006b6c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f002 fb9a 	bl	80092ac <SDMMC_CmdGoIdleState>
 8006b78:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <SD_PowerON+0x30>
  {
    return errorstate;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	e0ed      	b.n	8006d60 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f002 fbad 	bl	80092e8 <SDMMC_CmdOperCond>
 8006b8e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f002 fb83 	bl	80092ac <SDMMC_CmdGoIdleState>
 8006ba6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <SD_PowerON+0x64>
    {
      return errorstate;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	e0d6      	b.n	8006d60 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d137      	bne.n	8006c30 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f002 fbae 	bl	8009328 <SDMMC_CmdAppCommand>
 8006bcc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02d      	beq.n	8006c30 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bd4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006bd8:	e0c2      	b.n	8006d60 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2100      	movs	r1, #0
 8006be0:	4618      	mov	r0, r3
 8006be2:	f002 fba1 	bl	8009328 <SDMMC_CmdAppCommand>
 8006be6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	e0b6      	b.n	8006d60 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	495c      	ldr	r1, [pc, #368]	@ (8006d68 <SD_PowerON+0x214>)
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f002 fbb8 	bl	800936e <SDMMC_CmdAppOperCommand>
 8006bfe:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006c0a:	e0a9      	b.n	8006d60 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2100      	movs	r1, #0
 8006c12:	4618      	mov	r0, r3
 8006c14:	f002 fa01 	bl	800901a <SDMMC_GetResponse>
 8006c18:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	0fdb      	lsrs	r3, r3, #31
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <SD_PowerON+0xd2>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <SD_PowerON+0xd4>
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]

    count++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d802      	bhi.n	8006c40 <SD_PowerON+0xec>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0cc      	beq.n	8006bda <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d902      	bls.n	8006c50 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c4e:	e087      	b.n	8006d60 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d07e      	beq.n	8006d58 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d17a      	bne.n	8006d5e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d075      	beq.n	8006d5e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c78:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0208 	orr.w	r2, r2, #8
 8006c88:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f002 fc78 	bl	8009584 <SDMMC_CmdVoltageSwitch>
 8006c94:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00c      	beq.n	8006cb6 <SD_PowerON+0x162>
        {
          return errorstate;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	e05f      	b.n	8006d60 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ca0:	f7fb fabe 	bl	8002220 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	d102      	bne.n	8006cb6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006cb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006cb4:	e054      	b.n	8006d60 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cc4:	d1ec      	bne.n	8006ca0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006cce:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cde:	d002      	beq.n	8006ce6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006ce0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006ce4:	e03c      	b.n	8006d60 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	f000 fb44 	bl	8007374 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0204 	orr.w	r2, r2, #4
 8006cfa:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006cfc:	e00a      	b.n	8006d14 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006cfe:	f7fb fa8f 	bl	8002220 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d102      	bne.n	8006d14 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006d0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d12:	e025      	b.n	8006d60 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d22:	d1ec      	bne.n	8006cfe <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d2c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d3c:	d102      	bne.n	8006d44 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d42:	e00d      	b.n	8006d60 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2213      	movs	r2, #19
 8006d4a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295
 8006d54:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d56:	e002      	b.n	8006d5e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	c1100000 	.word	0xc1100000

08006d6c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08c      	sub	sp, #48	@ 0x30
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d76:	f7fb fa53 	bl	8002220 <HAL_GetTick>
 8006d7a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f002 f947 	bl	800901a <SDMMC_GetResponse>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d96:	d102      	bne.n	8006d9e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d9c:	e0b0      	b.n	8006f00 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2140      	movs	r1, #64	@ 0x40
 8006da4:	4618      	mov	r0, r3
 8006da6:	f002 f977 	bl	8009098 <SDMMC_CmdBlockLength>
 8006daa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	e0a0      	b.n	8006f00 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc6:	041b      	lsls	r3, r3, #16
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f002 faac 	bl	8009328 <SDMMC_CmdAppCommand>
 8006dd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	e08d      	b.n	8006f00 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006de4:	f04f 33ff 	mov.w	r3, #4294967295
 8006de8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006dea:	2340      	movs	r3, #64	@ 0x40
 8006dec:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006dee:	2360      	movs	r3, #96	@ 0x60
 8006df0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006df2:	2302      	movs	r3, #2
 8006df4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f107 0208 	add.w	r2, r7, #8
 8006e06:	4611      	mov	r1, r2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 f919 	bl	8009040 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f002 fb94 	bl	8009540 <SDMMC_CmdStatusRegister>
 8006e18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02b      	beq.n	8006e78 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	@ 0x38
    return errorstate;
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	e069      	b.n	8006f00 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d013      	beq.n	8006e62 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e3e:	e00d      	b.n	8006e5c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f002 f873 	bl	8008f30 <SDMMC_ReadFIFO>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4e:	601a      	str	r2, [r3, #0]
        pData++;
 8006e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e52:	3304      	adds	r3, #4
 8006e54:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(count = 0U; count < 8U; count++)
 8006e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e58:	3301      	adds	r3, #1
 8006e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5e:	2b07      	cmp	r3, #7
 8006e60:	d9ee      	bls.n	8006e40 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e62:	f7fb f9dd 	bl	8002220 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e70:	d102      	bne.n	8006e78 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e76:	e043      	b.n	8006f00 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e7e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0d2      	beq.n	8006e2c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e94:	2308      	movs	r3, #8
 8006e96:	e033      	b.n	8006f00 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e02a      	b.n	8006f00 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d017      	beq.n	8006ee8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006eb8:	2320      	movs	r3, #32
 8006eba:	e021      	b.n	8006f00 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f002 f835 	bl	8008f30 <SDMMC_ReadFIFO>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	601a      	str	r2, [r3, #0]
    pData++;
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	3304      	adds	r3, #4
 8006ed0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ed2:	f7fb f9a5 	bl	8002220 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d102      	bne.n	8006ee8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ee2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ee6:	e00b      	b.n	8006f00 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e2      	bne.n	8006ebc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a03      	ldr	r2, [pc, #12]	@ (8006f08 <SD_SendSDStatus+0x19c>)
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3730      	adds	r7, #48	@ 0x30
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	18000f3a 	.word	0x18000f3a

08006f0c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006f1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f20:	e018      	b.n	8006f54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f2a:	041b      	lsls	r3, r3, #16
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4610      	mov	r0, r2
 8006f30:	f002 fae3 	bl	80094fa <SDMMC_CmdSendStatus>
 8006f34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	e009      	b.n	8006f54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 f867 	bl	800901a <SDMMC_GetResponse>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f002 f851 	bl	800901a <SDMMC_GetResponse>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f82:	d102      	bne.n	8006f8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006f88:	e02f      	b.n	8006fea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f8a:	f107 030c 	add.w	r3, r7, #12
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f879 	bl	8007088 <SD_FindSCR>
 8006f96:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	e023      	b.n	8006fea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01c      	beq.n	8006fe6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f002 f9b5 	bl	8009328 <SDMMC_CmdAppCommand>
 8006fbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	e00f      	b.n	8006fea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2102      	movs	r1, #2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f002 f9ec 	bl	80093ae <SDMMC_CmdBusWidth>
 8006fd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	e003      	b.n	8006fea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e001      	b.n	8006fea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fe6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f002 f806 	bl	800901a <SDMMC_GetResponse>
 800700e:	4603      	mov	r3, r0
 8007010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007018:	d102      	bne.n	8007020 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800701a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800701e:	e02f      	b.n	8007080 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007020:	f107 030c 	add.w	r3, r7, #12
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f82e 	bl	8007088 <SD_FindSCR>
 800702c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	e023      	b.n	8007080 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01c      	beq.n	800707c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704a:	041b      	lsls	r3, r3, #16
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f002 f96a 	bl	8009328 <SDMMC_CmdAppCommand>
 8007054:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e00f      	b.n	8007080 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f002 f9a1 	bl	80093ae <SDMMC_CmdBusWidth>
 800706c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	e003      	b.n	8007080 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007078:	2300      	movs	r3, #0
 800707a:	e001      	b.n	8007080 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800707c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08e      	sub	sp, #56	@ 0x38
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007092:	f7fb f8c5 	bl	8002220 <HAL_GetTick>
 8007096:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2108      	movs	r1, #8
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 fff2 	bl	8009098 <SDMMC_CmdBlockLength>
 80070b4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	e0ad      	b.n	800721c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f002 f92b 	bl	8009328 <SDMMC_CmdAppCommand>
 80070d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <SD_FindSCR+0x56>
  {
    return errorstate;
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	e09e      	b.n	800721c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
 80070e2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80070e4:	2308      	movs	r3, #8
 80070e6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80070e8:	2330      	movs	r3, #48	@ 0x30
 80070ea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80070ec:	2302      	movs	r3, #2
 80070ee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070f4:	2301      	movs	r3, #1
 80070f6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f107 0210 	add.w	r2, r7, #16
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f001 ff9c 	bl	8009040 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f002 f971 	bl	80093f4 <SDMMC_CmdSendSCR>
 8007112:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d027      	beq.n	800716a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	e07e      	b.n	800721c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d113      	bne.n	8007154 <SD_FindSCR+0xcc>
 800712c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	d110      	bne.n	8007154 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f001 fefa 	bl	8008f30 <SDMMC_ReadFIFO>
 800713c:	4603      	mov	r3, r0
 800713e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f001 fef3 	bl	8008f30 <SDMMC_ReadFIFO>
 800714a:	4603      	mov	r3, r0
 800714c:	60fb      	str	r3, [r7, #12]
      index++;
 800714e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007150:	3301      	adds	r3, #1
 8007152:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007154:	f7fb f864 	bl	8002220 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d102      	bne.n	800716a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007164:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007168:	e058      	b.n	800721c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007170:	f240 532a 	movw	r3, #1322	@ 0x52a
 8007174:	4013      	ands	r3, r2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0d1      	beq.n	800711e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2208      	movs	r2, #8
 800718e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007190:	2308      	movs	r3, #8
 8007192:	e043      	b.n	800721c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2202      	movs	r2, #2
 80071a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071aa:	2302      	movs	r3, #2
 80071ac:	e036      	b.n	800721c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2220      	movs	r2, #32
 80071c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80071c4:	2320      	movs	r3, #32
 80071c6:	e029      	b.n	800721c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a15      	ldr	r2, [pc, #84]	@ (8007224 <SD_FindSCR+0x19c>)
 80071ce:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	061a      	lsls	r2, r3, #24
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	0a1b      	lsrs	r3, r3, #8
 80071e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071e6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	0e1b      	lsrs	r3, r3, #24
 80071ec:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80071ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f0:	601a      	str	r2, [r3, #0]
    scr++;
 80071f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f4:	3304      	adds	r3, #4
 80071f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	061a      	lsls	r2, r3, #24
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007204:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800720e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	0e1b      	lsrs	r3, r3, #24
 8007214:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3738      	adds	r7, #56	@ 0x38
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	18000f3a 	.word	0x18000f3a

08007228 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007234:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d03f      	beq.n	80072c2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e033      	b.n	80072b0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f001 fe6f 	bl	8008f30 <SDMMC_ReadFIFO>
 8007252:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3b01      	subs	r3, #1
 8007266:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b2da      	uxtb	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3b01      	subs	r3, #1
 800727c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	3b01      	subs	r3, #1
 8007292:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	0e1b      	lsrs	r3, r3, #24
 8007298:	b2da      	uxtb	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3301      	adds	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	3301      	adds	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b07      	cmp	r3, #7
 80072b4:	d9c8      	bls.n	8007248 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80072c2:	bf00      	nop
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d043      	beq.n	800736c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	e037      	b.n	800735a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	021a      	lsls	r2, r3, #8
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4313      	orrs	r3, r2
 8007306:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3b01      	subs	r3, #1
 8007312:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	041a      	lsls	r2, r3, #16
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4313      	orrs	r3, r2
 800731e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3301      	adds	r3, #1
 8007324:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	3b01      	subs	r3, #1
 800732a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	061a      	lsls	r2, r3, #24
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3b01      	subs	r3, #1
 8007342:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f107 0208 	add.w	r2, r7, #8
 800734c:	4611      	mov	r1, r2
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fdfb 	bl	8008f4a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	3301      	adds	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b07      	cmp	r3, #7
 800735e:	d9c4      	bls.n	80072ea <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800736c:	bf00      	nop
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e049      	b.n	8007480 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7fa fd69 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3304      	adds	r3, #4
 8007416:	4619      	mov	r1, r3
 8007418:	4610      	mov	r0, r2
 800741a:	f000 f967 	bl	80076ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d001      	beq.n	80074a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e047      	b.n	8007530 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a23      	ldr	r2, [pc, #140]	@ (800753c <HAL_TIM_Base_Start+0xb4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01d      	beq.n	80074ee <HAL_TIM_Base_Start+0x66>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ba:	d018      	beq.n	80074ee <HAL_TIM_Base_Start+0x66>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007540 <HAL_TIM_Base_Start+0xb8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <HAL_TIM_Base_Start+0x66>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007544 <HAL_TIM_Base_Start+0xbc>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00e      	beq.n	80074ee <HAL_TIM_Base_Start+0x66>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <HAL_TIM_Base_Start+0xc0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d009      	beq.n	80074ee <HAL_TIM_Base_Start+0x66>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1b      	ldr	r2, [pc, #108]	@ (800754c <HAL_TIM_Base_Start+0xc4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d004      	beq.n	80074ee <HAL_TIM_Base_Start+0x66>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a19      	ldr	r2, [pc, #100]	@ (8007550 <HAL_TIM_Base_Start+0xc8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d115      	bne.n	800751a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	4b17      	ldr	r3, [pc, #92]	@ (8007554 <HAL_TIM_Base_Start+0xcc>)
 80074f6:	4013      	ands	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b06      	cmp	r3, #6
 80074fe:	d015      	beq.n	800752c <HAL_TIM_Base_Start+0xa4>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007506:	d011      	beq.n	800752c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007518:	e008      	b.n	800752c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0201 	orr.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e000      	b.n	800752e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800752c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40013400 	.word	0x40013400
 8007550:	40014000 	.word	0x40014000
 8007554:	00010007 	.word	0x00010007

08007558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_TIM_ConfigClockSource+0x1c>
 8007570:	2302      	movs	r3, #2
 8007572:	e0b6      	b.n	80076e2 <HAL_TIM_ConfigClockSource+0x18a>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800759e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b0:	d03e      	beq.n	8007630 <HAL_TIM_ConfigClockSource+0xd8>
 80075b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b6:	f200 8087 	bhi.w	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075be:	f000 8086 	beq.w	80076ce <HAL_TIM_ConfigClockSource+0x176>
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c6:	d87f      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075c8:	2b70      	cmp	r3, #112	@ 0x70
 80075ca:	d01a      	beq.n	8007602 <HAL_TIM_ConfigClockSource+0xaa>
 80075cc:	2b70      	cmp	r3, #112	@ 0x70
 80075ce:	d87b      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075d0:	2b60      	cmp	r3, #96	@ 0x60
 80075d2:	d050      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x11e>
 80075d4:	2b60      	cmp	r3, #96	@ 0x60
 80075d6:	d877      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075d8:	2b50      	cmp	r3, #80	@ 0x50
 80075da:	d03c      	beq.n	8007656 <HAL_TIM_ConfigClockSource+0xfe>
 80075dc:	2b50      	cmp	r3, #80	@ 0x50
 80075de:	d873      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075e0:	2b40      	cmp	r3, #64	@ 0x40
 80075e2:	d058      	beq.n	8007696 <HAL_TIM_ConfigClockSource+0x13e>
 80075e4:	2b40      	cmp	r3, #64	@ 0x40
 80075e6:	d86f      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075e8:	2b30      	cmp	r3, #48	@ 0x30
 80075ea:	d064      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15e>
 80075ec:	2b30      	cmp	r3, #48	@ 0x30
 80075ee:	d86b      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d060      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15e>
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d867      	bhi.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05c      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15e>
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d05a      	beq.n	80076b6 <HAL_TIM_ConfigClockSource+0x15e>
 8007600:	e062      	b.n	80076c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007612:	f000 f98b 	bl	800792c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	609a      	str	r2, [r3, #8]
      break;
 800762e:	e04f      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007640:	f000 f974 	bl	800792c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007652:	609a      	str	r2, [r3, #8]
      break;
 8007654:	e03c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	461a      	mov	r2, r3
 8007664:	f000 f8e8 	bl	8007838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2150      	movs	r1, #80	@ 0x50
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f941 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 8007674:	e02c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007682:	461a      	mov	r2, r3
 8007684:	f000 f907 	bl	8007896 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2160      	movs	r1, #96	@ 0x60
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f931 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 8007694:	e01c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a2:	461a      	mov	r2, r3
 80076a4:	f000 f8c8 	bl	8007838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2140      	movs	r1, #64	@ 0x40
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 f921 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 80076b4:	e00c      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f000 f918 	bl	80078f6 <TIM_ITRx_SetConfig>
      break;
 80076c6:	e003      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
      break;
 80076cc:	e000      	b.n	80076d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80076ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a46      	ldr	r2, [pc, #280]	@ (8007818 <TIM_Base_SetConfig+0x12c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770a:	d00f      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a43      	ldr	r2, [pc, #268]	@ (800781c <TIM_Base_SetConfig+0x130>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a42      	ldr	r2, [pc, #264]	@ (8007820 <TIM_Base_SetConfig+0x134>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a41      	ldr	r2, [pc, #260]	@ (8007824 <TIM_Base_SetConfig+0x138>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a40      	ldr	r2, [pc, #256]	@ (8007828 <TIM_Base_SetConfig+0x13c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d108      	bne.n	800773e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a35      	ldr	r2, [pc, #212]	@ (8007818 <TIM_Base_SetConfig+0x12c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01f      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800774c:	d01b      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a32      	ldr	r2, [pc, #200]	@ (800781c <TIM_Base_SetConfig+0x130>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d017      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a31      	ldr	r2, [pc, #196]	@ (8007820 <TIM_Base_SetConfig+0x134>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a30      	ldr	r2, [pc, #192]	@ (8007824 <TIM_Base_SetConfig+0x138>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d00f      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2f      	ldr	r2, [pc, #188]	@ (8007828 <TIM_Base_SetConfig+0x13c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00b      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2e      	ldr	r2, [pc, #184]	@ (800782c <TIM_Base_SetConfig+0x140>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2d      	ldr	r2, [pc, #180]	@ (8007830 <TIM_Base_SetConfig+0x144>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d003      	beq.n	8007786 <TIM_Base_SetConfig+0x9a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a2c      	ldr	r2, [pc, #176]	@ (8007834 <TIM_Base_SetConfig+0x148>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d108      	bne.n	8007798 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800778c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a16      	ldr	r2, [pc, #88]	@ (8007818 <TIM_Base_SetConfig+0x12c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00f      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a18      	ldr	r2, [pc, #96]	@ (8007828 <TIM_Base_SetConfig+0x13c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a17      	ldr	r2, [pc, #92]	@ (800782c <TIM_Base_SetConfig+0x140>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d007      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a16      	ldr	r2, [pc, #88]	@ (8007830 <TIM_Base_SetConfig+0x144>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_Base_SetConfig+0xf8>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a15      	ldr	r2, [pc, #84]	@ (8007834 <TIM_Base_SetConfig+0x148>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d103      	bne.n	80077ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d105      	bne.n	800780a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f023 0201 	bic.w	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	611a      	str	r2, [r3, #16]
  }
}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	40012c00 	.word	0x40012c00
 800781c:	40000400 	.word	0x40000400
 8007820:	40000800 	.word	0x40000800
 8007824:	40000c00 	.word	0x40000c00
 8007828:	40013400 	.word	0x40013400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800

08007838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 030a 	bic.w	r3, r3, #10
 8007874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	621a      	str	r2, [r3, #32]
}
 800788a:	bf00      	nop
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007896:	b480      	push	{r7}
 8007898:	b087      	sub	sp, #28
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	f023 0210 	bic.w	r2, r3, #16
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	031b      	lsls	r3, r3, #12
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800790c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4313      	orrs	r3, r2
 8007914:	f043 0307 	orr.w	r3, r3, #7
 8007918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	609a      	str	r2, [r3, #8]
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	021a      	lsls	r2, r3, #8
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	431a      	orrs	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4313      	orrs	r3, r2
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	609a      	str	r2, [r3, #8]
}
 8007960:	bf00      	nop
 8007962:	371c      	adds	r7, #28
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007980:	2302      	movs	r3, #2
 8007982:	e068      	b.n	8007a56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d108      	bne.n	80079ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80079be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01d      	beq.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f6:	d018      	beq.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1a      	ldr	r2, [pc, #104]	@ (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d00e      	beq.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a18      	ldr	r2, [pc, #96]	@ (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d009      	beq.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a13      	ldr	r2, [pc, #76]	@ (8007a68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d004      	beq.n	8007a2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a14      	ldr	r2, [pc, #80]	@ (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d10c      	bne.n	8007a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	40012c00 	.word	0x40012c00
 8007a68:	40013400 	.word	0x40013400
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40014000 	.word	0x40014000

08007a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e042      	b.n	8007b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7fa fa39 	bl	8001f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2224      	movs	r2, #36	@ 0x24
 8007aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fe86 	bl	80087d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb87 	bl	80081e0 <UART_SetConfig>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e01b      	b.n	8007b14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 ff05 	bl	800891c <UART_CheckIdleState>
 8007b12:	4603      	mov	r3, r0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b0ba      	sub	sp, #232	@ 0xe8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	69db      	ldr	r3, [r3, #28]
 8007b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007b46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d11b      	bne.n	8007b90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d015      	beq.n	8007b90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d105      	bne.n	8007b7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d009      	beq.n	8007b90 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8300 	beq.w	8008186 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
      }
      return;
 8007b8e:	e2fa      	b.n	8008186 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8123 	beq.w	8007de0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8007dd4 <HAL_UART_IRQHandler+0x2b8>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ba6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007baa:	4b8b      	ldr	r3, [pc, #556]	@ (8007dd8 <HAL_UART_IRQHandler+0x2bc>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8116 	beq.w	8007de0 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d011      	beq.n	8007be4 <HAL_UART_IRQHandler+0xc8>
 8007bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00b      	beq.n	8007be4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bda:	f043 0201 	orr.w	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d011      	beq.n	8007c14 <HAL_UART_IRQHandler+0xf8>
 8007bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2202      	movs	r2, #2
 8007c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0a:	f043 0204 	orr.w	r2, r3, #4
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d011      	beq.n	8007c44 <HAL_UART_IRQHandler+0x128>
 8007c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2204      	movs	r2, #4
 8007c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3a:	f043 0202 	orr.w	r2, r3, #2
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d017      	beq.n	8007c80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d105      	bne.n	8007c68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c60:	4b5c      	ldr	r3, [pc, #368]	@ (8007dd4 <HAL_UART_IRQHandler+0x2b8>)
 8007c62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c76:	f043 0208 	orr.w	r2, r3, #8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d012      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x196>
 8007c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00c      	beq.n	8007cb2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca8:	f043 0220 	orr.w	r2, r3, #32
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 8266 	beq.w	800818a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d013      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d06:	2b40      	cmp	r3, #64	@ 0x40
 8007d08:	d005      	beq.n	8007d16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d054      	beq.n	8007dc0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 ff17 	bl	8008b4a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d26:	2b40      	cmp	r3, #64	@ 0x40
 8007d28:	d146      	bne.n	8007db8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3308      	adds	r3, #8
 8007d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d9      	bne.n	8007d2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d017      	beq.n	8007db0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d86:	4a15      	ldr	r2, [pc, #84]	@ (8007ddc <HAL_UART_IRQHandler+0x2c0>)
 8007d88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fa fcd5 	bl	8002740 <HAL_DMA_Abort_IT>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d019      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007daa:	4610      	mov	r0, r2
 8007dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dae:	e00f      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f9ff 	bl	80081b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db6:	e00b      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f9fb 	bl	80081b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dbe:	e007      	b.n	8007dd0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f9f7 	bl	80081b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007dce:	e1dc      	b.n	800818a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	bf00      	nop
    return;
 8007dd2:	e1da      	b.n	800818a <HAL_UART_IRQHandler+0x66e>
 8007dd4:	10000001 	.word	0x10000001
 8007dd8:	04000120 	.word	0x04000120
 8007ddc:	08008c17 	.word	0x08008c17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	f040 8170 	bne.w	80080ca <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 8169 	beq.w	80080ca <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8162 	beq.w	80080ca <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e18:	2b40      	cmp	r3, #64	@ 0x40
 8007e1a:	f040 80d8 	bne.w	8007fce <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80af 	beq.w	8007f94 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e40:	429a      	cmp	r2, r3
 8007e42:	f080 80a7 	bcs.w	8007f94 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f040 8087 	bne.w	8007f72 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e92:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1da      	bne.n	8007e64 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ebe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3308      	adds	r3, #8
 8007ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ed2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ed6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ee4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e1      	bne.n	8007eae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e3      	bne.n	8007eea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f40:	f023 0310 	bic.w	r3, r3, #16
 8007f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e4      	bne.n	8007f30 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fa fb8b 	bl	8002688 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f91b 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007f92:	e0fc      	b.n	800818e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	f040 80f5 	bne.w	800818e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	f040 80eb 	bne.w	800818e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f8fe 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
      return;
 8007fcc:	e0df      	b.n	800818e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 80d1 	beq.w	8008192 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80cc 	beq.w	8008192 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800800e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800801c:	647b      	str	r3, [r7, #68]	@ 0x44
 800801e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800802a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e4      	bne.n	8007ffa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3308      	adds	r3, #8
 8008036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	623b      	str	r3, [r7, #32]
   return(result);
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008046:	f023 0301 	bic.w	r3, r3, #1
 800804a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008058:	633a      	str	r2, [r7, #48]	@ 0x30
 800805a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800805e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e1      	bne.n	8008030 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	60fb      	str	r3, [r7, #12]
   return(result);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f023 0310 	bic.w	r3, r3, #16
 8008094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	69b9      	ldr	r1, [r7, #24]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	617b      	str	r3, [r7, #20]
   return(result);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e4      	bne.n	8008080 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2202      	movs	r2, #2
 80080ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f880 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080c8:	e063      	b.n	8008192 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00e      	beq.n	80080f4 <HAL_UART_IRQHandler+0x5d8>
 80080d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80080ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fdd3 	bl	8008c98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f2:	e051      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d014      	beq.n	800812a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008108:	2b00      	cmp	r3, #0
 800810a:	d105      	bne.n	8008118 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800810c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800811c:	2b00      	cmp	r3, #0
 800811e:	d03a      	beq.n	8008196 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
    }
    return;
 8008128:	e035      	b.n	8008196 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800812a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800812e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <HAL_UART_IRQHandler+0x62e>
 8008136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800813a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fd7d 	bl	8008c42 <UART_EndTransmit_IT>
    return;
 8008148:	e026      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800814a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <HAL_UART_IRQHandler+0x64e>
 8008156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800815a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fdac 	bl	8008cc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008168:	e016      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800816a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800816e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d010      	beq.n	8008198 <HAL_UART_IRQHandler+0x67c>
 8008176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800817a:	2b00      	cmp	r3, #0
 800817c:	da0c      	bge.n	8008198 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fd94 	bl	8008cac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008184:	e008      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
      return;
 8008186:	bf00      	nop
 8008188:	e006      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
    return;
 800818a:	bf00      	nop
 800818c:	e004      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
      return;
 800818e:	bf00      	nop
 8008190:	e002      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
      return;
 8008192:	bf00      	nop
 8008194:	e000      	b.n	8008198 <HAL_UART_IRQHandler+0x67c>
    return;
 8008196:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008198:	37e8      	adds	r7, #232	@ 0xe8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop

080081a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e4:	b08c      	sub	sp, #48	@ 0x30
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	431a      	orrs	r2, r3
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	431a      	orrs	r2, r3
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	4313      	orrs	r3, r2
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	4baa      	ldr	r3, [pc, #680]	@ (80084b8 <UART_SetConfig+0x2d8>)
 8008210:	4013      	ands	r3, r2
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008218:	430b      	orrs	r3, r1
 800821a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a9f      	ldr	r2, [pc, #636]	@ (80084bc <UART_SetConfig+0x2dc>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008248:	4313      	orrs	r3, r2
 800824a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008256:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	6812      	ldr	r2, [r2, #0]
 800825e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008260:	430b      	orrs	r3, r1
 8008262:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826a:	f023 010f 	bic.w	r1, r3, #15
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a90      	ldr	r2, [pc, #576]	@ (80084c0 <UART_SetConfig+0x2e0>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d125      	bne.n	80082d0 <UART_SetConfig+0xf0>
 8008284:	4b8f      	ldr	r3, [pc, #572]	@ (80084c4 <UART_SetConfig+0x2e4>)
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b03      	cmp	r3, #3
 8008290:	d81a      	bhi.n	80082c8 <UART_SetConfig+0xe8>
 8008292:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <UART_SetConfig+0xb8>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082c1 	.word	0x080082c1
 80082a8:	2301      	movs	r3, #1
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ae:	e116      	b.n	80084de <UART_SetConfig+0x2fe>
 80082b0:	2302      	movs	r3, #2
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b6:	e112      	b.n	80084de <UART_SetConfig+0x2fe>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082be:	e10e      	b.n	80084de <UART_SetConfig+0x2fe>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c6:	e10a      	b.n	80084de <UART_SetConfig+0x2fe>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ce:	e106      	b.n	80084de <UART_SetConfig+0x2fe>
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a7c      	ldr	r2, [pc, #496]	@ (80084c8 <UART_SetConfig+0x2e8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d138      	bne.n	800834c <UART_SetConfig+0x16c>
 80082da:	4b7a      	ldr	r3, [pc, #488]	@ (80084c4 <UART_SetConfig+0x2e4>)
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e0:	f003 030c 	and.w	r3, r3, #12
 80082e4:	2b0c      	cmp	r3, #12
 80082e6:	d82d      	bhi.n	8008344 <UART_SetConfig+0x164>
 80082e8:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <UART_SetConfig+0x110>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008325 	.word	0x08008325
 80082f4:	08008345 	.word	0x08008345
 80082f8:	08008345 	.word	0x08008345
 80082fc:	08008345 	.word	0x08008345
 8008300:	08008335 	.word	0x08008335
 8008304:	08008345 	.word	0x08008345
 8008308:	08008345 	.word	0x08008345
 800830c:	08008345 	.word	0x08008345
 8008310:	0800832d 	.word	0x0800832d
 8008314:	08008345 	.word	0x08008345
 8008318:	08008345 	.word	0x08008345
 800831c:	08008345 	.word	0x08008345
 8008320:	0800833d 	.word	0x0800833d
 8008324:	2300      	movs	r3, #0
 8008326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800832a:	e0d8      	b.n	80084de <UART_SetConfig+0x2fe>
 800832c:	2302      	movs	r3, #2
 800832e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008332:	e0d4      	b.n	80084de <UART_SetConfig+0x2fe>
 8008334:	2304      	movs	r3, #4
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833a:	e0d0      	b.n	80084de <UART_SetConfig+0x2fe>
 800833c:	2308      	movs	r3, #8
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008342:	e0cc      	b.n	80084de <UART_SetConfig+0x2fe>
 8008344:	2310      	movs	r3, #16
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834a:	e0c8      	b.n	80084de <UART_SetConfig+0x2fe>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a5e      	ldr	r2, [pc, #376]	@ (80084cc <UART_SetConfig+0x2ec>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d125      	bne.n	80083a2 <UART_SetConfig+0x1c2>
 8008356:	4b5b      	ldr	r3, [pc, #364]	@ (80084c4 <UART_SetConfig+0x2e4>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800835c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008360:	2b30      	cmp	r3, #48	@ 0x30
 8008362:	d016      	beq.n	8008392 <UART_SetConfig+0x1b2>
 8008364:	2b30      	cmp	r3, #48	@ 0x30
 8008366:	d818      	bhi.n	800839a <UART_SetConfig+0x1ba>
 8008368:	2b20      	cmp	r3, #32
 800836a:	d00a      	beq.n	8008382 <UART_SetConfig+0x1a2>
 800836c:	2b20      	cmp	r3, #32
 800836e:	d814      	bhi.n	800839a <UART_SetConfig+0x1ba>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <UART_SetConfig+0x19a>
 8008374:	2b10      	cmp	r3, #16
 8008376:	d008      	beq.n	800838a <UART_SetConfig+0x1aa>
 8008378:	e00f      	b.n	800839a <UART_SetConfig+0x1ba>
 800837a:	2300      	movs	r3, #0
 800837c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008380:	e0ad      	b.n	80084de <UART_SetConfig+0x2fe>
 8008382:	2302      	movs	r3, #2
 8008384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008388:	e0a9      	b.n	80084de <UART_SetConfig+0x2fe>
 800838a:	2304      	movs	r3, #4
 800838c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008390:	e0a5      	b.n	80084de <UART_SetConfig+0x2fe>
 8008392:	2308      	movs	r3, #8
 8008394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008398:	e0a1      	b.n	80084de <UART_SetConfig+0x2fe>
 800839a:	2310      	movs	r3, #16
 800839c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a0:	e09d      	b.n	80084de <UART_SetConfig+0x2fe>
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a4a      	ldr	r2, [pc, #296]	@ (80084d0 <UART_SetConfig+0x2f0>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d125      	bne.n	80083f8 <UART_SetConfig+0x218>
 80083ac:	4b45      	ldr	r3, [pc, #276]	@ (80084c4 <UART_SetConfig+0x2e4>)
 80083ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80083b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b8:	d016      	beq.n	80083e8 <UART_SetConfig+0x208>
 80083ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80083bc:	d818      	bhi.n	80083f0 <UART_SetConfig+0x210>
 80083be:	2b80      	cmp	r3, #128	@ 0x80
 80083c0:	d00a      	beq.n	80083d8 <UART_SetConfig+0x1f8>
 80083c2:	2b80      	cmp	r3, #128	@ 0x80
 80083c4:	d814      	bhi.n	80083f0 <UART_SetConfig+0x210>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <UART_SetConfig+0x1f0>
 80083ca:	2b40      	cmp	r3, #64	@ 0x40
 80083cc:	d008      	beq.n	80083e0 <UART_SetConfig+0x200>
 80083ce:	e00f      	b.n	80083f0 <UART_SetConfig+0x210>
 80083d0:	2300      	movs	r3, #0
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e082      	b.n	80084de <UART_SetConfig+0x2fe>
 80083d8:	2302      	movs	r3, #2
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083de:	e07e      	b.n	80084de <UART_SetConfig+0x2fe>
 80083e0:	2304      	movs	r3, #4
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e07a      	b.n	80084de <UART_SetConfig+0x2fe>
 80083e8:	2308      	movs	r3, #8
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ee:	e076      	b.n	80084de <UART_SetConfig+0x2fe>
 80083f0:	2310      	movs	r3, #16
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f6:	e072      	b.n	80084de <UART_SetConfig+0x2fe>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a35      	ldr	r2, [pc, #212]	@ (80084d4 <UART_SetConfig+0x2f4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d12a      	bne.n	8008458 <UART_SetConfig+0x278>
 8008402:	4b30      	ldr	r3, [pc, #192]	@ (80084c4 <UART_SetConfig+0x2e4>)
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800840c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008410:	d01a      	beq.n	8008448 <UART_SetConfig+0x268>
 8008412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008416:	d81b      	bhi.n	8008450 <UART_SetConfig+0x270>
 8008418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841c:	d00c      	beq.n	8008438 <UART_SetConfig+0x258>
 800841e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008422:	d815      	bhi.n	8008450 <UART_SetConfig+0x270>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <UART_SetConfig+0x250>
 8008428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800842c:	d008      	beq.n	8008440 <UART_SetConfig+0x260>
 800842e:	e00f      	b.n	8008450 <UART_SetConfig+0x270>
 8008430:	2300      	movs	r3, #0
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008436:	e052      	b.n	80084de <UART_SetConfig+0x2fe>
 8008438:	2302      	movs	r3, #2
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843e:	e04e      	b.n	80084de <UART_SetConfig+0x2fe>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008446:	e04a      	b.n	80084de <UART_SetConfig+0x2fe>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844e:	e046      	b.n	80084de <UART_SetConfig+0x2fe>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008456:	e042      	b.n	80084de <UART_SetConfig+0x2fe>
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a17      	ldr	r2, [pc, #92]	@ (80084bc <UART_SetConfig+0x2dc>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d13a      	bne.n	80084d8 <UART_SetConfig+0x2f8>
 8008462:	4b18      	ldr	r3, [pc, #96]	@ (80084c4 <UART_SetConfig+0x2e4>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008468:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800846c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008470:	d01a      	beq.n	80084a8 <UART_SetConfig+0x2c8>
 8008472:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008476:	d81b      	bhi.n	80084b0 <UART_SetConfig+0x2d0>
 8008478:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800847c:	d00c      	beq.n	8008498 <UART_SetConfig+0x2b8>
 800847e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008482:	d815      	bhi.n	80084b0 <UART_SetConfig+0x2d0>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <UART_SetConfig+0x2b0>
 8008488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800848c:	d008      	beq.n	80084a0 <UART_SetConfig+0x2c0>
 800848e:	e00f      	b.n	80084b0 <UART_SetConfig+0x2d0>
 8008490:	2300      	movs	r3, #0
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008496:	e022      	b.n	80084de <UART_SetConfig+0x2fe>
 8008498:	2302      	movs	r3, #2
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800849e:	e01e      	b.n	80084de <UART_SetConfig+0x2fe>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a6:	e01a      	b.n	80084de <UART_SetConfig+0x2fe>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ae:	e016      	b.n	80084de <UART_SetConfig+0x2fe>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084b6:	e012      	b.n	80084de <UART_SetConfig+0x2fe>
 80084b8:	cfff69f3 	.word	0xcfff69f3
 80084bc:	40008000 	.word	0x40008000
 80084c0:	40013800 	.word	0x40013800
 80084c4:	40021000 	.word	0x40021000
 80084c8:	40004400 	.word	0x40004400
 80084cc:	40004800 	.word	0x40004800
 80084d0:	40004c00 	.word	0x40004c00
 80084d4:	40005000 	.word	0x40005000
 80084d8:	2310      	movs	r3, #16
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4aae      	ldr	r2, [pc, #696]	@ (800879c <UART_SetConfig+0x5bc>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	f040 8097 	bne.w	8008618 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d823      	bhi.n	800853a <UART_SetConfig+0x35a>
 80084f2:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <UART_SetConfig+0x318>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	0800853b 	.word	0x0800853b
 8008500:	08008525 	.word	0x08008525
 8008504:	0800853b 	.word	0x0800853b
 8008508:	0800852b 	.word	0x0800852b
 800850c:	0800853b 	.word	0x0800853b
 8008510:	0800853b 	.word	0x0800853b
 8008514:	0800853b 	.word	0x0800853b
 8008518:	08008533 	.word	0x08008533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800851c:	f7fb f9f0 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8008520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008522:	e010      	b.n	8008546 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008524:	4b9e      	ldr	r3, [pc, #632]	@ (80087a0 <UART_SetConfig+0x5c0>)
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008528:	e00d      	b.n	8008546 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800852a:	f7fb f953 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800852e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008530:	e009      	b.n	8008546 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008538:	e005      	b.n	8008546 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008544:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 8130 	beq.w	80087ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008552:	4a94      	ldr	r2, [pc, #592]	@ (80087a4 <UART_SetConfig+0x5c4>)
 8008554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008558:	461a      	mov	r2, r3
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008560:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	4413      	add	r3, r2
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	429a      	cmp	r2, r3
 8008570:	d305      	bcc.n	800857e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	429a      	cmp	r2, r3
 800857c:	d903      	bls.n	8008586 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008584:	e113      	b.n	80087ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	2200      	movs	r2, #0
 800858a:	60bb      	str	r3, [r7, #8]
 800858c:	60fa      	str	r2, [r7, #12]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	4a84      	ldr	r2, [pc, #528]	@ (80087a4 <UART_SetConfig+0x5c4>)
 8008594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008598:	b29b      	uxth	r3, r3
 800859a:	2200      	movs	r2, #0
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085a8:	f7f8 fb50 	bl	8000c4c <__aeabi_uldivmod>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4610      	mov	r0, r2
 80085b2:	4619      	mov	r1, r3
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	020b      	lsls	r3, r1, #8
 80085be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085c2:	0202      	lsls	r2, r0, #8
 80085c4:	6979      	ldr	r1, [r7, #20]
 80085c6:	6849      	ldr	r1, [r1, #4]
 80085c8:	0849      	lsrs	r1, r1, #1
 80085ca:	2000      	movs	r0, #0
 80085cc:	460c      	mov	r4, r1
 80085ce:	4605      	mov	r5, r0
 80085d0:	eb12 0804 	adds.w	r8, r2, r4
 80085d4:	eb43 0905 	adc.w	r9, r3, r5
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	469a      	mov	sl, r3
 80085e0:	4693      	mov	fp, r2
 80085e2:	4652      	mov	r2, sl
 80085e4:	465b      	mov	r3, fp
 80085e6:	4640      	mov	r0, r8
 80085e8:	4649      	mov	r1, r9
 80085ea:	f7f8 fb2f 	bl	8000c4c <__aeabi_uldivmod>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4613      	mov	r3, r2
 80085f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085fc:	d308      	bcc.n	8008610 <UART_SetConfig+0x430>
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008604:	d204      	bcs.n	8008610 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6a3a      	ldr	r2, [r7, #32]
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	e0ce      	b.n	80087ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008616:	e0ca      	b.n	80087ae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	69db      	ldr	r3, [r3, #28]
 800861c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008620:	d166      	bne.n	80086f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008622:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008626:	2b08      	cmp	r3, #8
 8008628:	d827      	bhi.n	800867a <UART_SetConfig+0x49a>
 800862a:	a201      	add	r2, pc, #4	@ (adr r2, 8008630 <UART_SetConfig+0x450>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008655 	.word	0x08008655
 8008634:	0800865d 	.word	0x0800865d
 8008638:	08008665 	.word	0x08008665
 800863c:	0800867b 	.word	0x0800867b
 8008640:	0800866b 	.word	0x0800866b
 8008644:	0800867b 	.word	0x0800867b
 8008648:	0800867b 	.word	0x0800867b
 800864c:	0800867b 	.word	0x0800867b
 8008650:	08008673 	.word	0x08008673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008654:	f7fb f954 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8008658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800865a:	e014      	b.n	8008686 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800865c:	f7fb f966 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8008660:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008662:	e010      	b.n	8008686 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008664:	4b4e      	ldr	r3, [pc, #312]	@ (80087a0 <UART_SetConfig+0x5c0>)
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008668:	e00d      	b.n	8008686 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800866a:	f7fb f8b3 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800866e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008670:	e009      	b.n	8008686 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008678:	e005      	b.n	8008686 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008684:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8090 	beq.w	80087ae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008692:	4a44      	ldr	r2, [pc, #272]	@ (80087a4 <UART_SetConfig+0x5c4>)
 8008694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008698:	461a      	mov	r2, r3
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a0:	005a      	lsls	r2, r3, #1
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	085b      	lsrs	r3, r3, #1
 80086a8:	441a      	add	r2, r3
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	2b0f      	cmp	r3, #15
 80086b8:	d916      	bls.n	80086e8 <UART_SetConfig+0x508>
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c0:	d212      	bcs.n	80086e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	f023 030f 	bic.w	r3, r3, #15
 80086ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	085b      	lsrs	r3, r3, #1
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	8bfb      	ldrh	r3, [r7, #30]
 80086da:	4313      	orrs	r3, r2
 80086dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	8bfa      	ldrh	r2, [r7, #30]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	e062      	b.n	80087ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086ee:	e05e      	b.n	80087ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d828      	bhi.n	800874a <UART_SetConfig+0x56a>
 80086f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <UART_SetConfig+0x520>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008725 	.word	0x08008725
 8008704:	0800872d 	.word	0x0800872d
 8008708:	08008735 	.word	0x08008735
 800870c:	0800874b 	.word	0x0800874b
 8008710:	0800873b 	.word	0x0800873b
 8008714:	0800874b 	.word	0x0800874b
 8008718:	0800874b 	.word	0x0800874b
 800871c:	0800874b 	.word	0x0800874b
 8008720:	08008743 	.word	0x08008743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008724:	f7fb f8ec 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8008728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800872a:	e014      	b.n	8008756 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800872c:	f7fb f8fe 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8008730:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008732:	e010      	b.n	8008756 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008734:	4b1a      	ldr	r3, [pc, #104]	@ (80087a0 <UART_SetConfig+0x5c0>)
 8008736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008738:	e00d      	b.n	8008756 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800873a:	f7fb f84b 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800873e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008740:	e009      	b.n	8008756 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008746:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008748:	e005      	b.n	8008756 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008754:	bf00      	nop
    }

    if (pclk != 0U)
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	d028      	beq.n	80087ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008760:	4a10      	ldr	r2, [pc, #64]	@ (80087a4 <UART_SetConfig+0x5c4>)
 8008762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008766:	461a      	mov	r2, r3
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	fbb3 f2f2 	udiv	r2, r3, r2
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	441a      	add	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	fbb2 f3f3 	udiv	r3, r2, r3
 800877e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	2b0f      	cmp	r3, #15
 8008784:	d910      	bls.n	80087a8 <UART_SetConfig+0x5c8>
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800878c:	d20c      	bcs.n	80087a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	b29a      	uxth	r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60da      	str	r2, [r3, #12]
 8008798:	e009      	b.n	80087ae <UART_SetConfig+0x5ce>
 800879a:	bf00      	nop
 800879c:	40008000 	.word	0x40008000
 80087a0:	00f42400 	.word	0x00f42400
 80087a4:	0800f524 	.word	0x0800f524
      }
      else
      {
        ret = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2200      	movs	r2, #0
 80087c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2200      	movs	r2, #0
 80087c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3730      	adds	r7, #48	@ 0x30
 80087d2:	46bd      	mov	sp, r7
 80087d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800886c:	f003 0310 	and.w	r3, r3, #16
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01a      	beq.n	80088ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088d6:	d10a      	bne.n	80088ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	605a      	str	r2, [r3, #4]
  }
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b098      	sub	sp, #96	@ 0x60
 8008920:	af02      	add	r7, sp, #8
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800892c:	f7f9 fc78 	bl	8002220 <HAL_GetTick>
 8008930:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0308 	and.w	r3, r3, #8
 800893c:	2b08      	cmp	r3, #8
 800893e:	d12f      	bne.n	80089a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008940:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008948:	2200      	movs	r2, #0
 800894a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f88e 	bl	8008a70 <UART_WaitOnFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d022      	beq.n	80089a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800896a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800896e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008978:	647b      	str	r3, [r7, #68]	@ 0x44
 800897a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800897e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e6      	bne.n	800895a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2220      	movs	r2, #32
 8008990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e063      	b.n	8008a68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	d149      	bne.n	8008a42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089b6:	2200      	movs	r2, #0
 80089b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f857 	bl	8008a70 <UART_WaitOnFlagUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d03c      	beq.n	8008a42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	623b      	str	r3, [r7, #32]
   return(result);
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80089e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e6      	bne.n	80089c8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3308      	adds	r3, #8
 8008a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f023 0301 	bic.w	r3, r3, #1
 8008a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3308      	adds	r3, #8
 8008a18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a1a:	61fa      	str	r2, [r7, #28]
 8008a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	69b9      	ldr	r1, [r7, #24]
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	617b      	str	r3, [r7, #20]
   return(result);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e5      	bne.n	80089fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2220      	movs	r2, #32
 8008a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e012      	b.n	8008a68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3758      	adds	r7, #88	@ 0x58
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a80:	e04f      	b.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a88:	d04b      	beq.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8a:	f7f9 fbc9 	bl	8002220 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d302      	bcc.n	8008aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e04e      	b.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d037      	beq.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b80      	cmp	r3, #128	@ 0x80
 8008ab6:	d034      	beq.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b40      	cmp	r3, #64	@ 0x40
 8008abc:	d031      	beq.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d110      	bne.n	8008aee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2208      	movs	r2, #8
 8008ad2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 f838 	bl	8008b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2208      	movs	r2, #8
 8008ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e029      	b.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008afc:	d111      	bne.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f81e 	bl	8008b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e00f      	b.n	8008b42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	bf0c      	ite	eq
 8008b32:	2301      	moveq	r3, #1
 8008b34:	2300      	movne	r3, #0
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	79fb      	ldrb	r3, [r7, #7]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d0a0      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b095      	sub	sp, #84	@ 0x54
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e6      	bne.n	8008b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3308      	adds	r3, #8
 8008b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b9a:	f023 0301 	bic.w	r3, r3, #1
 8008b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e3      	bne.n	8008b84 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d118      	bne.n	8008bf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f023 0310 	bic.w	r3, r3, #16
 8008bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6979      	ldr	r1, [r7, #20]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e6      	bne.n	8008bc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c0a:	bf00      	nop
 8008c0c:	3754      	adds	r7, #84	@ 0x54
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7ff fabd 	bl	80081b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b088      	sub	sp, #32
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6979      	ldr	r1, [r7, #20]
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	613b      	str	r3, [r7, #16]
   return(result);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e6      	bne.n	8008c4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff fa88 	bl	80081a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c90:	bf00      	nop
 8008c92:	3720      	adds	r7, #32
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d101      	bne.n	8008cea <HAL_UARTEx_DisableFifoMode+0x16>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e027      	b.n	8008d3a <HAL_UARTEx_DisableFifoMode+0x66>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2224      	movs	r2, #36	@ 0x24
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 0201 	bic.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e02d      	b.n	8008dba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2224      	movs	r2, #36	@ 0x24
 8008d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 0201 	bic.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f850 	bl	8008e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d101      	bne.n	8008dda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e02d      	b.n	8008e36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2224      	movs	r2, #36	@ 0x24
 8008de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0201 	bic.w	r2, r2, #1
 8008e00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f812 	bl	8008e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d108      	bne.n	8008e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e60:	e031      	b.n	8008ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e62:	2308      	movs	r3, #8
 8008e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e66:	2308      	movs	r3, #8
 8008e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	0e5b      	lsrs	r3, r3, #25
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	0f5b      	lsrs	r3, r3, #29
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	7b3a      	ldrb	r2, [r7, #12]
 8008e8e:	4911      	ldr	r1, [pc, #68]	@ (8008ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8008e90:	5c8a      	ldrb	r2, [r1, r2]
 8008e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e96:	7b3a      	ldrb	r2, [r7, #12]
 8008e98:	490f      	ldr	r1, [pc, #60]	@ (8008ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8008e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	7b7a      	ldrb	r2, [r7, #13]
 8008eac:	4909      	ldr	r1, [pc, #36]	@ (8008ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8008eae:	5c8a      	ldrb	r2, [r1, r2]
 8008eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008eb4:	7b7a      	ldrb	r2, [r7, #13]
 8008eb6:	4908      	ldr	r1, [pc, #32]	@ (8008ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8008eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	0800f53c 	.word	0x0800f53c
 8008ed8:	0800f544 	.word	0x0800f544

08008edc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008edc:	b084      	sub	sp, #16
 8008ede:	b480      	push	{r7}
 8008ee0:	b085      	sub	sp, #20
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	f107 001c 	add.w	r0, r7, #28
 8008eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008ef2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008ef6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      |\
 8008efa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             |\
 8008efe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl |\
 8008f02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <SDMMC_Init+0x50>)
 8008f10:	4013      	ands	r3, r2
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	b004      	add	sp, #16
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	ffc02c00 	.word	0xffc02c00

08008f30 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f043 0203 	orr.w	r2, r3, #3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008f80:	2002      	movs	r0, #2
 8008f82:	f7f9 f959 	bl	8002238 <HAL_Delay>

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0303 	and.w	r3, r3, #3
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008fd0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008fd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	4b06      	ldr	r3, [pc, #24]	@ (8008ffc <SDMMC_SendCommand+0x50>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	fffee0c0 	.word	0xfffee0c0

08009000 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	b2db      	uxtb	r3, r3
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800901a:	b480      	push	{r7}
 800901c:	b085      	sub	sp, #20
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3314      	adds	r3, #20
 8009028:	461a      	mov	r2, r3
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	4413      	add	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009066:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800906c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009072:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800908a:	2300      	movs	r3, #0

}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80090a6:	2310      	movs	r3, #16
 80090a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090ba:	f107 0308 	add.w	r3, r7, #8
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff ff73 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80090c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090ca:	2110      	movs	r1, #16
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa7b 	bl	80095c8 <SDMMC_GetCmdResp1>
 80090d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d4:	69fb      	ldr	r3, [r7, #28]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b088      	sub	sp, #32
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090ec:	2311      	movs	r3, #17
 80090ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009100:	f107 0308 	add.w	r3, r7, #8
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff ff50 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800910c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009110:	2111      	movs	r1, #17
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa58 	bl	80095c8 <SDMMC_GetCmdResp1>
 8009118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800911a:	69fb      	ldr	r3, [r7, #28]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009132:	2312      	movs	r3, #18
 8009134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800913a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009146:	f107 0308 	add.w	r3, r7, #8
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f7ff ff2d 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009156:	2112      	movs	r1, #18
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fa35 	bl	80095c8 <SDMMC_GetCmdResp1>
 800915e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009160:	69fb      	ldr	r3, [r7, #28]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3720      	adds	r7, #32
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b088      	sub	sp, #32
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009178:	2318      	movs	r3, #24
 800917a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800917c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009186:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800918a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800918c:	f107 0308 	add.w	r3, r7, #8
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7ff ff0a 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800919c:	2118      	movs	r1, #24
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fa12 	bl	80095c8 <SDMMC_GetCmdResp1>
 80091a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091be:	2319      	movs	r3, #25
 80091c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80091d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091d2:	f107 0308 	add.w	r3, r7, #8
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff fee7 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80091de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091e2:	2119      	movs	r1, #25
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f9ef 	bl	80095c8 <SDMMC_GetCmdResp1>
 80091ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ec:	69fb      	ldr	r3, [r7, #28]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009204:	230c      	movs	r3, #12
 8009206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009208:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800920c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009212:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009216:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009230:	f107 0308 	add.w	r3, r7, #8
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7ff feb8 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800923c:	4a08      	ldr	r2, [pc, #32]	@ (8009260 <SDMMC_CmdStopTransfer+0x68>)
 800923e:	210c      	movs	r1, #12
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f9c1 	bl	80095c8 <SDMMC_GetCmdResp1>
 8009246:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009254:	69fb      	ldr	r3, [r7, #28]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3720      	adds	r7, #32
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	05f5e100 	.word	0x05f5e100

08009264 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	@ 0x28
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009274:	2307      	movs	r3, #7
 8009276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800927c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800927e:	2300      	movs	r3, #0
 8009280:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009286:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009288:	f107 0310 	add.w	r3, r7, #16
 800928c:	4619      	mov	r1, r3
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff fe8c 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009298:	2107      	movs	r1, #7
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f000 f994 	bl	80095c8 <SDMMC_GetCmdResp1>
 80092a0:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3728      	adds	r7, #40	@ 0x28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80092c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff fe6b 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fbb8 	bl	8009a4c <SDMMC_GetCmdError>
 80092dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092de:	69fb      	ldr	r3, [r7, #28]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3720      	adds	r7, #32
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80092f0:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80092f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092f6:	2308      	movs	r3, #8
 80092f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800930a:	f107 0308 	add.w	r3, r7, #8
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff fe4b 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fb4a 	bl	80099b0 <SDMMC_GetCmdResp7>
 800931c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800931e:	69fb      	ldr	r3, [r7, #28]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3720      	adds	r7, #32
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009336:	2337      	movs	r3, #55	@ 0x37
 8009338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800933a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800933e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800934a:	f107 0308 	add.w	r3, r7, #8
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff fe2b 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800935a:	2137      	movs	r1, #55	@ 0x37
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f933 	bl	80095c8 <SDMMC_GetCmdResp1>
 8009362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009364:	69fb      	ldr	r3, [r7, #28]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3720      	adds	r7, #32
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b088      	sub	sp, #32
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800937c:	2329      	movs	r3, #41	@ 0x29
 800937e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009386:	2300      	movs	r3, #0
 8009388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800938a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800938e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009390:	f107 0308 	add.w	r3, r7, #8
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fe08 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa4f 	bl	8009840 <SDMMC_GetCmdResp3>
 80093a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a4:	69fb      	ldr	r3, [r7, #28]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80093bc:	2306      	movs	r3, #6
 80093be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80093c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fde8 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80093dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093e0:	2106      	movs	r1, #6
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8f0 	bl	80095c8 <SDMMC_GetCmdResp1>
 80093e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ea:	69fb      	ldr	r3, [r7, #28]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3720      	adds	r7, #32
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009400:	2333      	movs	r3, #51	@ 0x33
 8009402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800940e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009412:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009414:	f107 0308 	add.w	r3, r7, #8
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff fdc6 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009424:	2133      	movs	r1, #51	@ 0x33
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f8ce 	bl	80095c8 <SDMMC_GetCmdResp1>
 800942c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800942e:	69fb      	ldr	r3, [r7, #28]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3720      	adds	r7, #32
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b088      	sub	sp, #32
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009444:	2302      	movs	r3, #2
 8009446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009448:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800944c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009458:	f107 0308 	add.w	r3, r7, #8
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fda4 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f9a1 	bl	80097ac <SDMMC_GetCmdResp2>
 800946a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800946c:	69fb      	ldr	r3, [r7, #28]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3720      	adds	r7, #32
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b088      	sub	sp, #32
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009484:	2309      	movs	r3, #9
 8009486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009488:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800948c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800948e:	2300      	movs	r3, #0
 8009490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fd84 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f981 	bl	80097ac <SDMMC_GetCmdResp2>
 80094aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ac:	69fb      	ldr	r3, [r7, #28]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b088      	sub	sp, #32
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80094c4:	2303      	movs	r3, #3
 80094c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80094cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff fd64 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	2103      	movs	r1, #3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f9e9 	bl	80098c0 <SDMMC_GetCmdResp6>
 80094ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f0:	69fb      	ldr	r3, [r7, #28]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b088      	sub	sp, #32
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009508:	230d      	movs	r3, #13
 800950a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800950c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800951a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800951c:	f107 0308 	add.w	r3, r7, #8
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fd42 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800952c:	210d      	movs	r1, #13
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f84a 	bl	80095c8 <SDMMC_GetCmdResp1>
 8009534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009536:	69fb      	ldr	r3, [r7, #28]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800954c:	230d      	movs	r3, #13
 800954e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009554:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800955a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800955e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fd20 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800956c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009570:	210d      	movs	r1, #13
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f828 	bl	80095c8 <SDMMC_GetCmdResp1>
 8009578:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800957a:	69fb      	ldr	r3, [r7, #28]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3720      	adds	r7, #32
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b088      	sub	sp, #32
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800958c:	2300      	movs	r3, #0
 800958e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009590:	230b      	movs	r3, #11
 8009592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800959e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095a4:	f107 0308 	add.w	r3, r7, #8
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff fcfe 	bl	8008fac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80095b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095b4:	210b      	movs	r1, #11
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f806 	bl	80095c8 <SDMMC_GetCmdResp1>
 80095bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095be:	69fb      	ldr	r3, [r7, #28]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3720      	adds	r7, #32
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	460b      	mov	r3, r1
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80095d6:	4b70      	ldr	r3, [pc, #448]	@ (8009798 <SDMMC_GetCmdResp1+0x1d0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a70      	ldr	r2, [pc, #448]	@ (800979c <SDMMC_GetCmdResp1+0x1d4>)
 80095dc:	fba2 2303 	umull	r2, r3, r2, r3
 80095e0:	0a5a      	lsrs	r2, r3, #9
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	fb02 f303 	mul.w	r3, r2, r3
 80095e8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	1e5a      	subs	r2, r3, #1
 80095ee:	61fa      	str	r2, [r7, #28]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095f8:	e0c9      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fe:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	4b67      	ldr	r3, [pc, #412]	@ (80097a0 <SDMMC_GetCmdResp1+0x1d8>)
 8009604:	4013      	ands	r3, r2
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0ef      	beq.n	80095ea <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1ea      	bne.n	80095ea <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2204      	movs	r2, #4
 8009624:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009626:	2304      	movs	r3, #4
 8009628:	e0b1      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800963c:	2301      	movs	r3, #1
 800963e:	e0a6      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4a58      	ldr	r2, [pc, #352]	@ (80097a4 <SDMMC_GetCmdResp1+0x1dc>)
 8009644:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff fcda 	bl	8009000 <SDMMC_GetCommandResponse>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	4293      	cmp	r3, r2
 8009654:	d001      	beq.n	800965a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009656:	2301      	movs	r3, #1
 8009658:	e099      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800965a:	2100      	movs	r1, #0
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fcdc 	bl	800901a <SDMMC_GetResponse>
 8009662:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	4b50      	ldr	r3, [pc, #320]	@ (80097a8 <SDMMC_GetCmdResp1+0x1e0>)
 8009668:	4013      	ands	r3, r2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800966e:	2300      	movs	r3, #0
 8009670:	e08d      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	da02      	bge.n	800967e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800967c:	e087      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009688:	2340      	movs	r3, #64	@ 0x40
 800968a:	e080      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009696:	2380      	movs	r3, #128	@ 0x80
 8009698:	e079      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80096a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096a8:	e071      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80096b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096b8:	e069      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80096c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096c8:	e061      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80096d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80096d8:	e059      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80096e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096e8:	e051      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d002      	beq.n	80096fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80096f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80096f8:	e049      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009704:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009708:	e041      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009714:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009718:	e039      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009728:	e031      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009734:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009738:	e029      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009744:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009748:	e021      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009754:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009758:	e019      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009764:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009768:	e011      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009774:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009778:	e009      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009784:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009788:	e001      	b.n	800978e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800978a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000000 	.word	0x20000000
 800979c:	10624dd3 	.word	0x10624dd3
 80097a0:	00200045 	.word	0x00200045
 80097a4:	002000c5 	.word	0x002000c5
 80097a8:	fdffe008 	.word	0xfdffe008

080097ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009834 <SDMMC_GetCmdResp2+0x88>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a1f      	ldr	r2, [pc, #124]	@ (8009838 <SDMMC_GetCmdResp2+0x8c>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	0a5b      	lsrs	r3, r3, #9
 80097c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097c4:	fb02 f303 	mul.w	r3, r2, r3
 80097c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1e5a      	subs	r2, r3, #1
 80097ce:	60fa      	str	r2, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80097d8:	e026      	b.n	8009828 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d0ef      	beq.n	80097ca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1ea      	bne.n	80097ca <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d004      	beq.n	800980a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2204      	movs	r2, #4
 8009804:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009806:	2304      	movs	r3, #4
 8009808:	e00e      	b.n	8009828 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d004      	beq.n	8009820 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800981c:	2301      	movs	r3, #1
 800981e:	e003      	b.n	8009828 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a06      	ldr	r2, [pc, #24]	@ (800983c <SDMMC_GetCmdResp2+0x90>)
 8009824:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	20000000 	.word	0x20000000
 8009838:	10624dd3 	.word	0x10624dd3
 800983c:	002000c5 	.word	0x002000c5

08009840 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009848:	4b1a      	ldr	r3, [pc, #104]	@ (80098b4 <SDMMC_GetCmdResp3+0x74>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a1a      	ldr	r2, [pc, #104]	@ (80098b8 <SDMMC_GetCmdResp3+0x78>)
 800984e:	fba2 2303 	umull	r2, r3, r2, r3
 8009852:	0a5b      	lsrs	r3, r3, #9
 8009854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009858:	fb02 f303 	mul.w	r3, r2, r3
 800985c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	1e5a      	subs	r2, r3, #1
 8009862:	60fa      	str	r2, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009868:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800986c:	e01b      	b.n	80098a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009872:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0ef      	beq.n	800985e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1ea      	bne.n	800985e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2204      	movs	r2, #4
 8009898:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800989a:	2304      	movs	r3, #4
 800989c:	e003      	b.n	80098a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a06      	ldr	r2, [pc, #24]	@ (80098bc <SDMMC_GetCmdResp3+0x7c>)
 80098a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	20000000 	.word	0x20000000
 80098b8:	10624dd3 	.word	0x10624dd3
 80098bc:	002000c5 	.word	0x002000c5

080098c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	460b      	mov	r3, r1
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098ce:	4b35      	ldr	r3, [pc, #212]	@ (80099a4 <SDMMC_GetCmdResp6+0xe4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a35      	ldr	r2, [pc, #212]	@ (80099a8 <SDMMC_GetCmdResp6+0xe8>)
 80098d4:	fba2 2303 	umull	r2, r3, r2, r3
 80098d8:	0a5b      	lsrs	r3, r3, #9
 80098da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098de:	fb02 f303 	mul.w	r3, r2, r3
 80098e2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	1e5a      	subs	r2, r3, #1
 80098e8:	61fa      	str	r2, [r7, #28]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80098f2:	e052      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0ef      	beq.n	80098e4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1ea      	bne.n	80098e4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009912:	f003 0304 	and.w	r3, r3, #4
 8009916:	2b00      	cmp	r3, #0
 8009918:	d004      	beq.n	8009924 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2204      	movs	r2, #4
 800991e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009920:	2304      	movs	r3, #4
 8009922:	e03a      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2201      	movs	r2, #1
 8009934:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009936:	2301      	movs	r3, #1
 8009938:	e02f      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fb60 	bl	8009000 <SDMMC_GetCommandResponse>
 8009940:	4603      	mov	r3, r0
 8009942:	461a      	mov	r2, r3
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	4293      	cmp	r3, r2
 8009948:	d001      	beq.n	800994e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800994a:	2301      	movs	r3, #1
 800994c:	e025      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	4a16      	ldr	r2, [pc, #88]	@ (80099ac <SDMMC_GetCmdResp6+0xec>)
 8009952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009954:	2100      	movs	r1, #0
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f7ff fb5f 	bl	800901a <SDMMC_GetResponse>
 800995c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d106      	bne.n	8009976 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	0c1b      	lsrs	r3, r3, #16
 800996c:	b29a      	uxth	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009972:	2300      	movs	r3, #0
 8009974:	e011      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009984:	e009      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009994:	e001      	b.n	800999a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009996:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800999a:	4618      	mov	r0, r3
 800999c:	3720      	adds	r7, #32
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000000 	.word	0x20000000
 80099a8:	10624dd3 	.word	0x10624dd3
 80099ac:	002000c5 	.word	0x002000c5

080099b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80099b8:	4b22      	ldr	r3, [pc, #136]	@ (8009a44 <SDMMC_GetCmdResp7+0x94>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a22      	ldr	r2, [pc, #136]	@ (8009a48 <SDMMC_GetCmdResp7+0x98>)
 80099be:	fba2 2303 	umull	r2, r3, r2, r3
 80099c2:	0a5b      	lsrs	r3, r3, #9
 80099c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099c8:	fb02 f303 	mul.w	r3, r2, r3
 80099cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1e5a      	subs	r2, r3, #1
 80099d2:	60fa      	str	r2, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d102      	bne.n	80099de <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80099dc:	e02c      	b.n	8009a38 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0ef      	beq.n	80099ce <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1ea      	bne.n	80099ce <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d004      	beq.n	8009a0e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2204      	movs	r2, #4
 8009a08:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a0a:	2304      	movs	r3, #4
 8009a0c:	e014      	b.n	8009a38 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d004      	beq.n	8009a24 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e009      	b.n	8009a38 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2240      	movs	r2, #64	@ 0x40
 8009a34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a36:	2300      	movs	r3, #0

}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	20000000 	.word	0x20000000
 8009a48:	10624dd3 	.word	0x10624dd3

08009a4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a54:	4b11      	ldr	r3, [pc, #68]	@ (8009a9c <SDMMC_GetCmdError+0x50>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a11      	ldr	r2, [pc, #68]	@ (8009aa0 <SDMMC_GetCmdError+0x54>)
 8009a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5e:	0a5b      	lsrs	r3, r3, #9
 8009a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
 8009a68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	1e5a      	subs	r2, r3, #1
 8009a6e:	60fa      	str	r2, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009a78:	e009      	b.n	8009a8e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0f1      	beq.n	8009a6a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a06      	ldr	r2, [pc, #24]	@ (8009aa4 <SDMMC_GetCmdError+0x58>)
 8009a8a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	20000000 	.word	0x20000000
 8009aa0:	10624dd3 	.word	0x10624dd3
 8009aa4:	002000c5 	.word	0x002000c5

08009aa8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009aac:	4904      	ldr	r1, [pc, #16]	@ (8009ac0 <MX_FATFS_Init+0x18>)
 8009aae:	4805      	ldr	r0, [pc, #20]	@ (8009ac4 <MX_FATFS_Init+0x1c>)
 8009ab0:	f002 feae 	bl	800c810 <FATFS_LinkDriver>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	4b03      	ldr	r3, [pc, #12]	@ (8009ac8 <MX_FATFS_Init+0x20>)
 8009aba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009abc:	bf00      	nop
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200011dc 	.word	0x200011dc
 8009ac4:	0800f54c 	.word	0x0800f54c
 8009ac8:	200011d8 	.word	0x200011d8

08009acc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009ad0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009ae6:	f000 f89b 	bl	8009c20 <BSP_SD_IsDetected>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d001      	beq.n	8009af4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009af0:	2302      	movs	r3, #2
 8009af2:	e012      	b.n	8009b1a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009af4:	480b      	ldr	r0, [pc, #44]	@ (8009b24 <BSP_SD_Init+0x48>)
 8009af6:	f7fb fd97 	bl	8005628 <HAL_SD_Init>
 8009afa:	4603      	mov	r3, r0
 8009afc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009b04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009b08:	4806      	ldr	r0, [pc, #24]	@ (8009b24 <BSP_SD_Init+0x48>)
 8009b0a:	f7fc fe2f 	bl	800676c <HAL_SD_ConfigWideBusOperation>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009b18:	79fb      	ldrb	r3, [r7, #7]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20000740 	.word	0x20000740

08009b28 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	4806      	ldr	r0, [pc, #24]	@ (8009b60 <BSP_SD_ReadBlocks+0x38>)
 8009b46:	f7fb fea3 	bl	8005890 <HAL_SD_ReadBlocks>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20000740 	.word	0x20000740

08009b64 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	4806      	ldr	r0, [pc, #24]	@ (8009b9c <BSP_SD_WriteBlocks+0x38>)
 8009b82:	f7fc f817 	bl	8005bb4 <HAL_SD_WriteBlocks>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000740 	.word	0x20000740

08009ba0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009ba4:	4805      	ldr	r0, [pc, #20]	@ (8009bbc <BSP_SD_GetCardState+0x1c>)
 8009ba6:	f7fc fef5 	bl	8006994 <HAL_SD_GetCardState>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	bf14      	ite	ne
 8009bb0:	2301      	movne	r3, #1
 8009bb2:	2300      	moveq	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000740 	.word	0x20000740

08009bc0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009bc8:	6879      	ldr	r1, [r7, #4]
 8009bca:	4803      	ldr	r0, [pc, #12]	@ (8009bd8 <BSP_SD_GetCardInfo+0x18>)
 8009bcc:	f7fc fda2 	bl	8006714 <HAL_SD_GetCardInfo>
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000740 	.word	0x20000740

08009bdc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009be4:	f000 f80e 	bl	8009c04 <BSP_SD_WriteCpltCallback>
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009bf8:	f000 f80b 	bl	8009c12 <BSP_SD_ReadCpltCallback>
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	af00      	add	r7, sp, #0

}
 8009c08:	bf00      	nop
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8009c12:	b480      	push	{r7}
 8009c14:	af00      	add	r7, sp, #0

}
 8009c16:	bf00      	nop
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009c26:	2301      	movs	r3, #1
 8009c28:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009c2a:	f000 f80b 	bl	8009c44 <BSP_PlatformIsDetected>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009c34:	2300      	movs	r3, #0
 8009c36:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	b2db      	uxtb	r3, r3
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009c52:	4806      	ldr	r0, [pc, #24]	@ (8009c6c <BSP_PlatformIsDetected+0x28>)
 8009c54:	f7f8 ff66 	bl	8002b24 <HAL_GPIO_ReadPin>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009c62:	79fb      	ldrb	r3, [r7, #7]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	48000400 	.word	0x48000400

08009c70 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca8 <SD_CheckStatus+0x38>)
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009c80:	f7ff ff8e 	bl	8009ba0 <BSP_SD_GetCardState>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d107      	bne.n	8009c9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <SD_CheckStatus+0x38>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	f023 0301 	bic.w	r3, r3, #1
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	4b04      	ldr	r3, [pc, #16]	@ (8009ca8 <SD_CheckStatus+0x38>)
 8009c98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c9a:	4b03      	ldr	r3, [pc, #12]	@ (8009ca8 <SD_CheckStatus+0x38>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b2db      	uxtb	r3, r3
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20000009 	.word	0x20000009

08009cac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce4 <SD_initialize+0x38>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009cbc:	f7ff ff0e 	bl	8009adc <BSP_SD_Init>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d107      	bne.n	8009cd6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff ffd1 	bl	8009c70 <SD_CheckStatus>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4b04      	ldr	r3, [pc, #16]	@ (8009ce4 <SD_initialize+0x38>)
 8009cd4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009cd6:	4b03      	ldr	r3, [pc, #12]	@ (8009ce4 <SD_initialize+0x38>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	b2db      	uxtb	r3, r3
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	20000009 	.word	0x20000009

08009ce8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff ffbb 	bl	8009c70 <SD_CheckStatus>
 8009cfa:	4603      	mov	r3, r0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009d18:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	68b8      	ldr	r0, [r7, #8]
 8009d22:	f7ff ff01 	bl	8009b28 <BSP_SD_ReadBlocks>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d107      	bne.n	8009d3c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009d2c:	bf00      	nop
 8009d2e:	f7ff ff37 	bl	8009ba0 <BSP_SD_GetCardState>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1fa      	bne.n	8009d2e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b086      	sub	sp, #24
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	603b      	str	r3, [r7, #0]
 8009d52:	4603      	mov	r3, r0
 8009d54:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	68b8      	ldr	r0, [r7, #8]
 8009d64:	f7ff fefe 	bl	8009b64 <BSP_SD_WriteBlocks>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d107      	bne.n	8009d7e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009d6e:	bf00      	nop
 8009d70:	f7ff ff16 	bl	8009ba0 <BSP_SD_GetCardState>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1fa      	bne.n	8009d70 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08c      	sub	sp, #48	@ 0x30
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	603a      	str	r2, [r7, #0]
 8009d92:	71fb      	strb	r3, [r7, #7]
 8009d94:	460b      	mov	r3, r1
 8009d96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d9e:	4b25      	ldr	r3, [pc, #148]	@ (8009e34 <SD_ioctl+0xac>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d001      	beq.n	8009db0 <SD_ioctl+0x28>
 8009dac:	2303      	movs	r3, #3
 8009dae:	e03c      	b.n	8009e2a <SD_ioctl+0xa2>

  switch (cmd)
 8009db0:	79bb      	ldrb	r3, [r7, #6]
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d834      	bhi.n	8009e20 <SD_ioctl+0x98>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <SD_ioctl+0x34>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009dcd 	.word	0x08009dcd
 8009dc0:	08009dd5 	.word	0x08009dd5
 8009dc4:	08009ded 	.word	0x08009ded
 8009dc8:	08009e07 	.word	0x08009e07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009dd2:	e028      	b.n	8009e26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dd4:	f107 0308 	add.w	r3, r7, #8
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fef1 	bl	8009bc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009dde:	6a3a      	ldr	r2, [r7, #32]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009dea:	e01c      	b.n	8009e26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dec:	f107 0308 	add.w	r3, r7, #8
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fee5 	bl	8009bc0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009e04:	e00f      	b.n	8009e26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e06:	f107 0308 	add.w	r3, r7, #8
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fed8 	bl	8009bc0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e12:	0a5a      	lsrs	r2, r3, #9
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009e1e:	e002      	b.n	8009e26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009e26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3730      	adds	r7, #48	@ 0x30
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000009 	.word	0x20000009

08009e38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009e42:	79fb      	ldrb	r3, [r7, #7]
 8009e44:	4a08      	ldr	r2, [pc, #32]	@ (8009e68 <disk_status+0x30>)
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	79fa      	ldrb	r2, [r7, #7]
 8009e50:	4905      	ldr	r1, [pc, #20]	@ (8009e68 <disk_status+0x30>)
 8009e52:	440a      	add	r2, r1
 8009e54:	7a12      	ldrb	r2, [r2, #8]
 8009e56:	4610      	mov	r0, r2
 8009e58:	4798      	blx	r3
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20001438 	.word	0x20001438

08009e6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009e7a:	79fb      	ldrb	r3, [r7, #7]
 8009e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8009eb4 <disk_initialize+0x48>)
 8009e7e:	5cd3      	ldrb	r3, [r2, r3]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d111      	bne.n	8009ea8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	4a0b      	ldr	r2, [pc, #44]	@ (8009eb4 <disk_initialize+0x48>)
 8009e88:	2101      	movs	r1, #1
 8009e8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009e8c:	79fb      	ldrb	r3, [r7, #7]
 8009e8e:	4a09      	ldr	r2, [pc, #36]	@ (8009eb4 <disk_initialize+0x48>)
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	79fa      	ldrb	r2, [r7, #7]
 8009e9a:	4906      	ldr	r1, [pc, #24]	@ (8009eb4 <disk_initialize+0x48>)
 8009e9c:	440a      	add	r2, r1
 8009e9e:	7a12      	ldrb	r2, [r2, #8]
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4798      	blx	r3
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20001438 	.word	0x20001438

08009eb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60b9      	str	r1, [r7, #8]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	4a0a      	ldr	r2, [pc, #40]	@ (8009ef4 <disk_read+0x3c>)
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	689c      	ldr	r4, [r3, #8]
 8009ed4:	7bfb      	ldrb	r3, [r7, #15]
 8009ed6:	4a07      	ldr	r2, [pc, #28]	@ (8009ef4 <disk_read+0x3c>)
 8009ed8:	4413      	add	r3, r2
 8009eda:	7a18      	ldrb	r0, [r3, #8]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	68b9      	ldr	r1, [r7, #8]
 8009ee2:	47a0      	blx	r4
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	371c      	adds	r7, #28
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd90      	pop	{r4, r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20001438 	.word	0x20001438

08009ef8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ef8:	b590      	push	{r4, r7, lr}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f34 <disk_write+0x3c>)
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68dc      	ldr	r4, [r3, #12]
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	4a07      	ldr	r2, [pc, #28]	@ (8009f34 <disk_write+0x3c>)
 8009f18:	4413      	add	r3, r2
 8009f1a:	7a18      	ldrb	r0, [r3, #8]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	68b9      	ldr	r1, [r7, #8]
 8009f22:	47a0      	blx	r4
 8009f24:	4603      	mov	r3, r0
 8009f26:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd90      	pop	{r4, r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20001438 	.word	0x20001438

08009f38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	4603      	mov	r3, r0
 8009f40:	603a      	str	r2, [r7, #0]
 8009f42:	71fb      	strb	r3, [r7, #7]
 8009f44:	460b      	mov	r3, r1
 8009f46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009f48:	79fb      	ldrb	r3, [r7, #7]
 8009f4a:	4a09      	ldr	r2, [pc, #36]	@ (8009f70 <disk_ioctl+0x38>)
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	79fa      	ldrb	r2, [r7, #7]
 8009f56:	4906      	ldr	r1, [pc, #24]	@ (8009f70 <disk_ioctl+0x38>)
 8009f58:	440a      	add	r2, r1
 8009f5a:	7a10      	ldrb	r0, [r2, #8]
 8009f5c:	79b9      	ldrb	r1, [r7, #6]
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	4798      	blx	r3
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
  return res;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20001438 	.word	0x20001438

08009f74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009f84:	89fb      	ldrh	r3, [r7, #14]
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	b21a      	sxth	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	b21b      	sxth	r3, r3
 8009f90:	4313      	orrs	r3, r2
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009f96:	89fb      	ldrh	r3, [r7, #14]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3303      	adds	r3, #3
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	3202      	adds	r2, #2
 8009fbc:	7812      	ldrb	r2, [r2, #0]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	3201      	adds	r2, #1
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	7812      	ldrb	r2, [r2, #0]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
	return rv;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	887a      	ldrh	r2, [r7, #2]
 8009ffe:	b2d2      	uxtb	r2, r2
 800a000:	701a      	strb	r2, [r3, #0]
 800a002:	887b      	ldrh	r3, [r7, #2]
 800a004:	0a1b      	lsrs	r3, r3, #8
 800a006:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	887a      	ldrh	r2, [r7, #2]
 800a010:	b2d2      	uxtb	r2, r2
 800a012:	701a      	strb	r2, [r3, #0]
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	683a      	ldr	r2, [r7, #0]
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	0a1b      	lsrs	r3, r3, #8
 800a03a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	1c5a      	adds	r2, r3, #1
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	b2d2      	uxtb	r2, r2
 800a046:	701a      	strb	r2, [r3, #0]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	0a1b      	lsrs	r3, r3, #8
 800a04c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	607a      	str	r2, [r7, #4]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	b2d2      	uxtb	r2, r2
 800a058:	701a      	strb	r2, [r3, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	0a1b      	lsrs	r3, r3, #8
 800a05e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	701a      	strb	r2, [r3, #0]
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00d      	beq.n	800a0ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	1c53      	adds	r3, r2, #1
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	6179      	str	r1, [r7, #20]
 800a09e:	7812      	ldrb	r2, [r2, #0]
 800a0a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	607b      	str	r3, [r7, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1f1      	bne.n	800a092 <mem_cpy+0x1a>
	}
}
 800a0ae:	bf00      	nop
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a0ba:	b480      	push	{r7}
 800a0bc:	b087      	sub	sp, #28
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	1c5a      	adds	r2, r3, #1
 800a0ce:	617a      	str	r2, [r7, #20]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	b2d2      	uxtb	r2, r2
 800a0d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	607b      	str	r3, [r7, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f3      	bne.n	800a0ca <mem_set+0x10>
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	371c      	adds	r7, #28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a0f0:	b480      	push	{r7}
 800a0f2:	b089      	sub	sp, #36	@ 0x24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	61fb      	str	r3, [r7, #28]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	61fa      	str	r2, [r7, #28]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	4619      	mov	r1, r3
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	61ba      	str	r2, [r7, #24]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	1acb      	subs	r3, r1, r3
 800a11c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3b01      	subs	r3, #1
 800a122:	607b      	str	r3, [r7, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <mem_cmp+0x40>
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0eb      	beq.n	800a108 <mem_cmp+0x18>

	return r;
 800a130:	697b      	ldr	r3, [r7, #20]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3724      	adds	r7, #36	@ 0x24
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a148:	e002      	b.n	800a150 <chk_chr+0x12>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3301      	adds	r3, #1
 800a14e:	607b      	str	r3, [r7, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <chk_chr+0x26>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	461a      	mov	r2, r3
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	4293      	cmp	r3, r2
 800a162:	d1f2      	bne.n	800a14a <chk_chr+0xc>
	return *str;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	781b      	ldrb	r3, [r3, #0]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a17e:	2300      	movs	r3, #0
 800a180:	60bb      	str	r3, [r7, #8]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	e029      	b.n	800a1dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a188:	4a27      	ldr	r2, [pc, #156]	@ (800a228 <chk_lock+0xb4>)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	4413      	add	r3, r2
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d01d      	beq.n	800a1d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a196:	4a24      	ldr	r2, [pc, #144]	@ (800a228 <chk_lock+0xb4>)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	4413      	add	r3, r2
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d116      	bne.n	800a1d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a1a8:	4a1f      	ldr	r2, [pc, #124]	@ (800a228 <chk_lock+0xb4>)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d10c      	bne.n	800a1d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a228 <chk_lock+0xb4>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	4413      	add	r3, r2
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d102      	bne.n	800a1d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1d0:	e007      	b.n	800a1e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d9d2      	bls.n	800a188 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d109      	bne.n	800a1fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <chk_lock+0x80>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d101      	bne.n	800a1f8 <chk_lock+0x84>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e010      	b.n	800a21a <chk_lock+0xa6>
 800a1f8:	2312      	movs	r3, #18
 800a1fa:	e00e      	b.n	800a21a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d108      	bne.n	800a214 <chk_lock+0xa0>
 800a202:	4a09      	ldr	r2, [pc, #36]	@ (800a228 <chk_lock+0xb4>)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	4413      	add	r3, r2
 800a20a:	330c      	adds	r3, #12
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a212:	d101      	bne.n	800a218 <chk_lock+0xa4>
 800a214:	2310      	movs	r3, #16
 800a216:	e000      	b.n	800a21a <chk_lock+0xa6>
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	20001418 	.word	0x20001418

0800a22c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a232:	2300      	movs	r3, #0
 800a234:	607b      	str	r3, [r7, #4]
 800a236:	e002      	b.n	800a23e <enq_lock+0x12>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3301      	adds	r3, #1
 800a23c:	607b      	str	r3, [r7, #4]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d806      	bhi.n	800a252 <enq_lock+0x26>
 800a244:	4a09      	ldr	r2, [pc, #36]	@ (800a26c <enq_lock+0x40>)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	011b      	lsls	r3, r3, #4
 800a24a:	4413      	add	r3, r2
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f2      	bne.n	800a238 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b02      	cmp	r3, #2
 800a256:	bf14      	ite	ne
 800a258:	2301      	movne	r3, #1
 800a25a:	2300      	moveq	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
}
 800a25e:	4618      	mov	r0, r3
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	20001418 	.word	0x20001418

0800a270 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a27a:	2300      	movs	r3, #0
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	e01f      	b.n	800a2c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a280:	4a41      	ldr	r2, [pc, #260]	@ (800a388 <inc_lock+0x118>)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	4413      	add	r3, r2
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d113      	bne.n	800a2ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a292:	4a3d      	ldr	r2, [pc, #244]	@ (800a388 <inc_lock+0x118>)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	011b      	lsls	r3, r3, #4
 800a298:	4413      	add	r3, r2
 800a29a:	3304      	adds	r3, #4
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d109      	bne.n	800a2ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a2a6:	4a38      	ldr	r2, [pc, #224]	@ (800a388 <inc_lock+0x118>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	011b      	lsls	r3, r3, #4
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d006      	beq.n	800a2c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d9dc      	bls.n	800a280 <inc_lock+0x10>
 800a2c6:	e000      	b.n	800a2ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a2c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d132      	bne.n	800a336 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e002      	b.n	800a2dc <inc_lock+0x6c>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d806      	bhi.n	800a2f0 <inc_lock+0x80>
 800a2e2:	4a29      	ldr	r2, [pc, #164]	@ (800a388 <inc_lock+0x118>)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	4413      	add	r3, r2
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1f2      	bne.n	800a2d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d101      	bne.n	800a2fa <inc_lock+0x8a>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e040      	b.n	800a37c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4922      	ldr	r1, [pc, #136]	@ (800a388 <inc_lock+0x118>)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	440b      	add	r3, r1
 800a306:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689a      	ldr	r2, [r3, #8]
 800a30c:	491e      	ldr	r1, [pc, #120]	@ (800a388 <inc_lock+0x118>)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	440b      	add	r3, r1
 800a314:	3304      	adds	r3, #4
 800a316:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	695a      	ldr	r2, [r3, #20]
 800a31c:	491a      	ldr	r1, [pc, #104]	@ (800a388 <inc_lock+0x118>)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	011b      	lsls	r3, r3, #4
 800a322:	440b      	add	r3, r1
 800a324:	3308      	adds	r3, #8
 800a326:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a328:	4a17      	ldr	r2, [pc, #92]	@ (800a388 <inc_lock+0x118>)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	4413      	add	r3, r2
 800a330:	330c      	adds	r3, #12
 800a332:	2200      	movs	r2, #0
 800a334:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d009      	beq.n	800a350 <inc_lock+0xe0>
 800a33c:	4a12      	ldr	r2, [pc, #72]	@ (800a388 <inc_lock+0x118>)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	4413      	add	r3, r2
 800a344:	330c      	adds	r3, #12
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <inc_lock+0xe0>
 800a34c:	2300      	movs	r3, #0
 800a34e:	e015      	b.n	800a37c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d108      	bne.n	800a368 <inc_lock+0xf8>
 800a356:	4a0c      	ldr	r2, [pc, #48]	@ (800a388 <inc_lock+0x118>)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	4413      	add	r3, r2
 800a35e:	330c      	adds	r3, #12
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	3301      	adds	r3, #1
 800a364:	b29a      	uxth	r2, r3
 800a366:	e001      	b.n	800a36c <inc_lock+0xfc>
 800a368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a36c:	4906      	ldr	r1, [pc, #24]	@ (800a388 <inc_lock+0x118>)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	011b      	lsls	r3, r3, #4
 800a372:	440b      	add	r3, r1
 800a374:	330c      	adds	r3, #12
 800a376:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3301      	adds	r3, #1
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	20001418 	.word	0x20001418

0800a38c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3b01      	subs	r3, #1
 800a398:	607b      	str	r3, [r7, #4]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d825      	bhi.n	800a3ec <dec_lock+0x60>
		n = Files[i].ctr;
 800a3a0:	4a17      	ldr	r2, [pc, #92]	@ (800a400 <dec_lock+0x74>)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	011b      	lsls	r3, r3, #4
 800a3a6:	4413      	add	r3, r2
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a3ae:	89fb      	ldrh	r3, [r7, #14]
 800a3b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3b4:	d101      	bne.n	800a3ba <dec_lock+0x2e>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a3ba:	89fb      	ldrh	r3, [r7, #14]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <dec_lock+0x3a>
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a3c6:	4a0e      	ldr	r2, [pc, #56]	@ (800a400 <dec_lock+0x74>)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	4413      	add	r3, r2
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	89fa      	ldrh	r2, [r7, #14]
 800a3d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a3d4:	89fb      	ldrh	r3, [r7, #14]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d105      	bne.n	800a3e6 <dec_lock+0x5a>
 800a3da:	4a09      	ldr	r2, [pc, #36]	@ (800a400 <dec_lock+0x74>)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	011b      	lsls	r3, r3, #4
 800a3e0:	4413      	add	r3, r2
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	737b      	strb	r3, [r7, #13]
 800a3ea:	e001      	b.n	800a3f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a3f0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20001418 	.word	0x20001418

0800a404 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	e010      	b.n	800a434 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a412:	4a0d      	ldr	r2, [pc, #52]	@ (800a448 <clear_lock+0x44>)
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	011b      	lsls	r3, r3, #4
 800a418:	4413      	add	r3, r2
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d105      	bne.n	800a42e <clear_lock+0x2a>
 800a422:	4a09      	ldr	r2, [pc, #36]	@ (800a448 <clear_lock+0x44>)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	011b      	lsls	r3, r3, #4
 800a428:	4413      	add	r3, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3301      	adds	r3, #1
 800a432:	60fb      	str	r3, [r7, #12]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d9eb      	bls.n	800a412 <clear_lock+0xe>
	}
}
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	20001418 	.word	0x20001418

0800a44c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	78db      	ldrb	r3, [r3, #3]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d034      	beq.n	800a4ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a464:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	7858      	ldrb	r0, [r3, #1]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a470:	2301      	movs	r3, #1
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	f7ff fd40 	bl	8009ef8 <disk_write>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a47e:	2301      	movs	r3, #1
 800a480:	73fb      	strb	r3, [r7, #15]
 800a482:	e022      	b.n	800a4ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	1ad2      	subs	r2, r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	429a      	cmp	r2, r3
 800a498:	d217      	bcs.n	800a4ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	789b      	ldrb	r3, [r3, #2]
 800a49e:	613b      	str	r3, [r7, #16]
 800a4a0:	e010      	b.n	800a4c4 <sync_window+0x78>
					wsect += fs->fsize;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	7858      	ldrb	r0, [r3, #1]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	f7ff fd1d 	bl	8009ef8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	613b      	str	r3, [r7, #16]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d8eb      	bhi.n	800a4a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3718      	adds	r7, #24
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d01b      	beq.n	800a524 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ffad 	bl	800a44c <sync_window>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d113      	bne.n	800a524 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	7858      	ldrb	r0, [r3, #1]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a506:	2301      	movs	r3, #1
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	f7ff fcd5 	bl	8009eb8 <disk_read>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
	...

0800a530 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff ff87 	bl	800a44c <sync_window>
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d158      	bne.n	800a5fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d148      	bne.n	800a5e2 <sync_fs+0xb2>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	791b      	ldrb	r3, [r3, #4]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d144      	bne.n	800a5e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3330      	adds	r3, #48	@ 0x30
 800a55c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a560:	2100      	movs	r1, #0
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff fda9 	bl	800a0ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	3330      	adds	r3, #48	@ 0x30
 800a56c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a570:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff fd38 	bl	8009fea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3330      	adds	r3, #48	@ 0x30
 800a57e:	4921      	ldr	r1, [pc, #132]	@ (800a604 <sync_fs+0xd4>)
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff fd4d 	bl	800a020 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3330      	adds	r3, #48	@ 0x30
 800a58a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a58e:	491e      	ldr	r1, [pc, #120]	@ (800a608 <sync_fs+0xd8>)
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff fd45 	bl	800a020 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3330      	adds	r3, #48	@ 0x30
 800a59a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	f7ff fd3b 	bl	800a020 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3330      	adds	r3, #48	@ 0x30
 800a5ae:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4610      	mov	r0, r2
 800a5ba:	f7ff fd31 	bl	800a020 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	7858      	ldrb	r0, [r3, #1]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	f7ff fc8e 	bl	8009ef8 <disk_write>
			fs->fsi_flag = 0;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	785b      	ldrb	r3, [r3, #1]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff fca4 	bl	8009f38 <disk_ioctl>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <sync_fs+0xca>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	41615252 	.word	0x41615252
 800a608:	61417272 	.word	0x61417272

0800a60c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	3b02      	subs	r3, #2
 800a61a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	695b      	ldr	r3, [r3, #20]
 800a620:	3b02      	subs	r3, #2
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d301      	bcc.n	800a62c <clust2sect+0x20>
 800a628:	2300      	movs	r3, #0
 800a62a:	e008      	b.n	800a63e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	895b      	ldrh	r3, [r3, #10]
 800a630:	461a      	mov	r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	fb03 f202 	mul.w	r2, r3, r2
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63c:	4413      	add	r3, r2
}
 800a63e:	4618      	mov	r0, r3
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr

0800a64a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b086      	sub	sp, #24
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d904      	bls.n	800a66a <get_fat+0x20>
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a66a:	2301      	movs	r3, #1
 800a66c:	617b      	str	r3, [r7, #20]
 800a66e:	e08e      	b.n	800a78e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a670:	f04f 33ff 	mov.w	r3, #4294967295
 800a674:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d061      	beq.n	800a742 <get_fat+0xf8>
 800a67e:	2b03      	cmp	r3, #3
 800a680:	dc7b      	bgt.n	800a77a <get_fat+0x130>
 800a682:	2b01      	cmp	r3, #1
 800a684:	d002      	beq.n	800a68c <get_fat+0x42>
 800a686:	2b02      	cmp	r3, #2
 800a688:	d041      	beq.n	800a70e <get_fat+0xc4>
 800a68a:	e076      	b.n	800a77a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	085b      	lsrs	r3, r3, #1
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4413      	add	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	6a1a      	ldr	r2, [r3, #32]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	0a5b      	lsrs	r3, r3, #9
 800a6a2:	4413      	add	r3, r2
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6938      	ldr	r0, [r7, #16]
 800a6a8:	f7ff ff14 	bl	800a4d4 <move_window>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d166      	bne.n	800a780 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	60fa      	str	r2, [r7, #12]
 800a6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	6a1a      	ldr	r2, [r3, #32]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	0a5b      	lsrs	r3, r3, #9
 800a6ce:	4413      	add	r3, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6938      	ldr	r0, [r7, #16]
 800a6d4:	f7ff fefe 	bl	800a4d4 <move_window>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d152      	bne.n	800a784 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6ec:	021b      	lsls	r3, r3, #8
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <get_fat+0xba>
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	091b      	lsrs	r3, r3, #4
 800a702:	e002      	b.n	800a70a <get_fat+0xc0>
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a70a:	617b      	str	r3, [r7, #20]
			break;
 800a70c:	e03f      	b.n	800a78e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6a1a      	ldr	r2, [r3, #32]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	0a1b      	lsrs	r3, r3, #8
 800a716:	4413      	add	r3, r2
 800a718:	4619      	mov	r1, r3
 800a71a:	6938      	ldr	r0, [r7, #16]
 800a71c:	f7ff feda 	bl	800a4d4 <move_window>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d130      	bne.n	800a788 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a734:	4413      	add	r3, r2
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff fc1c 	bl	8009f74 <ld_word>
 800a73c:	4603      	mov	r3, r0
 800a73e:	617b      	str	r3, [r7, #20]
			break;
 800a740:	e025      	b.n	800a78e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	6a1a      	ldr	r2, [r3, #32]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	09db      	lsrs	r3, r3, #7
 800a74a:	4413      	add	r3, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f7ff fec0 	bl	800a4d4 <move_window>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d118      	bne.n	800a78c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a768:	4413      	add	r3, r2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff fc1a 	bl	8009fa4 <ld_dword>
 800a770:	4603      	mov	r3, r0
 800a772:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a776:	617b      	str	r3, [r7, #20]
			break;
 800a778:	e009      	b.n	800a78e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a77a:	2301      	movs	r3, #1
 800a77c:	617b      	str	r3, [r7, #20]
 800a77e:	e006      	b.n	800a78e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a780:	bf00      	nop
 800a782:	e004      	b.n	800a78e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a784:	bf00      	nop
 800a786:	e002      	b.n	800a78e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a788:	bf00      	nop
 800a78a:	e000      	b.n	800a78e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a78c:	bf00      	nop
		}
	}

	return val;
 800a78e:	697b      	ldr	r3, [r7, #20]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a798:	b590      	push	{r4, r7, lr}
 800a79a:	b089      	sub	sp, #36	@ 0x24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	f240 80d9 	bls.w	800a962 <put_fat+0x1ca>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	f080 80d3 	bcs.w	800a962 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b03      	cmp	r3, #3
 800a7c2:	f000 8096 	beq.w	800a8f2 <put_fat+0x15a>
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	f300 80cb 	bgt.w	800a962 <put_fat+0x1ca>
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d002      	beq.n	800a7d6 <put_fat+0x3e>
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d06e      	beq.n	800a8b2 <put_fat+0x11a>
 800a7d4:	e0c5      	b.n	800a962 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	61bb      	str	r3, [r7, #24]
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	085b      	lsrs	r3, r3, #1
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6a1a      	ldr	r2, [r3, #32]
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	0a5b      	lsrs	r3, r3, #9
 800a7ec:	4413      	add	r3, r2
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f7ff fe6f 	bl	800a4d4 <move_window>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7fa:	7ffb      	ldrb	r3, [r7, #31]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 80a9 	bne.w	800a954 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	61b9      	str	r1, [r7, #24]
 800a80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a812:	4413      	add	r3, r2
 800a814:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00d      	beq.n	800a83c <put_fat+0xa4>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	b25b      	sxtb	r3, r3
 800a826:	f003 030f 	and.w	r3, r3, #15
 800a82a:	b25a      	sxtb	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	b25b      	sxtb	r3, r3
 800a834:	4313      	orrs	r3, r2
 800a836:	b25b      	sxtb	r3, r3
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	e001      	b.n	800a840 <put_fat+0xa8>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2201      	movs	r2, #1
 800a848:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6a1a      	ldr	r2, [r3, #32]
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	0a5b      	lsrs	r3, r3, #9
 800a852:	4413      	add	r3, r2
 800a854:	4619      	mov	r1, r3
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7ff fe3c 	bl	800a4d4 <move_window>
 800a85c:	4603      	mov	r3, r0
 800a85e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a860:	7ffb      	ldrb	r3, [r7, #31]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d178      	bne.n	800a958 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a872:	4413      	add	r3, r2
 800a874:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <put_fat+0xf0>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	091b      	lsrs	r3, r3, #4
 800a884:	b2db      	uxtb	r3, r3
 800a886:	e00e      	b.n	800a8a6 <put_fat+0x10e>
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	f023 030f 	bic.w	r3, r3, #15
 800a892:	b25a      	sxtb	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	0a1b      	lsrs	r3, r3, #8
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	f003 030f 	and.w	r3, r3, #15
 800a89e:	b25b      	sxtb	r3, r3
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	b25b      	sxtb	r3, r3
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	697a      	ldr	r2, [r7, #20]
 800a8a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	70da      	strb	r2, [r3, #3]
			break;
 800a8b0:	e057      	b.n	800a962 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a1a      	ldr	r2, [r3, #32]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	0a1b      	lsrs	r3, r3, #8
 800a8ba:	4413      	add	r3, r2
 800a8bc:	4619      	mov	r1, r3
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7ff fe08 	bl	800a4d4 <move_window>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8c8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d146      	bne.n	800a95c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a8dc:	4413      	add	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	b292      	uxth	r2, r2
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff fb80 	bl	8009fea <st_word>
			fs->wflag = 1;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	70da      	strb	r2, [r3, #3]
			break;
 800a8f0:	e037      	b.n	800a962 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6a1a      	ldr	r2, [r3, #32]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	09db      	lsrs	r3, r3, #7
 800a8fa:	4413      	add	r3, r2
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7ff fde8 	bl	800a4d4 <move_window>
 800a904:	4603      	mov	r3, r0
 800a906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a908:	7ffb      	ldrb	r3, [r7, #31]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d128      	bne.n	800a960 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a922:	4413      	add	r3, r2
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff fb3d 	bl	8009fa4 <ld_dword>
 800a92a:	4603      	mov	r3, r0
 800a92c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a930:	4323      	orrs	r3, r4
 800a932:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a942:	4413      	add	r3, r2
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff fb6a 	bl	800a020 <st_dword>
			fs->wflag = 1;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2201      	movs	r2, #1
 800a950:	70da      	strb	r2, [r3, #3]
			break;
 800a952:	e006      	b.n	800a962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a954:	bf00      	nop
 800a956:	e004      	b.n	800a962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a958:	bf00      	nop
 800a95a:	e002      	b.n	800a962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a95c:	bf00      	nop
 800a95e:	e000      	b.n	800a962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a960:	bf00      	nop
		}
	}
	return res;
 800a962:	7ffb      	ldrb	r3, [r7, #31]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3724      	adds	r7, #36	@ 0x24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd90      	pop	{r4, r7, pc}

0800a96c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d904      	bls.n	800a992 <remove_chain+0x26>
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d301      	bcc.n	800a996 <remove_chain+0x2a>
 800a992:	2302      	movs	r3, #2
 800a994:	e04b      	b.n	800aa2e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00c      	beq.n	800a9b6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a99c:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	69b8      	ldr	r0, [r7, #24]
 800a9a4:	f7ff fef8 	bl	800a798 <put_fat>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a9ac:	7ffb      	ldrb	r3, [r7, #31]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <remove_chain+0x4a>
 800a9b2:	7ffb      	ldrb	r3, [r7, #31]
 800a9b4:	e03b      	b.n	800aa2e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a9b6:	68b9      	ldr	r1, [r7, #8]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fe46 	bl	800a64a <get_fat>
 800a9be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d031      	beq.n	800aa2a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d101      	bne.n	800a9d0 <remove_chain+0x64>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e02e      	b.n	800aa2e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d101      	bne.n	800a9dc <remove_chain+0x70>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e028      	b.n	800aa2e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a9dc:	2200      	movs	r2, #0
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	69b8      	ldr	r0, [r7, #24]
 800a9e2:	f7ff fed9 	bl	800a798 <put_fat>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a9ea:	7ffb      	ldrb	r3, [r7, #31]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <remove_chain+0x88>
 800a9f0:	7ffb      	ldrb	r3, [r7, #31]
 800a9f2:	e01c      	b.n	800aa2e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	691a      	ldr	r2, [r3, #16]
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	3b02      	subs	r3, #2
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d20b      	bcs.n	800aa1a <remove_chain+0xae>
			fs->free_clst++;
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	1c5a      	adds	r2, r3, #1
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	791b      	ldrb	r3, [r3, #4]
 800aa10:	f043 0301 	orr.w	r3, r3, #1
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d3c6      	bcc.n	800a9b6 <remove_chain+0x4a>
 800aa28:	e000      	b.n	800aa2c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aa2a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b088      	sub	sp, #32
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10d      	bne.n	800aa68 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d004      	beq.n	800aa62 <create_chain+0x2c>
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d31b      	bcc.n	800aa9a <create_chain+0x64>
 800aa62:	2301      	movs	r3, #1
 800aa64:	61bb      	str	r3, [r7, #24]
 800aa66:	e018      	b.n	800aa9a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff fded 	bl	800a64a <get_fat>
 800aa70:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d801      	bhi.n	800aa7c <create_chain+0x46>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e070      	b.n	800ab5e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa82:	d101      	bne.n	800aa88 <create_chain+0x52>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	e06a      	b.n	800ab5e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	695b      	ldr	r3, [r3, #20]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d201      	bcs.n	800aa96 <create_chain+0x60>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	e063      	b.n	800ab5e <create_chain+0x128>
		scl = clst;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d307      	bcc.n	800aabe <create_chain+0x88>
				ncl = 2;
 800aaae:	2302      	movs	r3, #2
 800aab0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aab2:	69fa      	ldr	r2, [r7, #28]
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d901      	bls.n	800aabe <create_chain+0x88>
 800aaba:	2300      	movs	r3, #0
 800aabc:	e04f      	b.n	800ab5e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aabe:	69f9      	ldr	r1, [r7, #28]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fdc2 	bl	800a64a <get_fat>
 800aac6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00e      	beq.n	800aaec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d003      	beq.n	800aadc <create_chain+0xa6>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aada:	d101      	bne.n	800aae0 <create_chain+0xaa>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	e03e      	b.n	800ab5e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d1da      	bne.n	800aa9e <create_chain+0x68>
 800aae8:	2300      	movs	r3, #0
 800aaea:	e038      	b.n	800ab5e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aaec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aaee:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf2:	69f9      	ldr	r1, [r7, #28]
 800aaf4:	6938      	ldr	r0, [r7, #16]
 800aaf6:	f7ff fe4f 	bl	800a798 <put_fat>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d109      	bne.n	800ab18 <create_chain+0xe2>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab0a:	69fa      	ldr	r2, [r7, #28]
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6938      	ldr	r0, [r7, #16]
 800ab10:	f7ff fe42 	bl	800a798 <put_fat>
 800ab14:	4603      	mov	r3, r0
 800ab16:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d116      	bne.n	800ab4c <create_chain+0x116>
		fs->last_clst = ncl;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	3b02      	subs	r3, #2
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d804      	bhi.n	800ab3c <create_chain+0x106>
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	1e5a      	subs	r2, r3, #1
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	791b      	ldrb	r3, [r3, #4]
 800ab40:	f043 0301 	orr.w	r3, r3, #1
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	711a      	strb	r2, [r3, #4]
 800ab4a:	e007      	b.n	800ab5c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d102      	bne.n	800ab58 <create_chain+0x122>
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295
 800ab56:	e000      	b.n	800ab5a <create_chain+0x124>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab5c:	69fb      	ldr	r3, [r7, #28]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3720      	adds	r7, #32
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b087      	sub	sp, #28
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	0a5b      	lsrs	r3, r3, #9
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	8952      	ldrh	r2, [r2, #10]
 800ab86:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	1d1a      	adds	r2, r3, #4
 800ab90:	613a      	str	r2, [r7, #16]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <clmt_clust+0x3a>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	e010      	b.n	800abc2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d307      	bcc.n	800abb8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	617b      	str	r3, [r7, #20]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	3304      	adds	r3, #4
 800abb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abb6:	e7e9      	b.n	800ab8c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800abb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	4413      	add	r3, r2
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	371c      	adds	r7, #28
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b086      	sub	sp, #24
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abe4:	d204      	bcs.n	800abf0 <dir_sdi+0x22>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	f003 031f 	and.w	r3, r3, #31
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800abf0:	2302      	movs	r3, #2
 800abf2:	e063      	b.n	800acbc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <dir_sdi+0x46>
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d902      	bls.n	800ac14 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac12:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10c      	bne.n	800ac34 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	095b      	lsrs	r3, r3, #5
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	8912      	ldrh	r2, [r2, #8]
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d301      	bcc.n	800ac2a <dir_sdi+0x5c>
 800ac26:	2302      	movs	r3, #2
 800ac28:	e048      	b.n	800acbc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	61da      	str	r2, [r3, #28]
 800ac32:	e029      	b.n	800ac88 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	895b      	ldrh	r3, [r3, #10]
 800ac38:	025b      	lsls	r3, r3, #9
 800ac3a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac3c:	e019      	b.n	800ac72 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6979      	ldr	r1, [r7, #20]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fd01 	bl	800a64a <get_fat>
 800ac48:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac50:	d101      	bne.n	800ac56 <dir_sdi+0x88>
 800ac52:	2301      	movs	r3, #1
 800ac54:	e032      	b.n	800acbc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d904      	bls.n	800ac66 <dir_sdi+0x98>
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d301      	bcc.n	800ac6a <dir_sdi+0x9c>
 800ac66:	2302      	movs	r3, #2
 800ac68:	e028      	b.n	800acbc <dir_sdi+0xee>
			ofs -= csz;
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d2e1      	bcs.n	800ac3e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ac7a:	6979      	ldr	r1, [r7, #20]
 800ac7c:	6938      	ldr	r0, [r7, #16]
 800ac7e:	f7ff fcc5 	bl	800a60c <clust2sect>
 800ac82:	4602      	mov	r2, r0
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <dir_sdi+0xcc>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e010      	b.n	800acbc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	69da      	ldr	r2, [r3, #28]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	0a5b      	lsrs	r3, r3, #9
 800aca2:	441a      	add	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb4:	441a      	add	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	3320      	adds	r3, #32
 800acda:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <dir_next+0x28>
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800acea:	d301      	bcc.n	800acf0 <dir_next+0x2c>
 800acec:	2304      	movs	r3, #4
 800acee:	e0aa      	b.n	800ae46 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f040 8098 	bne.w	800ae2c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	095b      	lsrs	r3, r3, #5
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	8912      	ldrh	r2, [r2, #8]
 800ad16:	4293      	cmp	r3, r2
 800ad18:	f0c0 8088 	bcc.w	800ae2c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	61da      	str	r2, [r3, #28]
 800ad22:	2304      	movs	r3, #4
 800ad24:	e08f      	b.n	800ae46 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	0a5b      	lsrs	r3, r3, #9
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	8952      	ldrh	r2, [r2, #10]
 800ad2e:	3a01      	subs	r2, #1
 800ad30:	4013      	ands	r3, r2
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d17a      	bne.n	800ae2c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4610      	mov	r0, r2
 800ad40:	f7ff fc83 	bl	800a64a <get_fat>
 800ad44:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d801      	bhi.n	800ad50 <dir_next+0x8c>
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	e07a      	b.n	800ae46 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad56:	d101      	bne.n	800ad5c <dir_next+0x98>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e074      	b.n	800ae46 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d358      	bcc.n	800ae18 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	61da      	str	r2, [r3, #28]
 800ad72:	2304      	movs	r3, #4
 800ad74:	e067      	b.n	800ae46 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f7ff fe59 	bl	800aa36 <create_chain>
 800ad84:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <dir_next+0xcc>
 800ad8c:	2307      	movs	r3, #7
 800ad8e:	e05a      	b.n	800ae46 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d101      	bne.n	800ad9a <dir_next+0xd6>
 800ad96:	2302      	movs	r3, #2
 800ad98:	e055      	b.n	800ae46 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada0:	d101      	bne.n	800ada6 <dir_next+0xe2>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e04f      	b.n	800ae46 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f7ff fb50 	bl	800a44c <sync_window>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <dir_next+0xf2>
 800adb2:	2301      	movs	r3, #1
 800adb4:	e047      	b.n	800ae46 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3330      	adds	r3, #48	@ 0x30
 800adba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff f97a 	bl	800a0ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800adc6:	2300      	movs	r3, #0
 800adc8:	613b      	str	r3, [r7, #16]
 800adca:	6979      	ldr	r1, [r7, #20]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f7ff fc1d 	bl	800a60c <clust2sect>
 800add2:	4602      	mov	r2, r0
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800add8:	e012      	b.n	800ae00 <dir_next+0x13c>
						fs->wflag = 1;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff fb33 	bl	800a44c <sync_window>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <dir_next+0x12c>
 800adec:	2301      	movs	r3, #1
 800adee:	e02a      	b.n	800ae46 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	3301      	adds	r3, #1
 800adf4:	613b      	str	r3, [r7, #16]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	895b      	ldrh	r3, [r3, #10]
 800ae04:	461a      	mov	r2, r3
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d3e6      	bcc.n	800adda <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	1ad2      	subs	r2, r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ae1e:	6979      	ldr	r1, [r7, #20]
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f7ff fbf3 	bl	800a60c <clust2sect>
 800ae26:	4602      	mov	r2, r0
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3e:	441a      	add	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3718      	adds	r7, #24
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b086      	sub	sp, #24
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae5e:	2100      	movs	r1, #0
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff feb4 	bl	800abce <dir_sdi>
 800ae66:	4603      	mov	r3, r0
 800ae68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d12b      	bne.n	800aec8 <dir_alloc+0x7a>
		n = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff fb2a 	bl	800a4d4 <move_window>
 800ae80:	4603      	mov	r3, r0
 800ae82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d11d      	bne.n	800aec6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2be5      	cmp	r3, #229	@ 0xe5
 800ae92:	d004      	beq.n	800ae9e <dir_alloc+0x50>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d107      	bne.n	800aeae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	3301      	adds	r3, #1
 800aea2:	613b      	str	r3, [r7, #16]
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d102      	bne.n	800aeb2 <dir_alloc+0x64>
 800aeac:	e00c      	b.n	800aec8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aeae:	2300      	movs	r3, #0
 800aeb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff ff05 	bl	800acc4 <dir_next>
 800aeba:	4603      	mov	r3, r0
 800aebc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0d7      	beq.n	800ae74 <dir_alloc+0x26>
 800aec4:	e000      	b.n	800aec8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aec6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	d101      	bne.n	800aed2 <dir_alloc+0x84>
 800aece:	2307      	movs	r3, #7
 800aed0:	75fb      	strb	r3, [r7, #23]
	return res;
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	331a      	adds	r3, #26
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff f842 	bl	8009f74 <ld_word>
 800aef0:	4603      	mov	r3, r0
 800aef2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d109      	bne.n	800af10 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	3314      	adds	r3, #20
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff f837 	bl	8009f74 <ld_word>
 800af06:	4603      	mov	r3, r0
 800af08:	041b      	lsls	r3, r3, #16
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800af10:	68fb      	ldr	r3, [r7, #12]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	331a      	adds	r3, #26
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	b292      	uxth	r2, r2
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff f85a 	bl	8009fea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d109      	bne.n	800af52 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f103 0214 	add.w	r2, r3, #20
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	0c1b      	lsrs	r3, r3, #16
 800af48:	b29b      	uxth	r3, r3
 800af4a:	4619      	mov	r1, r3
 800af4c:	4610      	mov	r0, r2
 800af4e:	f7ff f84c 	bl	8009fea <st_word>
	}
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b086      	sub	sp, #24
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800af68:	2100      	movs	r1, #0
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff fe2f 	bl	800abce <dir_sdi>
 800af70:	4603      	mov	r3, r0
 800af72:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <dir_find+0x24>
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	e03e      	b.n	800affc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	4619      	mov	r1, r3
 800af84:	6938      	ldr	r0, [r7, #16]
 800af86:	f7ff faa5 	bl	800a4d4 <move_window>
 800af8a:	4603      	mov	r3, r0
 800af8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d12f      	bne.n	800aff4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d102      	bne.n	800afa8 <dir_find+0x4e>
 800afa2:	2304      	movs	r3, #4
 800afa4:	75fb      	strb	r3, [r7, #23]
 800afa6:	e028      	b.n	800affa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	330b      	adds	r3, #11
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	330b      	adds	r3, #11
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	f003 0308 	and.w	r3, r3, #8
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10a      	bne.n	800afe0 <dir_find+0x86>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a18      	ldr	r0, [r3, #32]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3324      	adds	r3, #36	@ 0x24
 800afd2:	220b      	movs	r2, #11
 800afd4:	4619      	mov	r1, r3
 800afd6:	f7ff f88b 	bl	800a0f0 <mem_cmp>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800afe0:	2100      	movs	r1, #0
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff fe6e 	bl	800acc4 <dir_next>
 800afe8:	4603      	mov	r3, r0
 800afea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800afec:	7dfb      	ldrb	r3, [r7, #23]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d0c5      	beq.n	800af7e <dir_find+0x24>
 800aff2:	e002      	b.n	800affa <dir_find+0xa0>
		if (res != FR_OK) break;
 800aff4:	bf00      	nop
 800aff6:	e000      	b.n	800affa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aff8:	bf00      	nop

	return res;
 800affa:	7dfb      	ldrb	r3, [r7, #23]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b012:	2101      	movs	r1, #1
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff ff1a 	bl	800ae4e <dir_alloc>
 800b01a:	4603      	mov	r3, r0
 800b01c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d11c      	bne.n	800b05e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	69db      	ldr	r3, [r3, #28]
 800b028:	4619      	mov	r1, r3
 800b02a:	68b8      	ldr	r0, [r7, #8]
 800b02c:	f7ff fa52 	bl	800a4d4 <move_window>
 800b030:	4603      	mov	r3, r0
 800b032:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d111      	bne.n	800b05e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	2220      	movs	r2, #32
 800b040:	2100      	movs	r1, #0
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff f839 	bl	800a0ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a18      	ldr	r0, [r3, #32]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3324      	adds	r3, #36	@ 0x24
 800b050:	220b      	movs	r2, #11
 800b052:	4619      	mov	r1, r3
 800b054:	f7ff f810 	bl	800a078 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2201      	movs	r2, #1
 800b05c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b088      	sub	sp, #32
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	3324      	adds	r3, #36	@ 0x24
 800b07c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b07e:	220b      	movs	r2, #11
 800b080:	2120      	movs	r1, #32
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f7ff f819 	bl	800a0ba <mem_set>
	si = i = 0; ni = 8;
 800b088:	2300      	movs	r3, #0
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	2308      	movs	r3, #8
 800b092:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	61fa      	str	r2, [r7, #28]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b0a2:	7efb      	ldrb	r3, [r7, #27]
 800b0a4:	2b20      	cmp	r3, #32
 800b0a6:	d94e      	bls.n	800b146 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b0a8:	7efb      	ldrb	r3, [r7, #27]
 800b0aa:	2b2f      	cmp	r3, #47	@ 0x2f
 800b0ac:	d006      	beq.n	800b0bc <create_name+0x54>
 800b0ae:	7efb      	ldrb	r3, [r7, #27]
 800b0b0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0b2:	d110      	bne.n	800b0d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b0b4:	e002      	b.n	800b0bc <create_name+0x54>
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	61fb      	str	r3, [r7, #28]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b0c6:	d0f6      	beq.n	800b0b6 <create_name+0x4e>
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0d2:	d0f0      	beq.n	800b0b6 <create_name+0x4e>
			break;
 800b0d4:	e038      	b.n	800b148 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b0d6:	7efb      	ldrb	r3, [r7, #27]
 800b0d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0da:	d003      	beq.n	800b0e4 <create_name+0x7c>
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d30c      	bcc.n	800b0fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	2b0b      	cmp	r3, #11
 800b0e8:	d002      	beq.n	800b0f0 <create_name+0x88>
 800b0ea:	7efb      	ldrb	r3, [r7, #27]
 800b0ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0ee:	d001      	beq.n	800b0f4 <create_name+0x8c>
 800b0f0:	2306      	movs	r3, #6
 800b0f2:	e044      	b.n	800b17e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b0f4:	2308      	movs	r3, #8
 800b0f6:	613b      	str	r3, [r7, #16]
 800b0f8:	230b      	movs	r3, #11
 800b0fa:	617b      	str	r3, [r7, #20]
			continue;
 800b0fc:	e022      	b.n	800b144 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b0fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b102:	2b00      	cmp	r3, #0
 800b104:	da04      	bge.n	800b110 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b106:	7efb      	ldrb	r3, [r7, #27]
 800b108:	3b80      	subs	r3, #128	@ 0x80
 800b10a:	4a1f      	ldr	r2, [pc, #124]	@ (800b188 <create_name+0x120>)
 800b10c:	5cd3      	ldrb	r3, [r2, r3]
 800b10e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b110:	7efb      	ldrb	r3, [r7, #27]
 800b112:	4619      	mov	r1, r3
 800b114:	481d      	ldr	r0, [pc, #116]	@ (800b18c <create_name+0x124>)
 800b116:	f7ff f812 	bl	800a13e <chk_chr>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <create_name+0xbc>
 800b120:	2306      	movs	r3, #6
 800b122:	e02c      	b.n	800b17e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b124:	7efb      	ldrb	r3, [r7, #27]
 800b126:	2b60      	cmp	r3, #96	@ 0x60
 800b128:	d905      	bls.n	800b136 <create_name+0xce>
 800b12a:	7efb      	ldrb	r3, [r7, #27]
 800b12c:	2b7a      	cmp	r3, #122	@ 0x7a
 800b12e:	d802      	bhi.n	800b136 <create_name+0xce>
 800b130:	7efb      	ldrb	r3, [r7, #27]
 800b132:	3b20      	subs	r3, #32
 800b134:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	613a      	str	r2, [r7, #16]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	4413      	add	r3, r2
 800b140:	7efa      	ldrb	r2, [r7, #27]
 800b142:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b144:	e7a6      	b.n	800b094 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b146:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	441a      	add	r2, r3
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <create_name+0xf4>
 800b158:	2306      	movs	r3, #6
 800b15a:	e010      	b.n	800b17e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2be5      	cmp	r3, #229	@ 0xe5
 800b162:	d102      	bne.n	800b16a <create_name+0x102>
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2205      	movs	r2, #5
 800b168:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b16a:	7efb      	ldrb	r3, [r7, #27]
 800b16c:	2b20      	cmp	r3, #32
 800b16e:	d801      	bhi.n	800b174 <create_name+0x10c>
 800b170:	2204      	movs	r2, #4
 800b172:	e000      	b.n	800b176 <create_name+0x10e>
 800b174:	2200      	movs	r2, #0
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	330b      	adds	r3, #11
 800b17a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b17c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3720      	adds	r7, #32
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	0800f560 	.word	0x0800f560
 800b18c:	0800f468 	.word	0x0800f468

0800b190 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b1a4:	e002      	b.n	800b1ac <follow_path+0x1c>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b1b2:	d0f8      	beq.n	800b1a6 <follow_path+0x16>
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b1ba:	d0f4      	beq.n	800b1a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	2b1f      	cmp	r3, #31
 800b1c8:	d80a      	bhi.n	800b1e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2280      	movs	r2, #128	@ 0x80
 800b1ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7ff fcfa 	bl	800abce <dir_sdi>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	75fb      	strb	r3, [r7, #23]
 800b1de:	e043      	b.n	800b268 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b1e0:	463b      	mov	r3, r7
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ff3f 	bl	800b068 <create_name>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1ee:	7dfb      	ldrb	r3, [r7, #23]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d134      	bne.n	800b25e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff feb0 	bl	800af5a <dir_find>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b204:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00a      	beq.n	800b222 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d127      	bne.n	800b262 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b212:	7afb      	ldrb	r3, [r7, #11]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d122      	bne.n	800b262 <follow_path+0xd2>
 800b21c:	2305      	movs	r3, #5
 800b21e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b220:	e01f      	b.n	800b262 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b222:	7afb      	ldrb	r3, [r7, #11]
 800b224:	f003 0304 	and.w	r3, r3, #4
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d11c      	bne.n	800b266 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	799b      	ldrb	r3, [r3, #6]
 800b230:	f003 0310 	and.w	r3, r3, #16
 800b234:	2b00      	cmp	r3, #0
 800b236:	d102      	bne.n	800b23e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b238:	2305      	movs	r3, #5
 800b23a:	75fb      	strb	r3, [r7, #23]
 800b23c:	e014      	b.n	800b268 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24c:	4413      	add	r3, r2
 800b24e:	4619      	mov	r1, r3
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7ff fe43 	bl	800aedc <ld_clust>
 800b256:	4602      	mov	r2, r0
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b25c:	e7c0      	b.n	800b1e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800b25e:	bf00      	nop
 800b260:	e002      	b.n	800b268 <follow_path+0xd8>
				break;
 800b262:	bf00      	nop
 800b264:	e000      	b.n	800b268 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b266:	bf00      	nop
			}
		}
	}

	return res;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b272:	b480      	push	{r7}
 800b274:	b087      	sub	sp, #28
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b27a:	f04f 33ff 	mov.w	r3, #4294967295
 800b27e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d031      	beq.n	800b2ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	e002      	b.n	800b296 <get_ldnumber+0x24>
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	3301      	adds	r3, #1
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d903      	bls.n	800b2a6 <get_ldnumber+0x34>
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	2b3a      	cmp	r3, #58	@ 0x3a
 800b2a4:	d1f4      	bne.n	800b290 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800b2ac:	d11c      	bne.n	800b2e8 <get_ldnumber+0x76>
			tp = *path;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	60fa      	str	r2, [r7, #12]
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	3b30      	subs	r3, #48	@ 0x30
 800b2be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2b09      	cmp	r3, #9
 800b2c4:	d80e      	bhi.n	800b2e4 <get_ldnumber+0x72>
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d10a      	bne.n	800b2e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d107      	bne.n	800b2e4 <get_ldnumber+0x72>
					vol = (int)i;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	617b      	str	r3, [r7, #20]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	e002      	b.n	800b2ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b2ec:	693b      	ldr	r3, [r7, #16]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	371c      	adds	r7, #28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
	...

0800b2fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	70da      	strb	r2, [r3, #3]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f04f 32ff 	mov.w	r2, #4294967295
 800b312:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff f8dc 	bl	800a4d4 <move_window>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <check_fs+0x2a>
 800b322:	2304      	movs	r3, #4
 800b324:	e038      	b.n	800b398 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	3330      	adds	r3, #48	@ 0x30
 800b32a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe fe20 	bl	8009f74 <ld_word>
 800b334:	4603      	mov	r3, r0
 800b336:	461a      	mov	r2, r3
 800b338:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d001      	beq.n	800b344 <check_fs+0x48>
 800b340:	2303      	movs	r3, #3
 800b342:	e029      	b.n	800b398 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b34a:	2be9      	cmp	r3, #233	@ 0xe9
 800b34c:	d009      	beq.n	800b362 <check_fs+0x66>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b354:	2beb      	cmp	r3, #235	@ 0xeb
 800b356:	d11e      	bne.n	800b396 <check_fs+0x9a>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b35e:	2b90      	cmp	r3, #144	@ 0x90
 800b360:	d119      	bne.n	800b396 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	3330      	adds	r3, #48	@ 0x30
 800b366:	3336      	adds	r3, #54	@ 0x36
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fe fe1b 	bl	8009fa4 <ld_dword>
 800b36e:	4603      	mov	r3, r0
 800b370:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b374:	4a0a      	ldr	r2, [pc, #40]	@ (800b3a0 <check_fs+0xa4>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d101      	bne.n	800b37e <check_fs+0x82>
 800b37a:	2300      	movs	r3, #0
 800b37c:	e00c      	b.n	800b398 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3330      	adds	r3, #48	@ 0x30
 800b382:	3352      	adds	r3, #82	@ 0x52
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe fe0d 	bl	8009fa4 <ld_dword>
 800b38a:	4603      	mov	r3, r0
 800b38c:	4a05      	ldr	r2, [pc, #20]	@ (800b3a4 <check_fs+0xa8>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d101      	bne.n	800b396 <check_fs+0x9a>
 800b392:	2300      	movs	r3, #0
 800b394:	e000      	b.n	800b398 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b396:	2302      	movs	r3, #2
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	00544146 	.word	0x00544146
 800b3a4:	33544146 	.word	0x33544146

0800b3a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b096      	sub	sp, #88	@ 0x58
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7ff ff58 	bl	800b272 <get_ldnumber>
 800b3c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	da01      	bge.n	800b3ce <find_volume+0x26>
 800b3ca:	230b      	movs	r3, #11
 800b3cc:	e22d      	b.n	800b82a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b3ce:	4aa1      	ldr	r2, [pc, #644]	@ (800b654 <find_volume+0x2ac>)
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <find_volume+0x3a>
 800b3de:	230c      	movs	r3, #12
 800b3e0:	e223      	b.n	800b82a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b3e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b3e8:	79fb      	ldrb	r3, [r7, #7]
 800b3ea:	f023 0301 	bic.w	r3, r3, #1
 800b3ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01a      	beq.n	800b42e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fa:	785b      	ldrb	r3, [r3, #1]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fe fd1b 	bl	8009e38 <disk_status>
 800b402:	4603      	mov	r3, r0
 800b404:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10c      	bne.n	800b42e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d007      	beq.n	800b42a <find_volume+0x82>
 800b41a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b41e:	f003 0304 	and.w	r3, r3, #4
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b426:	230a      	movs	r3, #10
 800b428:	e1ff      	b.n	800b82a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b42a:	2300      	movs	r3, #0
 800b42c:	e1fd      	b.n	800b82a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b436:	b2da      	uxtb	r2, r3
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	4618      	mov	r0, r3
 800b442:	f7fe fd13 	bl	8009e6c <disk_initialize>
 800b446:	4603      	mov	r3, r0
 800b448:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b44c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b450:	f003 0301 	and.w	r3, r3, #1
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b458:	2303      	movs	r3, #3
 800b45a:	e1e6      	b.n	800b82a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d007      	beq.n	800b472 <find_volume+0xca>
 800b462:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b466:	f003 0304 	and.w	r3, r3, #4
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b46e:	230a      	movs	r3, #10
 800b470:	e1db      	b.n	800b82a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b476:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b478:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b47a:	f7ff ff3f 	bl	800b2fc <check_fs>
 800b47e:	4603      	mov	r3, r0
 800b480:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b484:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d149      	bne.n	800b520 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b48c:	2300      	movs	r3, #0
 800b48e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b490:	e01e      	b.n	800b4d0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b494:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b49a:	011b      	lsls	r3, r3, #4
 800b49c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b4a0:	4413      	add	r3, r2
 800b4a2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d006      	beq.n	800b4bc <find_volume+0x114>
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe fd76 	bl	8009fa4 <ld_dword>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	e000      	b.n	800b4be <find_volume+0x116>
 800b4bc:	2200      	movs	r2, #0
 800b4be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	3358      	adds	r3, #88	@ 0x58
 800b4c4:	443b      	add	r3, r7
 800b4c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d9dd      	bls.n	800b492 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b4da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <find_volume+0x13e>
 800b4e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	3358      	adds	r3, #88	@ 0x58
 800b4ec:	443b      	add	r3, r7
 800b4ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b4f2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d005      	beq.n	800b506 <find_volume+0x15e>
 800b4fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b4fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4fe:	f7ff fefd 	bl	800b2fc <check_fs>
 800b502:	4603      	mov	r3, r0
 800b504:	e000      	b.n	800b508 <find_volume+0x160>
 800b506:	2303      	movs	r3, #3
 800b508:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b50c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b510:	2b01      	cmp	r3, #1
 800b512:	d905      	bls.n	800b520 <find_volume+0x178>
 800b514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b516:	3301      	adds	r3, #1
 800b518:	643b      	str	r3, [r7, #64]	@ 0x40
 800b51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d9e2      	bls.n	800b4e6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b520:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b524:	2b04      	cmp	r3, #4
 800b526:	d101      	bne.n	800b52c <find_volume+0x184>
 800b528:	2301      	movs	r3, #1
 800b52a:	e17e      	b.n	800b82a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b52c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b530:	2b01      	cmp	r3, #1
 800b532:	d901      	bls.n	800b538 <find_volume+0x190>
 800b534:	230d      	movs	r3, #13
 800b536:	e178      	b.n	800b82a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53a:	3330      	adds	r3, #48	@ 0x30
 800b53c:	330b      	adds	r3, #11
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe fd18 	bl	8009f74 <ld_word>
 800b544:	4603      	mov	r3, r0
 800b546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b54a:	d001      	beq.n	800b550 <find_volume+0x1a8>
 800b54c:	230d      	movs	r3, #13
 800b54e:	e16c      	b.n	800b82a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	3330      	adds	r3, #48	@ 0x30
 800b554:	3316      	adds	r3, #22
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe fd0c 	bl	8009f74 <ld_word>
 800b55c:	4603      	mov	r3, r0
 800b55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <find_volume+0x1cc>
 800b566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b568:	3330      	adds	r3, #48	@ 0x30
 800b56a:	3324      	adds	r3, #36	@ 0x24
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe fd19 	bl	8009fa4 <ld_dword>
 800b572:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b578:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b586:	789b      	ldrb	r3, [r3, #2]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d005      	beq.n	800b598 <find_volume+0x1f0>
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	789b      	ldrb	r3, [r3, #2]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d001      	beq.n	800b598 <find_volume+0x1f0>
 800b594:	230d      	movs	r3, #13
 800b596:	e148      	b.n	800b82a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59a:	789b      	ldrb	r3, [r3, #2]
 800b59c:	461a      	mov	r2, r3
 800b59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5a0:	fb02 f303 	mul.w	r3, r2, r3
 800b5a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	895b      	ldrh	r3, [r3, #10]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d008      	beq.n	800b5cc <find_volume+0x224>
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5bc:	895b      	ldrh	r3, [r3, #10]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c2:	895b      	ldrh	r3, [r3, #10]
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <find_volume+0x228>
 800b5cc:	230d      	movs	r3, #13
 800b5ce:	e12c      	b.n	800b82a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d2:	3330      	adds	r3, #48	@ 0x30
 800b5d4:	3311      	adds	r3, #17
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fccc 	bl	8009f74 <ld_word>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e6:	891b      	ldrh	r3, [r3, #8]
 800b5e8:	f003 030f 	and.w	r3, r3, #15
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <find_volume+0x24e>
 800b5f2:	230d      	movs	r3, #13
 800b5f4:	e119      	b.n	800b82a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f8:	3330      	adds	r3, #48	@ 0x30
 800b5fa:	3313      	adds	r3, #19
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fcb9 	bl	8009f74 <ld_word>
 800b602:	4603      	mov	r3, r0
 800b604:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d106      	bne.n	800b61a <find_volume+0x272>
 800b60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60e:	3330      	adds	r3, #48	@ 0x30
 800b610:	3320      	adds	r3, #32
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe fcc6 	bl	8009fa4 <ld_dword>
 800b618:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61c:	3330      	adds	r3, #48	@ 0x30
 800b61e:	330e      	adds	r3, #14
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fca7 	bl	8009f74 <ld_word>
 800b626:	4603      	mov	r3, r0
 800b628:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b62a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <find_volume+0x28c>
 800b630:	230d      	movs	r3, #13
 800b632:	e0fa      	b.n	800b82a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b634:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b638:	4413      	add	r3, r2
 800b63a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b63c:	8912      	ldrh	r2, [r2, #8]
 800b63e:	0912      	lsrs	r2, r2, #4
 800b640:	b292      	uxth	r2, r2
 800b642:	4413      	add	r3, r2
 800b644:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d204      	bcs.n	800b658 <find_volume+0x2b0>
 800b64e:	230d      	movs	r3, #13
 800b650:	e0eb      	b.n	800b82a <find_volume+0x482>
 800b652:	bf00      	nop
 800b654:	20001410 	.word	0x20001410
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b660:	8952      	ldrh	r2, [r2, #10]
 800b662:	fbb3 f3f2 	udiv	r3, r3, r2
 800b666:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <find_volume+0x2ca>
 800b66e:	230d      	movs	r3, #13
 800b670:	e0db      	b.n	800b82a <find_volume+0x482>
		fmt = FS_FAT32;
 800b672:	2303      	movs	r3, #3
 800b674:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b67e:	4293      	cmp	r3, r2
 800b680:	d802      	bhi.n	800b688 <find_volume+0x2e0>
 800b682:	2302      	movs	r3, #2
 800b684:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b68e:	4293      	cmp	r3, r2
 800b690:	d802      	bhi.n	800b698 <find_volume+0x2f0>
 800b692:	2301      	movs	r3, #1
 800b694:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69a:	1c9a      	adds	r2, r3, #2
 800b69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b6a4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b6a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6aa:	441a      	add	r2, r3
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ae:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b6b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b4:	441a      	add	r2, r3
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b6ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d11e      	bne.n	800b700 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c4:	3330      	adds	r3, #48	@ 0x30
 800b6c6:	332a      	adds	r3, #42	@ 0x2a
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe fc53 	bl	8009f74 <ld_word>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <find_volume+0x330>
 800b6d4:	230d      	movs	r3, #13
 800b6d6:	e0a8      	b.n	800b82a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6da:	891b      	ldrh	r3, [r3, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <find_volume+0x33c>
 800b6e0:	230d      	movs	r3, #13
 800b6e2:	e0a2      	b.n	800b82a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e6:	3330      	adds	r3, #48	@ 0x30
 800b6e8:	332c      	adds	r3, #44	@ 0x2c
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe fc5a 	bl	8009fa4 <ld_dword>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6fe:	e01f      	b.n	800b740 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b702:	891b      	ldrh	r3, [r3, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <find_volume+0x364>
 800b708:	230d      	movs	r3, #13
 800b70a:	e08e      	b.n	800b82a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70e:	6a1a      	ldr	r2, [r3, #32]
 800b710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b712:	441a      	add	r2, r3
 800b714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b716:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d103      	bne.n	800b728 <find_volume+0x380>
 800b720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	e00a      	b.n	800b73e <find_volume+0x396>
 800b728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72a:	695a      	ldr	r2, [r3, #20]
 800b72c:	4613      	mov	r3, r2
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4413      	add	r3, r2
 800b732:	085a      	lsrs	r2, r3, #1
 800b734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	f003 0301 	and.w	r3, r3, #1
 800b73c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b73e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b742:	699a      	ldr	r2, [r3, #24]
 800b744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b746:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b74a:	0a5b      	lsrs	r3, r3, #9
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d201      	bcs.n	800b754 <find_volume+0x3ac>
 800b750:	230d      	movs	r3, #13
 800b752:	e06a      	b.n	800b82a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b756:	f04f 32ff 	mov.w	r2, #4294967295
 800b75a:	611a      	str	r2, [r3, #16]
 800b75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75e:	691a      	ldr	r2, [r3, #16]
 800b760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b762:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b766:	2280      	movs	r2, #128	@ 0x80
 800b768:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b76a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d149      	bne.n	800b806 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b774:	3330      	adds	r3, #48	@ 0x30
 800b776:	3330      	adds	r3, #48	@ 0x30
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fe fbfb 	bl	8009f74 <ld_word>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b01      	cmp	r3, #1
 800b782:	d140      	bne.n	800b806 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b786:	3301      	adds	r3, #1
 800b788:	4619      	mov	r1, r3
 800b78a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b78c:	f7fe fea2 	bl	800a4d4 <move_window>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d137      	bne.n	800b806 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b798:	2200      	movs	r2, #0
 800b79a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	3330      	adds	r3, #48	@ 0x30
 800b7a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe fbe5 	bl	8009f74 <ld_word>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d127      	bne.n	800b806 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b8:	3330      	adds	r3, #48	@ 0x30
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe fbf2 	bl	8009fa4 <ld_dword>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b834 <find_volume+0x48c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d11e      	bne.n	800b806 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	3330      	adds	r3, #48	@ 0x30
 800b7cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe fbe7 	bl	8009fa4 <ld_dword>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4a17      	ldr	r2, [pc, #92]	@ (800b838 <find_volume+0x490>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d113      	bne.n	800b806 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e0:	3330      	adds	r3, #48	@ 0x30
 800b7e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe fbdc 	bl	8009fa4 <ld_dword>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f4:	3330      	adds	r3, #48	@ 0x30
 800b7f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fbd2 	bl	8009fa4 <ld_dword>
 800b800:	4602      	mov	r2, r0
 800b802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b804:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b808:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b80c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b80e:	4b0b      	ldr	r3, [pc, #44]	@ (800b83c <find_volume+0x494>)
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	4b09      	ldr	r3, [pc, #36]	@ (800b83c <find_volume+0x494>)
 800b818:	801a      	strh	r2, [r3, #0]
 800b81a:	4b08      	ldr	r3, [pc, #32]	@ (800b83c <find_volume+0x494>)
 800b81c:	881a      	ldrh	r2, [r3, #0]
 800b81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b820:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b822:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b824:	f7fe fdee 	bl	800a404 <clear_lock>
#endif
	return FR_OK;
 800b828:	2300      	movs	r3, #0
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3758      	adds	r7, #88	@ 0x58
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	41615252 	.word	0x41615252
 800b838:	61417272 	.word	0x61417272
 800b83c:	20001414 	.word	0x20001414

0800b840 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b84a:	2309      	movs	r3, #9
 800b84c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d01c      	beq.n	800b88e <validate+0x4e>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d018      	beq.n	800b88e <validate+0x4e>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d013      	beq.n	800b88e <validate+0x4e>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	889a      	ldrh	r2, [r3, #4]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	88db      	ldrh	r3, [r3, #6]
 800b870:	429a      	cmp	r2, r3
 800b872:	d10c      	bne.n	800b88e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	785b      	ldrb	r3, [r3, #1]
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fadc 	bl	8009e38 <disk_status>
 800b880:	4603      	mov	r3, r0
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <validate+0x4e>
			res = FR_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <validate+0x5a>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	e000      	b.n	800b89c <validate+0x5c>
 800b89a:	2300      	movs	r3, #0
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	6013      	str	r3, [r2, #0]
	return res;
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
	...

0800b8ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b8be:	f107 0310 	add.w	r3, r7, #16
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fcd5 	bl	800b272 <get_ldnumber>
 800b8c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	da01      	bge.n	800b8d4 <f_mount+0x28>
 800b8d0:	230b      	movs	r3, #11
 800b8d2:	e02b      	b.n	800b92c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b8d4:	4a17      	ldr	r2, [pc, #92]	@ (800b934 <f_mount+0x88>)
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d005      	beq.n	800b8f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b8e4:	69b8      	ldr	r0, [r7, #24]
 800b8e6:	f7fe fd8d 	bl	800a404 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d002      	beq.n	800b8fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	490d      	ldr	r1, [pc, #52]	@ (800b934 <f_mount+0x88>)
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <f_mount+0x66>
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d001      	beq.n	800b916 <f_mount+0x6a>
 800b912:	2300      	movs	r3, #0
 800b914:	e00a      	b.n	800b92c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b916:	f107 010c 	add.w	r1, r7, #12
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	2200      	movs	r2, #0
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff fd41 	bl	800b3a8 <find_volume>
 800b926:	4603      	mov	r3, r0
 800b928:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3720      	adds	r7, #32
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20001410 	.word	0x20001410

0800b938 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b098      	sub	sp, #96	@ 0x60
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	4613      	mov	r3, r2
 800b944:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <f_open+0x18>
 800b94c:	2309      	movs	r3, #9
 800b94e:	e1a9      	b.n	800bca4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b956:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b958:	79fa      	ldrb	r2, [r7, #7]
 800b95a:	f107 0110 	add.w	r1, r7, #16
 800b95e:	f107 0308 	add.w	r3, r7, #8
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff fd20 	bl	800b3a8 <find_volume>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b96e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b972:	2b00      	cmp	r3, #0
 800b974:	f040 818d 	bne.w	800bc92 <f_open+0x35a>
		dj.obj.fs = fs;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	f107 0314 	add.w	r3, r7, #20
 800b982:	4611      	mov	r1, r2
 800b984:	4618      	mov	r0, r3
 800b986:	f7ff fc03 	bl	800b190 <follow_path>
 800b98a:	4603      	mov	r3, r0
 800b98c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b990:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b994:	2b00      	cmp	r3, #0
 800b996:	d118      	bne.n	800b9ca <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b998:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b99c:	b25b      	sxtb	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	da03      	bge.n	800b9aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800b9a2:	2306      	movs	r3, #6
 800b9a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b9a8:	e00f      	b.n	800b9ca <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	bf8c      	ite	hi
 800b9b0:	2301      	movhi	r3, #1
 800b9b2:	2300      	movls	r3, #0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f107 0314 	add.w	r3, r7, #20
 800b9bc:	4611      	mov	r1, r2
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fe fbd8 	bl	800a174 <chk_lock>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	f003 031c 	and.w	r3, r3, #28
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d07f      	beq.n	800bad4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b9d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d017      	beq.n	800ba0c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b9dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d10e      	bne.n	800ba02 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b9e4:	f7fe fc22 	bl	800a22c <enq_lock>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d006      	beq.n	800b9fc <f_open+0xc4>
 800b9ee:	f107 0314 	add.w	r3, r7, #20
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7ff fb06 	bl	800b004 <dir_register>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	e000      	b.n	800b9fe <f_open+0xc6>
 800b9fc:	2312      	movs	r3, #18
 800b9fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	f043 0308 	orr.w	r3, r3, #8
 800ba08:	71fb      	strb	r3, [r7, #7]
 800ba0a:	e010      	b.n	800ba2e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ba0c:	7ebb      	ldrb	r3, [r7, #26]
 800ba0e:	f003 0311 	and.w	r3, r3, #17
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <f_open+0xe6>
					res = FR_DENIED;
 800ba16:	2307      	movs	r3, #7
 800ba18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ba1c:	e007      	b.n	800ba2e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	f003 0304 	and.w	r3, r3, #4
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <f_open+0xf6>
 800ba28:	2308      	movs	r3, #8
 800ba2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ba2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d168      	bne.n	800bb08 <f_open+0x1d0>
 800ba36:	79fb      	ldrb	r3, [r7, #7]
 800ba38:	f003 0308 	and.w	r3, r3, #8
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d063      	beq.n	800bb08 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ba40:	f7fe f844 	bl	8009acc <get_fattime>
 800ba44:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ba46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba48:	330e      	adds	r3, #14
 800ba4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fae7 	bl	800a020 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ba52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba54:	3316      	adds	r3, #22
 800ba56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fe fae1 	bl	800a020 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ba5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba60:	330b      	adds	r3, #11
 800ba62:	2220      	movs	r2, #32
 800ba64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff fa35 	bl	800aedc <ld_clust>
 800ba72:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ba78:	2200      	movs	r2, #0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff fa4d 	bl	800af1a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ba80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba82:	331c      	adds	r3, #28
 800ba84:	2100      	movs	r1, #0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe faca 	bl	800a020 <st_dword>
					fs->wflag = 1;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ba92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d037      	beq.n	800bb08 <f_open+0x1d0>
						dw = fs->winsect;
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ba9e:	f107 0314 	add.w	r3, r7, #20
 800baa2:	2200      	movs	r2, #0
 800baa4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe ff60 	bl	800a96c <remove_chain>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800bab2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d126      	bne.n	800bb08 <f_open+0x1d0>
							res = move_window(fs, dw);
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe fd08 	bl	800a4d4 <move_window>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bace:	3a01      	subs	r2, #1
 800bad0:	60da      	str	r2, [r3, #12]
 800bad2:	e019      	b.n	800bb08 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bad4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d115      	bne.n	800bb08 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800badc:	7ebb      	ldrb	r3, [r7, #26]
 800bade:	f003 0310 	and.w	r3, r3, #16
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <f_open+0x1b6>
					res = FR_NO_FILE;
 800bae6:	2304      	movs	r3, #4
 800bae8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800baec:	e00c      	b.n	800bb08 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	f003 0302 	and.w	r3, r3, #2
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d007      	beq.n	800bb08 <f_open+0x1d0>
 800baf8:	7ebb      	ldrb	r3, [r7, #26]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d002      	beq.n	800bb08 <f_open+0x1d0>
						res = FR_DENIED;
 800bb02:	2307      	movs	r3, #7
 800bb04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bb08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d126      	bne.n	800bb5e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb10:	79fb      	ldrb	r3, [r7, #7]
 800bb12:	f003 0308 	and.w	r3, r3, #8
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d003      	beq.n	800bb22 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bb2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bb30:	79fb      	ldrb	r3, [r7, #7]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	bf8c      	ite	hi
 800bb36:	2301      	movhi	r3, #1
 800bb38:	2300      	movls	r3, #0
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	4611      	mov	r1, r2
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fb93 	bl	800a270 <inc_lock>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d102      	bne.n	800bb5e <f_open+0x226>
 800bb58:	2302      	movs	r3, #2
 800bb5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bb5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f040 8095 	bne.w	800bc92 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff f9b4 	bl	800aedc <ld_clust>
 800bb74:	4602      	mov	r2, r0
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bb7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb7c:	331c      	adds	r3, #28
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fa10 	bl	8009fa4 <ld_dword>
 800bb84:	4602      	mov	r2, r0
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	88da      	ldrh	r2, [r3, #6]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	79fa      	ldrb	r2, [r7, #7]
 800bba2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3330      	adds	r3, #48	@ 0x30
 800bbba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe fa7a 	bl	800a0ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bbc6:	79fb      	ldrb	r3, [r7, #7]
 800bbc8:	f003 0320 	and.w	r3, r3, #32
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d060      	beq.n	800bc92 <f_open+0x35a>
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d05c      	beq.n	800bc92 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68da      	ldr	r2, [r3, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	895b      	ldrh	r3, [r3, #10]
 800bbe4:	025b      	lsls	r3, r3, #9
 800bbe6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbf4:	e016      	b.n	800bc24 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe fd25 	bl	800a64a <get_fat>
 800bc00:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bc02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d802      	bhi.n	800bc0e <f_open+0x2d6>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bc0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc14:	d102      	bne.n	800bc1c <f_open+0x2e4>
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d103      	bne.n	800bc34 <f_open+0x2fc>
 800bc2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d8e0      	bhi.n	800bbf6 <f_open+0x2be>
				}
				fp->clust = clst;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bc3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d127      	bne.n	800bc92 <f_open+0x35a>
 800bc42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d022      	beq.n	800bc92 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe fcdb 	bl	800a60c <clust2sect>
 800bc56:	6478      	str	r0, [r7, #68]	@ 0x44
 800bc58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d103      	bne.n	800bc66 <f_open+0x32e>
						res = FR_INT_ERR;
 800bc5e:	2302      	movs	r3, #2
 800bc60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bc64:	e015      	b.n	800bc92 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bc66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc68:	0a5a      	lsrs	r2, r3, #9
 800bc6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc6c:	441a      	add	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	7858      	ldrb	r0, [r3, #1]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6a1a      	ldr	r2, [r3, #32]
 800bc80:	2301      	movs	r3, #1
 800bc82:	f7fe f919 	bl	8009eb8 <disk_read>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <f_open+0x35a>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bc92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <f_open+0x368>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bca0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3760      	adds	r7, #96	@ 0x60
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	@ 0x38
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f107 0214 	add.w	r2, r7, #20
 800bcca:	4611      	mov	r1, r2
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fdb7 	bl	800b840 <validate>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bcd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d107      	bne.n	800bcf0 <f_read+0x44>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	7d5b      	ldrb	r3, [r3, #21]
 800bce4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bce8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <f_read+0x4a>
 800bcf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcf4:	e115      	b.n	800bf22 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	7d1b      	ldrb	r3, [r3, #20]
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <f_read+0x5a>
 800bd02:	2307      	movs	r3, #7
 800bd04:	e10d      	b.n	800bf22 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	68da      	ldr	r2, [r3, #12]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	f240 80fe 	bls.w	800bf18 <f_read+0x26c>
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bd20:	e0fa      	b.n	800bf18 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 80c6 	bne.w	800bebc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	0a5b      	lsrs	r3, r3, #9
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	8952      	ldrh	r2, [r2, #10]
 800bd3a:	3a01      	subs	r2, #1
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d12f      	bne.n	800bda6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d103      	bne.n	800bd56 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd54:	e013      	b.n	800bd7e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d007      	beq.n	800bd6e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	4619      	mov	r1, r3
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7fe fefe 	bl	800ab66 <clmt_clust>
 800bd6a:	6338      	str	r0, [r7, #48]	@ 0x30
 800bd6c:	e007      	b.n	800bd7e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	4619      	mov	r1, r3
 800bd76:	4610      	mov	r0, r2
 800bd78:	f7fe fc67 	bl	800a64a <get_fat>
 800bd7c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d804      	bhi.n	800bd8e <f_read+0xe2>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2202      	movs	r2, #2
 800bd88:	755a      	strb	r2, [r3, #21]
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	e0c9      	b.n	800bf22 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd94:	d104      	bne.n	800bda0 <f_read+0xf4>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	755a      	strb	r2, [r3, #21]
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e0c0      	b.n	800bf22 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bda4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	4619      	mov	r1, r3
 800bdae:	4610      	mov	r0, r2
 800bdb0:	f7fe fc2c 	bl	800a60c <clust2sect>
 800bdb4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d104      	bne.n	800bdc6 <f_read+0x11a>
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	755a      	strb	r2, [r3, #21]
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e0ad      	b.n	800bf22 <f_read+0x276>
			sect += csect;
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	4413      	add	r3, r2
 800bdcc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	0a5b      	lsrs	r3, r3, #9
 800bdd2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d039      	beq.n	800be4e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bdda:	69fa      	ldr	r2, [r7, #28]
 800bddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdde:	4413      	add	r3, r2
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	8952      	ldrh	r2, [r2, #10]
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d905      	bls.n	800bdf4 <f_read+0x148>
					cc = fs->csize - csect;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	895b      	ldrh	r3, [r3, #10]
 800bdec:	461a      	mov	r2, r3
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	7858      	ldrb	r0, [r3, #1]
 800bdf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bdfe:	f7fe f85b 	bl	8009eb8 <disk_read>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d004      	beq.n	800be12 <f_read+0x166>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2201      	movs	r2, #1
 800be0c:	755a      	strb	r2, [r3, #21]
 800be0e:	2301      	movs	r3, #1
 800be10:	e087      	b.n	800bf22 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	7d1b      	ldrb	r3, [r3, #20]
 800be16:	b25b      	sxtb	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	da14      	bge.n	800be46 <f_read+0x19a>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6a1a      	ldr	r2, [r3, #32]
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be26:	429a      	cmp	r2, r3
 800be28:	d90d      	bls.n	800be46 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6a1a      	ldr	r2, [r3, #32]
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	025b      	lsls	r3, r3, #9
 800be34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be36:	18d0      	adds	r0, r2, r3
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	3330      	adds	r3, #48	@ 0x30
 800be3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be40:	4619      	mov	r1, r3
 800be42:	f7fe f919 	bl	800a078 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800be46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be48:	025b      	lsls	r3, r3, #9
 800be4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800be4c:	e050      	b.n	800bef0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	429a      	cmp	r2, r3
 800be56:	d02e      	beq.n	800beb6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	7d1b      	ldrb	r3, [r3, #20]
 800be5c:	b25b      	sxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	da18      	bge.n	800be94 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	7858      	ldrb	r0, [r3, #1]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a1a      	ldr	r2, [r3, #32]
 800be70:	2301      	movs	r3, #1
 800be72:	f7fe f841 	bl	8009ef8 <disk_write>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d004      	beq.n	800be86 <f_read+0x1da>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	755a      	strb	r2, [r3, #21]
 800be82:	2301      	movs	r3, #1
 800be84:	e04d      	b.n	800bf22 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	7d1b      	ldrb	r3, [r3, #20]
 800be8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	7858      	ldrb	r0, [r3, #1]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be9e:	2301      	movs	r3, #1
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	f7fe f809 	bl	8009eb8 <disk_read>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <f_read+0x20a>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	755a      	strb	r2, [r3, #21]
 800beb2:	2301      	movs	r3, #1
 800beb4:	e035      	b.n	800bf22 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800beca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d901      	bls.n	800bed6 <f_read+0x22a>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee4:	4413      	add	r3, r2
 800bee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bee8:	4619      	mov	r1, r3
 800beea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800beec:	f7fe f8c4 	bl	800a078 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef4:	4413      	add	r3, r2
 800bef6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	699a      	ldr	r2, [r3, #24]
 800befc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befe:	441a      	add	r2, r3
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	619a      	str	r2, [r3, #24]
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0a:	441a      	add	r2, r3
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f47f af01 	bne.w	800bd22 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3738      	adds	r7, #56	@ 0x38
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b08c      	sub	sp, #48	@ 0x30
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	60f8      	str	r0, [r7, #12]
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f107 0210 	add.w	r2, r7, #16
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff fc78 	bl	800b840 <validate>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d107      	bne.n	800bf6e <f_write+0x44>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	7d5b      	ldrb	r3, [r3, #21]
 800bf62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bf66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d002      	beq.n	800bf74 <f_write+0x4a>
 800bf6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf72:	e14b      	b.n	800c20c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	7d1b      	ldrb	r3, [r3, #20]
 800bf78:	f003 0302 	and.w	r3, r3, #2
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <f_write+0x5a>
 800bf80:	2307      	movs	r3, #7
 800bf82:	e143      	b.n	800c20c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	699a      	ldr	r2, [r3, #24]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	441a      	add	r2, r3
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	f080 812d 	bcs.w	800c1f0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	43db      	mvns	r3, r3
 800bf9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bf9e:	e127      	b.n	800c1f0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f040 80e3 	bne.w	800c174 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	0a5b      	lsrs	r3, r3, #9
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	8952      	ldrh	r2, [r2, #10]
 800bfb8:	3a01      	subs	r2, #1
 800bfba:	4013      	ands	r3, r2
 800bfbc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d143      	bne.n	800c04c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10c      	bne.n	800bfe6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11a      	bne.n	800c00e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2100      	movs	r1, #0
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fd2a 	bl	800aa36 <create_chain>
 800bfe2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bfe4:	e013      	b.n	800c00e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d007      	beq.n	800bffe <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	4619      	mov	r1, r3
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7fe fdb6 	bl	800ab66 <clmt_clust>
 800bffa:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bffc:	e007      	b.n	800c00e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	69db      	ldr	r3, [r3, #28]
 800c004:	4619      	mov	r1, r3
 800c006:	4610      	mov	r0, r2
 800c008:	f7fe fd15 	bl	800aa36 <create_chain>
 800c00c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 80f2 	beq.w	800c1fa <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d104      	bne.n	800c026 <f_write+0xfc>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2202      	movs	r2, #2
 800c020:	755a      	strb	r2, [r3, #21]
 800c022:	2302      	movs	r3, #2
 800c024:	e0f2      	b.n	800c20c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02c:	d104      	bne.n	800c038 <f_write+0x10e>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2201      	movs	r2, #1
 800c032:	755a      	strb	r2, [r3, #21]
 800c034:	2301      	movs	r3, #1
 800c036:	e0e9      	b.n	800c20c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c03c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d102      	bne.n	800c04c <f_write+0x122>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c04a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	7d1b      	ldrb	r3, [r3, #20]
 800c050:	b25b      	sxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	da18      	bge.n	800c088 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	7858      	ldrb	r0, [r3, #1]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6a1a      	ldr	r2, [r3, #32]
 800c064:	2301      	movs	r3, #1
 800c066:	f7fd ff47 	bl	8009ef8 <disk_write>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d004      	beq.n	800c07a <f_write+0x150>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2201      	movs	r2, #1
 800c074:	755a      	strb	r2, [r3, #21]
 800c076:	2301      	movs	r3, #1
 800c078:	e0c8      	b.n	800c20c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	7d1b      	ldrb	r3, [r3, #20]
 800c07e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c082:	b2da      	uxtb	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	4619      	mov	r1, r3
 800c090:	4610      	mov	r0, r2
 800c092:	f7fe fabb 	bl	800a60c <clust2sect>
 800c096:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d104      	bne.n	800c0a8 <f_write+0x17e>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	755a      	strb	r2, [r3, #21]
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	e0b1      	b.n	800c20c <f_write+0x2e2>
			sect += csect;
 800c0a8:	697a      	ldr	r2, [r7, #20]
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	0a5b      	lsrs	r3, r3, #9
 800c0b4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d03c      	beq.n	800c136 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	693a      	ldr	r2, [r7, #16]
 800c0c4:	8952      	ldrh	r2, [r2, #10]
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d905      	bls.n	800c0d6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	895b      	ldrh	r3, [r3, #10]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	7858      	ldrb	r0, [r3, #1]
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	69f9      	ldr	r1, [r7, #28]
 800c0e0:	f7fd ff0a 	bl	8009ef8 <disk_write>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <f_write+0x1ca>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	755a      	strb	r2, [r3, #21]
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e08b      	b.n	800c20c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6a1a      	ldr	r2, [r3, #32]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	6a3a      	ldr	r2, [r7, #32]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d915      	bls.n	800c12e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6a1a      	ldr	r2, [r3, #32]
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	025b      	lsls	r3, r3, #9
 800c112:	69fa      	ldr	r2, [r7, #28]
 800c114:	4413      	add	r3, r2
 800c116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c11a:	4619      	mov	r1, r3
 800c11c:	f7fd ffac 	bl	800a078 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	7d1b      	ldrb	r3, [r3, #20]
 800c124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c12e:	6a3b      	ldr	r3, [r7, #32]
 800c130:	025b      	lsls	r3, r3, #9
 800c132:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c134:	e03f      	b.n	800c1b6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d016      	beq.n	800c16e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	699a      	ldr	r2, [r3, #24]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c148:	429a      	cmp	r2, r3
 800c14a:	d210      	bcs.n	800c16e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	7858      	ldrb	r0, [r3, #1]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c156:	2301      	movs	r3, #1
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	f7fd fead 	bl	8009eb8 <disk_read>
 800c15e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c160:	2b00      	cmp	r3, #0
 800c162:	d004      	beq.n	800c16e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	755a      	strb	r2, [r3, #21]
 800c16a:	2301      	movs	r3, #1
 800c16c:	e04e      	b.n	800c20c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c180:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d901      	bls.n	800c18e <f_write+0x264>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19c:	4413      	add	r3, r2
 800c19e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1a0:	69f9      	ldr	r1, [r7, #28]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fd ff68 	bl	800a078 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	7d1b      	ldrb	r3, [r3, #20]
 800c1ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c1b6:	69fa      	ldr	r2, [r7, #28]
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ba:	4413      	add	r3, r2
 800c1bc:	61fb      	str	r3, [r7, #28]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	699a      	ldr	r2, [r3, #24]
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c4:	441a      	add	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	619a      	str	r2, [r3, #24]
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	699b      	ldr	r3, [r3, #24]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	bf38      	it	cc
 800c1d6:	461a      	movcc	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	60da      	str	r2, [r3, #12]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e2:	441a      	add	r2, r3
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	601a      	str	r2, [r3, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f47f aed4 	bne.w	800bfa0 <f_write+0x76>
 800c1f8:	e000      	b.n	800c1fc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c1fa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	7d1b      	ldrb	r3, [r3, #20]
 800c200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c204:	b2da      	uxtb	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3730      	adds	r7, #48	@ 0x30
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f107 0208 	add.w	r2, r7, #8
 800c222:	4611      	mov	r1, r2
 800c224:	4618      	mov	r0, r3
 800c226:	f7ff fb0b 	bl	800b840 <validate>
 800c22a:	4603      	mov	r3, r0
 800c22c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d168      	bne.n	800c306 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	7d1b      	ldrb	r3, [r3, #20]
 800c238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d062      	beq.n	800c306 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	7d1b      	ldrb	r3, [r3, #20]
 800c244:	b25b      	sxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	da15      	bge.n	800c276 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	7858      	ldrb	r0, [r3, #1]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6a1a      	ldr	r2, [r3, #32]
 800c258:	2301      	movs	r3, #1
 800c25a:	f7fd fe4d 	bl	8009ef8 <disk_write>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <f_sync+0x54>
 800c264:	2301      	movs	r3, #1
 800c266:	e04f      	b.n	800c308 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7d1b      	ldrb	r3, [r3, #20]
 800c26c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c270:	b2da      	uxtb	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c276:	f7fd fc29 	bl	8009acc <get_fattime>
 800c27a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c282:	4619      	mov	r1, r3
 800c284:	4610      	mov	r0, r2
 800c286:	f7fe f925 	bl	800a4d4 <move_window>
 800c28a:	4603      	mov	r3, r0
 800c28c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c28e:	7dfb      	ldrb	r3, [r7, #23]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d138      	bne.n	800c306 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c298:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	330b      	adds	r3, #11
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	330b      	adds	r3, #11
 800c2a4:	f042 0220 	orr.w	r2, r2, #32
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6818      	ldr	r0, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	68f9      	ldr	r1, [r7, #12]
 800c2b8:	f7fe fe2f 	bl	800af1a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f103 021c 	add.w	r2, r3, #28
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7fd fea9 	bl	800a020 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3316      	adds	r3, #22
 800c2d2:	6939      	ldr	r1, [r7, #16]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fd fea3 	bl	800a020 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3312      	adds	r3, #18
 800c2de:	2100      	movs	r1, #0
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fd fe82 	bl	8009fea <st_word>
					fs->wflag = 1;
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fe f91e 	bl	800a530 <sync_fs>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	7d1b      	ldrb	r3, [r3, #20]
 800c2fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c300:	b2da      	uxtb	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c306:	7dfb      	ldrb	r3, [r7, #23]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f7ff ff7b 	bl	800c214 <f_sync>
 800c31e:	4603      	mov	r3, r0
 800c320:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d118      	bne.n	800c35a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f107 0208 	add.w	r2, r7, #8
 800c32e:	4611      	mov	r1, r2
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fa85 	bl	800b840 <validate>
 800c336:	4603      	mov	r3, r0
 800c338:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10c      	bne.n	800c35a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe f821 	bl	800a38c <dec_lock>
 800c34a:	4603      	mov	r3, r0
 800c34c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d102      	bne.n	800c35a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b090      	sub	sp, #64	@ 0x40
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f107 0208 	add.w	r2, r7, #8
 800c374:	4611      	mov	r1, r2
 800c376:	4618      	mov	r0, r3
 800c378:	f7ff fa62 	bl	800b840 <validate>
 800c37c:	4603      	mov	r3, r0
 800c37e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c382:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c386:	2b00      	cmp	r3, #0
 800c388:	d103      	bne.n	800c392 <f_lseek+0x2e>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	7d5b      	ldrb	r3, [r3, #21]
 800c38e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c392:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <f_lseek+0x3c>
 800c39a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c39e:	e1e6      	b.n	800c76e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f000 80d1 	beq.w	800c54c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b0:	d15a      	bne.n	800c468 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	1d1a      	adds	r2, r3, #4
 800c3bc:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	617b      	str	r3, [r7, #20]
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d03a      	beq.n	800c448 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	613b      	str	r3, [r7, #16]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3dc:	3302      	adds	r3, #2
 800c3de:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e2:	60fb      	str	r3, [r7, #12]
 800c3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fe f92b 	bl	800a64a <get_fat>
 800c3f4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d804      	bhi.n	800c406 <f_lseek+0xa2>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2202      	movs	r2, #2
 800c400:	755a      	strb	r2, [r3, #21]
 800c402:	2302      	movs	r3, #2
 800c404:	e1b3      	b.n	800c76e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40c:	d104      	bne.n	800c418 <f_lseek+0xb4>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	755a      	strb	r2, [r3, #21]
 800c414:	2301      	movs	r3, #1
 800c416:	e1aa      	b.n	800c76e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	3301      	adds	r3, #1
 800c41c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c41e:	429a      	cmp	r2, r3
 800c420:	d0de      	beq.n	800c3e0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	429a      	cmp	r2, r3
 800c428:	d809      	bhi.n	800c43e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42c:	1d1a      	adds	r2, r3, #4
 800c42e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	1d1a      	adds	r2, r3, #4
 800c438:	627a      	str	r2, [r7, #36]	@ 0x24
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c444:	429a      	cmp	r2, r3
 800c446:	d3c4      	bcc.n	800c3d2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c44e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	429a      	cmp	r2, r3
 800c456:	d803      	bhi.n	800c460 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	e184      	b.n	800c76a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c460:	2311      	movs	r3, #17
 800c462:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c466:	e180      	b.n	800c76a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	683a      	ldr	r2, [r7, #0]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d902      	bls.n	800c478 <f_lseek+0x114>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 8172 	beq.w	800c76a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	3b01      	subs	r3, #1
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7fe fb6a 	bl	800ab66 <clmt_clust>
 800c492:	4602      	mov	r2, r0
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	69db      	ldr	r3, [r3, #28]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	f7fe f8b3 	bl	800a60c <clust2sect>
 800c4a6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d104      	bne.n	800c4b8 <f_lseek+0x154>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	755a      	strb	r2, [r3, #21]
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	e15a      	b.n	800c76e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	0a5b      	lsrs	r3, r3, #9
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	8952      	ldrh	r2, [r2, #10]
 800c4c2:	3a01      	subs	r2, #1
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	69ba      	ldr	r2, [r7, #24]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 8148 	beq.w	800c76a <f_lseek+0x406>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	69ba      	ldr	r2, [r7, #24]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	f000 8142 	beq.w	800c76a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	7d1b      	ldrb	r3, [r3, #20]
 800c4ea:	b25b      	sxtb	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	da18      	bge.n	800c522 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	7858      	ldrb	r0, [r3, #1]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a1a      	ldr	r2, [r3, #32]
 800c4fe:	2301      	movs	r3, #1
 800c500:	f7fd fcfa 	bl	8009ef8 <disk_write>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <f_lseek+0x1b0>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	755a      	strb	r2, [r3, #21]
 800c510:	2301      	movs	r3, #1
 800c512:	e12c      	b.n	800c76e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7d1b      	ldrb	r3, [r3, #20]
 800c518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	7858      	ldrb	r0, [r3, #1]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c52c:	2301      	movs	r3, #1
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	f7fd fcc2 	bl	8009eb8 <disk_read>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d004      	beq.n	800c544 <f_lseek+0x1e0>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	755a      	strb	r2, [r3, #21]
 800c540:	2301      	movs	r3, #1
 800c542:	e114      	b.n	800c76e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	69ba      	ldr	r2, [r7, #24]
 800c548:	621a      	str	r2, [r3, #32]
 800c54a:	e10e      	b.n	800c76a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	429a      	cmp	r2, r3
 800c554:	d908      	bls.n	800c568 <f_lseek+0x204>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	7d1b      	ldrb	r3, [r3, #20]
 800c55a:	f003 0302 	and.w	r3, r3, #2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d102      	bne.n	800c568 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	637b      	str	r3, [r7, #52]	@ 0x34
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c576:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 80a7 	beq.w	800c6ce <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	895b      	ldrh	r3, [r3, #10]
 800c584:	025b      	lsls	r3, r3, #9
 800c586:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c588:	6a3b      	ldr	r3, [r7, #32]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d01b      	beq.n	800c5c6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	1e5a      	subs	r2, r3, #1
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	fbb2 f2f3 	udiv	r2, r2, r3
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	1e59      	subs	r1, r3, #1
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d30f      	bcc.n	800c5c6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c5a6:	6a3b      	ldr	r3, [r7, #32]
 800c5a8:	1e5a      	subs	r2, r3, #1
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	425b      	negs	r3, r3
 800c5ae:	401a      	ands	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	69db      	ldr	r3, [r3, #28]
 800c5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5c4:	e022      	b.n	800c60c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d119      	bne.n	800c606 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fe fa2d 	bl	800aa36 <create_chain>
 800c5dc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d104      	bne.n	800c5ee <f_lseek+0x28a>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	755a      	strb	r2, [r3, #21]
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	e0bf      	b.n	800c76e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f4:	d104      	bne.n	800c600 <f_lseek+0x29c>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	755a      	strb	r2, [r3, #21]
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e0b6      	b.n	800c76e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c604:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c60a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d05d      	beq.n	800c6ce <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c612:	e03a      	b.n	800c68a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	603b      	str	r3, [r7, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	699a      	ldr	r2, [r3, #24]
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	441a      	add	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7d1b      	ldrb	r3, [r3, #20]
 800c62c:	f003 0302 	and.w	r3, r3, #2
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00b      	beq.n	800c64c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c638:	4618      	mov	r0, r3
 800c63a:	f7fe f9fc 	bl	800aa36 <create_chain>
 800c63e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c642:	2b00      	cmp	r3, #0
 800c644:	d108      	bne.n	800c658 <f_lseek+0x2f4>
							ofs = 0; break;
 800c646:	2300      	movs	r3, #0
 800c648:	603b      	str	r3, [r7, #0]
 800c64a:	e022      	b.n	800c692 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c650:	4618      	mov	r0, r3
 800c652:	f7fd fffa 	bl	800a64a <get_fat>
 800c656:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65e:	d104      	bne.n	800c66a <f_lseek+0x306>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	755a      	strb	r2, [r3, #21]
 800c666:	2301      	movs	r3, #1
 800c668:	e081      	b.n	800c76e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d904      	bls.n	800c67a <f_lseek+0x316>
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c676:	429a      	cmp	r2, r3
 800c678:	d304      	bcc.n	800c684 <f_lseek+0x320>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2202      	movs	r2, #2
 800c67e:	755a      	strb	r2, [r3, #21]
 800c680:	2302      	movs	r3, #2
 800c682:	e074      	b.n	800c76e <f_lseek+0x40a>
					fp->clust = clst;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c688:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d8c0      	bhi.n	800c614 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	441a      	add	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d012      	beq.n	800c6ce <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fd ffad 	bl	800a60c <clust2sect>
 800c6b2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c6b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d104      	bne.n	800c6c4 <f_lseek+0x360>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2202      	movs	r2, #2
 800c6be:	755a      	strb	r2, [r3, #21]
 800c6c0:	2302      	movs	r3, #2
 800c6c2:	e054      	b.n	800c76e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	0a5b      	lsrs	r3, r3, #9
 800c6c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6ca:	4413      	add	r3, r2
 800c6cc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	699a      	ldr	r2, [r3, #24]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d90a      	bls.n	800c6f0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	699a      	ldr	r2, [r3, #24]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	7d1b      	ldrb	r3, [r3, #20]
 800c6e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6ea:	b2da      	uxtb	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d036      	beq.n	800c76a <f_lseek+0x406>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a1b      	ldr	r3, [r3, #32]
 800c700:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c702:	429a      	cmp	r2, r3
 800c704:	d031      	beq.n	800c76a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	7d1b      	ldrb	r3, [r3, #20]
 800c70a:	b25b      	sxtb	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	da18      	bge.n	800c742 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	7858      	ldrb	r0, [r3, #1]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a1a      	ldr	r2, [r3, #32]
 800c71e:	2301      	movs	r3, #1
 800c720:	f7fd fbea 	bl	8009ef8 <disk_write>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d004      	beq.n	800c734 <f_lseek+0x3d0>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	755a      	strb	r2, [r3, #21]
 800c730:	2301      	movs	r3, #1
 800c732:	e01c      	b.n	800c76e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	7d1b      	ldrb	r3, [r3, #20]
 800c738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	7858      	ldrb	r0, [r3, #1]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c74c:	2301      	movs	r3, #1
 800c74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c750:	f7fd fbb2 	bl	8009eb8 <disk_read>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d004      	beq.n	800c764 <f_lseek+0x400>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	755a      	strb	r2, [r3, #21]
 800c760:	2301      	movs	r3, #1
 800c762:	e004      	b.n	800c76e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c768:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c76a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3740      	adds	r7, #64	@ 0x40
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c778:	b480      	push	{r7}
 800c77a:	b087      	sub	sp, #28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	4613      	mov	r3, r2
 800c784:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c786:	2301      	movs	r3, #1
 800c788:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c78e:	4b1f      	ldr	r3, [pc, #124]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c790:	7a5b      	ldrb	r3, [r3, #9]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b00      	cmp	r3, #0
 800c796:	d131      	bne.n	800c7fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c798:	4b1c      	ldr	r3, [pc, #112]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c79a:	7a5b      	ldrb	r3, [r3, #9]
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	461a      	mov	r2, r3
 800c7a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c7a6:	4b19      	ldr	r3, [pc, #100]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7a8:	7a5b      	ldrb	r3, [r3, #9]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	4a17      	ldr	r2, [pc, #92]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c7b6:	4b15      	ldr	r3, [pc, #84]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7b8:	7a5b      	ldrb	r3, [r3, #9]
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	461a      	mov	r2, r3
 800c7be:	4b13      	ldr	r3, [pc, #76]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7c0:	4413      	add	r3, r2
 800c7c2:	79fa      	ldrb	r2, [r7, #7]
 800c7c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c7c6:	4b11      	ldr	r3, [pc, #68]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7c8:	7a5b      	ldrb	r3, [r3, #9]
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	b2d1      	uxtb	r1, r2
 800c7d0:	4a0e      	ldr	r2, [pc, #56]	@ (800c80c <FATFS_LinkDriverEx+0x94>)
 800c7d2:	7251      	strb	r1, [r2, #9]
 800c7d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7d6:	7dbb      	ldrb	r3, [r7, #22]
 800c7d8:	3330      	adds	r3, #48	@ 0x30
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	223a      	movs	r2, #58	@ 0x3a
 800c7e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	3302      	adds	r3, #2
 800c7ec:	222f      	movs	r2, #47	@ 0x2f
 800c7ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	3303      	adds	r3, #3
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	371c      	adds	r7, #28
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	20001438 	.word	0x20001438

0800c810 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c81a:	2200      	movs	r2, #0
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7ff ffaa 	bl	800c778 <FATFS_LinkDriverEx>
 800c824:	4603      	mov	r3, r0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
	...

0800c830 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	2101      	movs	r1, #1
 800c83e:	4828      	ldr	r0, [pc, #160]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c840:	f000 fad6 	bl	800cdf0 <ai_platform_get_activations_map>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d03f      	beq.n	800c8ca <network_configure_activations+0x9a>
    /* Updating activations (byte) offsets */
    
    actual_input_output_array.data = AI_PTR(g_network_activations_map[0] + 240);
 800c84a:	4b25      	ldr	r3, [pc, #148]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	33f0      	adds	r3, #240	@ 0xf0
 800c850:	4a24      	ldr	r2, [pc, #144]	@ (800c8e4 <network_configure_activations+0xb4>)
 800c852:	6093      	str	r3, [r2, #8]
    actual_input_output_array.data_start = AI_PTR(g_network_activations_map[0] + 240);
 800c854:	4b22      	ldr	r3, [pc, #136]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	33f0      	adds	r3, #240	@ 0xf0
 800c85a:	4a22      	ldr	r2, [pc, #136]	@ (800c8e4 <network_configure_activations+0xb4>)
 800c85c:	60d3      	str	r3, [r2, #12]
    __mlp__mlp_0_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800c85e:	4b20      	ldr	r3, [pc, #128]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c866:	4a20      	ldr	r2, [pc, #128]	@ (800c8e8 <network_configure_activations+0xb8>)
 800c868:	6093      	str	r3, [r2, #8]
    __mlp__mlp_0_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800c86a:	4b1d      	ldr	r3, [pc, #116]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c872:	4a1d      	ldr	r2, [pc, #116]	@ (800c8e8 <network_configure_activations+0xb8>)
 800c874:	60d3      	str	r3, [r2, #12]
    __mlp__mlp_1_Relu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800c876:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c87e:	4a1b      	ldr	r2, [pc, #108]	@ (800c8ec <network_configure_activations+0xbc>)
 800c880:	6093      	str	r3, [r2, #8]
    __mlp__mlp_1_Relu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800c882:	4b17      	ldr	r3, [pc, #92]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c88a:	4a18      	ldr	r2, [pc, #96]	@ (800c8ec <network_configure_activations+0xbc>)
 800c88c:	60d3      	str	r3, [r2, #12]
    __mlp__mlp_3_Gemm_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800c88e:	4b14      	ldr	r3, [pc, #80]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a17      	ldr	r2, [pc, #92]	@ (800c8f0 <network_configure_activations+0xc0>)
 800c894:	6093      	str	r3, [r2, #8]
    __mlp__mlp_3_Gemm_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800c896:	4b12      	ldr	r3, [pc, #72]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a15      	ldr	r2, [pc, #84]	@ (800c8f0 <network_configure_activations+0xc0>)
 800c89c:	60d3      	str	r3, [r2, #12]
    __mlp__mlp_4_Relu_output_0_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800c89e:	4b10      	ldr	r3, [pc, #64]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c8a6:	4a13      	ldr	r2, [pc, #76]	@ (800c8f4 <network_configure_activations+0xc4>)
 800c8a8:	6093      	str	r3, [r2, #8]
    __mlp__mlp_4_Relu_output_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800c8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c8b2:	4a10      	ldr	r2, [pc, #64]	@ (800c8f4 <network_configure_activations+0xc4>)
 800c8b4:	60d3      	str	r3, [r2, #12]
    output_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800c8b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a0f      	ldr	r2, [pc, #60]	@ (800c8f8 <network_configure_activations+0xc8>)
 800c8bc:	6093      	str	r3, [r2, #8]
    output_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800c8be:	4b08      	ldr	r3, [pc, #32]	@ (800c8e0 <network_configure_activations+0xb0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a0d      	ldr	r2, [pc, #52]	@ (800c8f8 <network_configure_activations+0xc8>)
 800c8c4:	60d3      	str	r3, [r2, #12]
    return true;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e005      	b.n	800c8d6 <network_configure_activations+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800c8ca:	2213      	movs	r2, #19
 800c8cc:	2130      	movs	r1, #48	@ 0x30
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fb10 	bl	800cef4 <ai_platform_network_set_error>
  return false;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	20001444 	.word	0x20001444
 800c8e4:	2000000c 	.word	0x2000000c
 800c8e8:	2000001c 	.word	0x2000001c
 800c8ec:	2000002c 	.word	0x2000002c
 800c8f0:	2000003c 	.word	0x2000003c
 800c8f4:	2000004c 	.word	0x2000004c
 800c8f8:	2000005c 	.word	0x2000005c

0800c8fc <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	2101      	movs	r1, #1
 800c90a:	483d      	ldr	r0, [pc, #244]	@ (800ca00 <network_configure_weights+0x104>)
 800c90c:	f000 fa1c 	bl	800cd48 <ai_platform_get_weights_map>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d069      	beq.n	800c9ea <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    __mlp__mlp_0_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800c916:	4b3b      	ldr	r3, [pc, #236]	@ (800ca04 <network_configure_weights+0x108>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c91e:	4a39      	ldr	r2, [pc, #228]	@ (800ca04 <network_configure_weights+0x108>)
 800c920:	6013      	str	r3, [r2, #0]
    __mlp__mlp_0_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800c922:	4b37      	ldr	r3, [pc, #220]	@ (800ca00 <network_configure_weights+0x104>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a37      	ldr	r2, [pc, #220]	@ (800ca04 <network_configure_weights+0x108>)
 800c928:	6093      	str	r3, [r2, #8]
    __mlp__mlp_0_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800c92a:	4b35      	ldr	r3, [pc, #212]	@ (800ca00 <network_configure_weights+0x104>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a35      	ldr	r2, [pc, #212]	@ (800ca04 <network_configure_weights+0x108>)
 800c930:	60d3      	str	r3, [r2, #12]
    __mlp__mlp_0_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800c932:	4b35      	ldr	r3, [pc, #212]	@ (800ca08 <network_configure_weights+0x10c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c93a:	4a33      	ldr	r2, [pc, #204]	@ (800ca08 <network_configure_weights+0x10c>)
 800c93c:	6013      	str	r3, [r2, #0]
    __mlp__mlp_0_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 1024);
 800c93e:	4b30      	ldr	r3, [pc, #192]	@ (800ca00 <network_configure_weights+0x104>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c946:	4a30      	ldr	r2, [pc, #192]	@ (800ca08 <network_configure_weights+0x10c>)
 800c948:	6093      	str	r3, [r2, #8]
    __mlp__mlp_0_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1024);
 800c94a:	4b2d      	ldr	r3, [pc, #180]	@ (800ca00 <network_configure_weights+0x104>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c952:	4a2d      	ldr	r2, [pc, #180]	@ (800ca08 <network_configure_weights+0x10c>)
 800c954:	60d3      	str	r3, [r2, #12]
    __mlp__mlp_3_Gemm_output_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800c956:	4b2d      	ldr	r3, [pc, #180]	@ (800ca0c <network_configure_weights+0x110>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c95e:	4a2b      	ldr	r2, [pc, #172]	@ (800ca0c <network_configure_weights+0x110>)
 800c960:	6013      	str	r3, [r2, #0]
    __mlp__mlp_3_Gemm_output_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 1280);
 800c962:	4b27      	ldr	r3, [pc, #156]	@ (800ca00 <network_configure_weights+0x104>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c96a:	4a28      	ldr	r2, [pc, #160]	@ (800ca0c <network_configure_weights+0x110>)
 800c96c:	6093      	str	r3, [r2, #8]
    __mlp__mlp_3_Gemm_output_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1280);
 800c96e:	4b24      	ldr	r3, [pc, #144]	@ (800ca00 <network_configure_weights+0x104>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c976:	4a25      	ldr	r2, [pc, #148]	@ (800ca0c <network_configure_weights+0x110>)
 800c978:	60d3      	str	r3, [r2, #12]
    __mlp__mlp_3_Gemm_output_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800c97a:	4b25      	ldr	r3, [pc, #148]	@ (800ca10 <network_configure_weights+0x114>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c982:	4a23      	ldr	r2, [pc, #140]	@ (800ca10 <network_configure_weights+0x114>)
 800c984:	6013      	str	r3, [r2, #0]
    __mlp__mlp_3_Gemm_output_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 17664);
 800c986:	4b1e      	ldr	r3, [pc, #120]	@ (800ca00 <network_configure_weights+0x104>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f503 438a 	add.w	r3, r3, #17664	@ 0x4500
 800c98e:	4a20      	ldr	r2, [pc, #128]	@ (800ca10 <network_configure_weights+0x114>)
 800c990:	6093      	str	r3, [r2, #8]
    __mlp__mlp_3_Gemm_output_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 17664);
 800c992:	4b1b      	ldr	r3, [pc, #108]	@ (800ca00 <network_configure_weights+0x104>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f503 438a 	add.w	r3, r3, #17664	@ 0x4500
 800c99a:	4a1d      	ldr	r2, [pc, #116]	@ (800ca10 <network_configure_weights+0x114>)
 800c99c:	60d3      	str	r3, [r2, #12]
    output_weights_array.format |= AI_FMT_FLAG_CONST;
 800c99e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca14 <network_configure_weights+0x118>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c9a6:	4a1b      	ldr	r2, [pc, #108]	@ (800ca14 <network_configure_weights+0x118>)
 800c9a8:	6013      	str	r3, [r2, #0]
    output_weights_array.data = AI_PTR(g_network_weights_map[0] + 17920);
 800c9aa:	4b15      	ldr	r3, [pc, #84]	@ (800ca00 <network_configure_weights+0x104>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f503 438c 	add.w	r3, r3, #17920	@ 0x4600
 800c9b2:	4a18      	ldr	r2, [pc, #96]	@ (800ca14 <network_configure_weights+0x118>)
 800c9b4:	6093      	str	r3, [r2, #8]
    output_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 17920);
 800c9b6:	4b12      	ldr	r3, [pc, #72]	@ (800ca00 <network_configure_weights+0x104>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f503 438c 	add.w	r3, r3, #17920	@ 0x4600
 800c9be:	4a15      	ldr	r2, [pc, #84]	@ (800ca14 <network_configure_weights+0x118>)
 800c9c0:	60d3      	str	r3, [r2, #12]
    output_bias_array.format |= AI_FMT_FLAG_CONST;
 800c9c2:	4b15      	ldr	r3, [pc, #84]	@ (800ca18 <network_configure_weights+0x11c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c9ca:	4a13      	ldr	r2, [pc, #76]	@ (800ca18 <network_configure_weights+0x11c>)
 800c9cc:	6013      	str	r3, [r2, #0]
    output_bias_array.data = AI_PTR(g_network_weights_map[0] + 18432);
 800c9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800ca00 <network_configure_weights+0x104>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 800c9d6:	4a10      	ldr	r2, [pc, #64]	@ (800ca18 <network_configure_weights+0x11c>)
 800c9d8:	6093      	str	r3, [r2, #8]
    output_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 18432);
 800c9da:	4b09      	ldr	r3, [pc, #36]	@ (800ca00 <network_configure_weights+0x104>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 800c9e2:	4a0d      	ldr	r2, [pc, #52]	@ (800ca18 <network_configure_weights+0x11c>)
 800c9e4:	60d3      	str	r3, [r2, #12]
    return true;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e005      	b.n	800c9f6 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800c9ea:	2212      	movs	r2, #18
 800c9ec:	2130      	movs	r1, #48	@ 0x30
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fa80 	bl	800cef4 <ai_platform_network_set_error>
  return false;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20001448 	.word	0x20001448
 800ca04:	2000006c 	.word	0x2000006c
 800ca08:	2000007c 	.word	0x2000007c
 800ca0c:	2000008c 	.word	0x2000008c
 800ca10:	2000009c 	.word	0x2000009c
 800ca14:	200000ac 	.word	0x200000ac
 800ca18:	200000bc 	.word	0x200000bc

0800ca1c <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fa59 	bl	800cedc <ai_platform_network_get_error>
 800ca2a:	4603      	mov	r3, r0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ca3e:	2300      	movs	r3, #0
 800ca40:	9301      	str	r3, [sp, #4]
 800ca42:	2305      	movs	r3, #5
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	2301      	movs	r3, #1
 800ca48:	4a04      	ldr	r2, [pc, #16]	@ (800ca5c <ai_network_create+0x28>)
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fb41 	bl	800d0d4 <ai_platform_network_create>
 800ca52:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	200005f0 	.word	0x200005f0

0800ca60 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b094      	sub	sp, #80	@ 0x50
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff ffe0 	bl	800ca34 <ai_network_create>
 800ca74:	4603      	mov	r3, r0
 800ca76:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800ca78:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <ai_network_create_and_init+0x24>
    return err;
 800ca80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca82:	e067      	b.n	800cb54 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800ca84:	f107 0310 	add.w	r3, r7, #16
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 f8e7 	bl	800cc5c <ai_network_data_params_get>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	f083 0301 	eor.w	r3, r3, #1
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d008      	beq.n	800caac <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7ff ffbc 	bl	800ca1c <ai_network_get_error>
 800caa4:	4603      	mov	r3, r0
 800caa6:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800caa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800caaa:	e053      	b.n	800cb54 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800caac:	2300      	movs	r3, #0
 800caae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cab2:	e012      	b.n	800cada <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800cab4:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800cab8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	4413      	add	r3, r2
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	f107 0310 	add.w	r3, r7, #16
 800cac8:	330c      	adds	r3, #12
 800caca:	4618      	mov	r0, r3
 800cacc:	f000 f92c 	bl	800cd28 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800cad0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cad4:	3301      	adds	r3, #1
 800cad6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d004      	beq.n	800caea <ai_network_create_and_init+0x8a>
 800cae0:	8bfb      	ldrh	r3, [r7, #30]
 800cae2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d3e4      	bcc.n	800cab4 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800caea:	2300      	movs	r3, #0
 800caec:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800caf0:	e012      	b.n	800cb18 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800caf2:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800caf6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	4413      	add	r3, r2
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	f107 0310 	add.w	r3, r7, #16
 800cb06:	3304      	adds	r3, #4
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 f90d 	bl	800cd28 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800cb0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800cb12:	3301      	adds	r3, #1
 800cb14:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d004      	beq.n	800cb28 <ai_network_create_and_init+0xc8>
 800cb1e:	8afb      	ldrh	r3, [r7, #22]
 800cb20:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d3e4      	bcc.n	800caf2 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f107 0210 	add.w	r2, r7, #16
 800cb30:	4611      	mov	r1, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 f846 	bl	800cbc4 <ai_network_init>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f083 0301 	eor.w	r3, r3, #1
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d006      	beq.n	800cb52 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7ff ff67 	bl	800ca1c <ai_network_get_error>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800cb52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3750      	adds	r7, #80	@ 0x50
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d104      	bne.n	800cb76 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800cb6c:	4b06      	ldr	r3, [pc, #24]	@ (800cb88 <ai_network_inputs_get+0x2c>)
 800cb6e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4a06      	ldr	r2, [pc, #24]	@ (800cb8c <ai_network_inputs_get+0x30>)
 800cb74:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f9c1 	bl	800cf00 <ai_platform_inputs_get>
 800cb7e:	4603      	mov	r3, r0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	200005f0 	.word	0x200005f0
 800cb8c:	a1c00100 	.word	0xa1c00100

0800cb90 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d104      	bne.n	800cbaa <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800cba0:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <ai_network_outputs_get+0x2c>)
 800cba2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a06      	ldr	r2, [pc, #24]	@ (800cbc0 <ai_network_outputs_get+0x30>)
 800cba8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 fa1d 	bl	800cfec <ai_platform_outputs_get>
 800cbb2:	4603      	mov	r3, r0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	200005f0 	.word	0x200005f0
 800cbc0:	a1c00100 	.word	0xa1c00100

0800cbc4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 fac1 	bl	800d158 <ai_platform_network_init>
 800cbd6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <ai_network_init+0x22>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	e026      	b.n	800cc34 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f7ff fe87 	bl	800c8fc <network_configure_weights>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	7afb      	ldrb	r3, [r7, #11]
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	bf14      	ite	ne
 800cbfa:	2301      	movne	r3, #1
 800cbfc:	2300      	moveq	r3, #0
 800cbfe:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fe14 	bl	800c830 <network_configure_activations>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	7afb      	ldrb	r3, [r7, #11]
 800cc0e:	4013      	ands	r3, r2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	bf14      	ite	ne
 800cc14:	2301      	movne	r3, #1
 800cc16:	2300      	moveq	r3, #0
 800cc18:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fb6a 	bl	800d2f4 <ai_platform_network_post_init>
 800cc20:	4603      	mov	r3, r0
 800cc22:	461a      	mov	r2, r3
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	4013      	ands	r3, r2
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	bf14      	ite	ne
 800cc2c:	2301      	movne	r3, #1
 800cc2e:	2300      	moveq	r3, #0
 800cc30:	72fb      	strb	r3, [r7, #11]

  return ok;
 800cc32:	7afb      	ldrb	r3, [r7, #11]
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}

0800cc3c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	68b9      	ldr	r1, [r7, #8]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f000 fb81 	bl	800d354 <ai_platform_network_process>
 800cc52:	4603      	mov	r3, r0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3710      	adds	r7, #16
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b086      	sub	sp, #24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <ai_network_data_params_get+0x12>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	e016      	b.n	800cc9c <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800cc6e:	4a0d      	ldr	r2, [pc, #52]	@ (800cca4 <ai_network_data_params_get+0x48>)
 800cc70:	f107 0310 	add.w	r3, r7, #16
 800cc74:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc78:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800cc7c:	4a0a      	ldr	r2, [pc, #40]	@ (800cca8 <ai_network_data_params_get+0x4c>)
 800cc7e:	f107 0308 	add.w	r3, r7, #8
 800cc82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc86:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800cc8a:	f107 0210 	add.w	r2, r7, #16
 800cc8e:	f107 0308 	add.w	r3, r7, #8
 800cc92:	4619      	mov	r1, r3
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f8ff 	bl	800ce98 <ai_platform_bind_network_params>
 800cc9a:	4603      	mov	r3, r0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3718      	adds	r7, #24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	0800f4cc 	.word	0x0800f4cc
 800cca8:	0800f4d4 	.word	0x0800f4d4

0800ccac <ai_buffer_get_size>:
 800ccac:	b378      	cbz	r0, 800cd0e <ai_buffer_get_size+0x62>
 800ccae:	b410      	push	{r4}
 800ccb0:	6803      	ldr	r3, [r0, #0]
 800ccb2:	4a17      	ldr	r2, [pc, #92]	@ (800cd10 <ai_buffer_get_size+0x64>)
 800ccb4:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800ccb8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d01e      	beq.n	800ccfe <ai_buffer_get_size+0x52>
 800ccc0:	6984      	ldr	r4, [r0, #24]
 800ccc2:	6862      	ldr	r2, [r4, #4]
 800ccc4:	7d03      	ldrb	r3, [r0, #20]
 800ccc6:	6941      	ldr	r1, [r0, #20]
 800ccc8:	f1a3 0301 	sub.w	r3, r3, #1
 800cccc:	fab3 f383 	clz	r3, r3
 800ccd0:	095b      	lsrs	r3, r3, #5
 800ccd2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800ccd6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800ccda:	da0b      	bge.n	800ccf4 <ai_buffer_get_size+0x48>
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d102      	bne.n	800cce6 <ai_buffer_get_size+0x3a>
 800cce0:	2802      	cmp	r0, #2
 800cce2:	d007      	beq.n	800ccf4 <ai_buffer_get_size+0x48>
 800cce4:	2302      	movs	r3, #2
 800cce6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ccea:	3301      	adds	r3, #1
 800ccec:	4298      	cmp	r0, r3
 800ccee:	fb01 f202 	mul.w	r2, r1, r2
 800ccf2:	d1f3      	bne.n	800ccdc <ai_buffer_get_size+0x30>
 800ccf4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800ccf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccfc:	4770      	bx	lr
 800ccfe:	2900      	cmp	r1, #0
 800cd00:	d0de      	beq.n	800ccc0 <ai_buffer_get_size+0x14>
 800cd02:	6984      	ldr	r4, [r0, #24]
 800cd04:	6862      	ldr	r2, [r4, #4]
 800cd06:	321f      	adds	r2, #31
 800cd08:	f022 021f 	bic.w	r2, r2, #31
 800cd0c:	e7da      	b.n	800ccc4 <ai_buffer_get_size+0x18>
 800cd0e:	4770      	bx	lr
 800cd10:	000400c0 	.word	0x000400c0

0800cd14 <ai_buffer_array_sane>:
 800cd14:	b138      	cbz	r0, 800cd26 <ai_buffer_array_sane+0x12>
 800cd16:	6843      	ldr	r3, [r0, #4]
 800cd18:	b123      	cbz	r3, 800cd24 <ai_buffer_array_sane+0x10>
 800cd1a:	8840      	ldrh	r0, [r0, #2]
 800cd1c:	3800      	subs	r0, #0
 800cd1e:	bf18      	it	ne
 800cd20:	2001      	movne	r0, #1
 800cd22:	4770      	bx	lr
 800cd24:	4618      	mov	r0, r3
 800cd26:	4770      	bx	lr

0800cd28 <ai_buffer_array_item_set_address>:
 800cd28:	b150      	cbz	r0, 800cd40 <ai_buffer_array_item_set_address+0x18>
 800cd2a:	6843      	ldr	r3, [r0, #4]
 800cd2c:	b14b      	cbz	r3, 800cd42 <ai_buffer_array_item_set_address+0x1a>
 800cd2e:	8840      	ldrh	r0, [r0, #2]
 800cd30:	b900      	cbnz	r0, 800cd34 <ai_buffer_array_item_set_address+0xc>
 800cd32:	4770      	bx	lr
 800cd34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cd38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	605a      	str	r2, [r3, #4]
 800cd40:	4770      	bx	lr
 800cd42:	4618      	mov	r0, r3
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop

0800cd48 <ai_platform_get_weights_map>:
 800cd48:	2a00      	cmp	r2, #0
 800cd4a:	d037      	beq.n	800cdbc <ai_platform_get_weights_map+0x74>
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	4604      	mov	r4, r0
 800cd50:	b1a0      	cbz	r0, 800cd7c <ai_platform_get_weights_map+0x34>
 800cd52:	460f      	mov	r7, r1
 800cd54:	b191      	cbz	r1, 800cd7c <ai_platform_get_weights_map+0x34>
 800cd56:	4b25      	ldr	r3, [pc, #148]	@ (800cdec <ai_platform_get_weights_map+0xa4>)
 800cd58:	6810      	ldr	r0, [r2, #0]
 800cd5a:	4298      	cmp	r0, r3
 800cd5c:	4615      	mov	r5, r2
 800cd5e:	d00f      	beq.n	800cd80 <ai_platform_get_weights_map+0x38>
 800cd60:	6855      	ldr	r5, [r2, #4]
 800cd62:	b15d      	cbz	r5, 800cd7c <ai_platform_get_weights_map+0x34>
 800cd64:	682e      	ldr	r6, [r5, #0]
 800cd66:	429e      	cmp	r6, r3
 800cd68:	d02a      	beq.n	800cdc0 <ai_platform_get_weights_map+0x78>
 800cd6a:	f1a1 0001 	sub.w	r0, r1, #1
 800cd6e:	6025      	str	r5, [r4, #0]
 800cd70:	fab0 f080 	clz	r0, r0
 800cd74:	0940      	lsrs	r0, r0, #5
 800cd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd78:	42a7      	cmp	r7, r4
 800cd7a:	d034      	beq.n	800cde6 <ai_platform_get_weights_map+0x9e>
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd80:	1d10      	adds	r0, r2, #4
 800cd82:	f7ff ffc7 	bl	800cd14 <ai_buffer_array_sane>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d0f8      	beq.n	800cd7c <ai_platform_get_weights_map+0x34>
 800cd8a:	88eb      	ldrh	r3, [r5, #6]
 800cd8c:	429f      	cmp	r7, r3
 800cd8e:	d1f5      	bne.n	800cd7c <ai_platform_get_weights_map+0x34>
 800cd90:	f04f 0c00 	mov.w	ip, #0
 800cd94:	1f20      	subs	r0, r4, #4
 800cd96:	46e6      	mov	lr, ip
 800cd98:	68ab      	ldr	r3, [r5, #8]
 800cd9a:	4463      	add	r3, ip
 800cd9c:	f10c 0c1c 	add.w	ip, ip, #28
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	b12b      	cbz	r3, 800cdb0 <ai_platform_get_weights_map+0x68>
 800cda4:	f10e 0e01 	add.w	lr, lr, #1
 800cda8:	4577      	cmp	r7, lr
 800cdaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdae:	d1f3      	bne.n	800cd98 <ai_platform_get_weights_map+0x50>
 800cdb0:	eba7 000e 	sub.w	r0, r7, lr
 800cdb4:	fab0 f080 	clz	r0, r0
 800cdb8:	0940      	lsrs	r0, r0, #5
 800cdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	4770      	bx	lr
 800cdc0:	1f20      	subs	r0, r4, #4
 800cdc2:	462a      	mov	r2, r5
 800cdc4:	2400      	movs	r4, #0
 800cdc6:	e000      	b.n	800cdca <ai_platform_get_weights_map+0x82>
 800cdc8:	461c      	mov	r4, r3
 800cdca:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800cdce:	42b3      	cmp	r3, r6
 800cdd0:	d0d2      	beq.n	800cd78 <ai_platform_get_weights_map+0x30>
 800cdd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdd6:	1c63      	adds	r3, r4, #1
 800cdd8:	429f      	cmp	r7, r3
 800cdda:	d1f5      	bne.n	800cdc8 <ai_platform_get_weights_map+0x80>
 800cddc:	3402      	adds	r4, #2
 800cdde:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cde2:	42b3      	cmp	r3, r6
 800cde4:	d1ca      	bne.n	800cd7c <ai_platform_get_weights_map+0x34>
 800cde6:	2001      	movs	r0, #1
 800cde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdea:	bf00      	nop
 800cdec:	a1facade 	.word	0xa1facade

0800cdf0 <ai_platform_get_activations_map>:
 800cdf0:	2a00      	cmp	r2, #0
 800cdf2:	d038      	beq.n	800ce66 <ai_platform_get_activations_map+0x76>
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	b1a0      	cbz	r0, 800ce24 <ai_platform_get_activations_map+0x34>
 800cdfa:	460f      	mov	r7, r1
 800cdfc:	b191      	cbz	r1, 800ce24 <ai_platform_get_activations_map+0x34>
 800cdfe:	4b25      	ldr	r3, [pc, #148]	@ (800ce94 <ai_platform_get_activations_map+0xa4>)
 800ce00:	6810      	ldr	r0, [r2, #0]
 800ce02:	4298      	cmp	r0, r3
 800ce04:	4615      	mov	r5, r2
 800ce06:	d00f      	beq.n	800ce28 <ai_platform_get_activations_map+0x38>
 800ce08:	6a15      	ldr	r5, [r2, #32]
 800ce0a:	b15d      	cbz	r5, 800ce24 <ai_platform_get_activations_map+0x34>
 800ce0c:	682e      	ldr	r6, [r5, #0]
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	d02b      	beq.n	800ce6a <ai_platform_get_activations_map+0x7a>
 800ce12:	f1a1 0001 	sub.w	r0, r1, #1
 800ce16:	6025      	str	r5, [r4, #0]
 800ce18:	fab0 f080 	clz	r0, r0
 800ce1c:	0940      	lsrs	r0, r0, #5
 800ce1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce20:	42a7      	cmp	r7, r4
 800ce22:	d035      	beq.n	800ce90 <ai_platform_get_activations_map+0xa0>
 800ce24:	2000      	movs	r0, #0
 800ce26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce28:	f102 000c 	add.w	r0, r2, #12
 800ce2c:	f7ff ff72 	bl	800cd14 <ai_buffer_array_sane>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d0f7      	beq.n	800ce24 <ai_platform_get_activations_map+0x34>
 800ce34:	89eb      	ldrh	r3, [r5, #14]
 800ce36:	429f      	cmp	r7, r3
 800ce38:	d1f4      	bne.n	800ce24 <ai_platform_get_activations_map+0x34>
 800ce3a:	f04f 0c00 	mov.w	ip, #0
 800ce3e:	1f20      	subs	r0, r4, #4
 800ce40:	46e6      	mov	lr, ip
 800ce42:	692b      	ldr	r3, [r5, #16]
 800ce44:	4463      	add	r3, ip
 800ce46:	f10c 0c1c 	add.w	ip, ip, #28
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	b12b      	cbz	r3, 800ce5a <ai_platform_get_activations_map+0x6a>
 800ce4e:	f10e 0e01 	add.w	lr, lr, #1
 800ce52:	4577      	cmp	r7, lr
 800ce54:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce58:	d1f3      	bne.n	800ce42 <ai_platform_get_activations_map+0x52>
 800ce5a:	eba7 000e 	sub.w	r0, r7, lr
 800ce5e:	fab0 f080 	clz	r0, r0
 800ce62:	0940      	lsrs	r0, r0, #5
 800ce64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce66:	2000      	movs	r0, #0
 800ce68:	4770      	bx	lr
 800ce6a:	1f20      	subs	r0, r4, #4
 800ce6c:	462a      	mov	r2, r5
 800ce6e:	2400      	movs	r4, #0
 800ce70:	e000      	b.n	800ce74 <ai_platform_get_activations_map+0x84>
 800ce72:	461c      	mov	r4, r3
 800ce74:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ce78:	42b3      	cmp	r3, r6
 800ce7a:	d0d1      	beq.n	800ce20 <ai_platform_get_activations_map+0x30>
 800ce7c:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce80:	1c63      	adds	r3, r4, #1
 800ce82:	429f      	cmp	r7, r3
 800ce84:	d1f5      	bne.n	800ce72 <ai_platform_get_activations_map+0x82>
 800ce86:	3402      	adds	r4, #2
 800ce88:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ce8c:	42b3      	cmp	r3, r6
 800ce8e:	d1c9      	bne.n	800ce24 <ai_platform_get_activations_map+0x34>
 800ce90:	2001      	movs	r0, #1
 800ce92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce94:	a1facade 	.word	0xa1facade

0800ce98 <ai_platform_bind_network_params>:
 800ce98:	b1a0      	cbz	r0, 800cec4 <ai_platform_bind_network_params+0x2c>
 800ce9a:	b1b1      	cbz	r1, 800ceca <ai_platform_bind_network_params+0x32>
 800ce9c:	b1c2      	cbz	r2, 800ced0 <ai_platform_bind_network_params+0x38>
 800ce9e:	b410      	push	{r4}
 800cea0:	4603      	mov	r3, r0
 800cea2:	4c0d      	ldr	r4, [pc, #52]	@ (800ced8 <ai_platform_bind_network_params+0x40>)
 800cea4:	f843 4b04 	str.w	r4, [r3], #4
 800cea8:	f100 0c0c 	add.w	ip, r0, #12
 800ceac:	c903      	ldmia	r1, {r0, r1}
 800ceae:	e883 0003 	stmia.w	r3, {r0, r1}
 800ceb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ceb6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ceba:	2301      	movs	r3, #1
 800cebc:	4618      	mov	r0, r3
 800cebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec2:	4770      	bx	lr
 800cec4:	4603      	mov	r3, r0
 800cec6:	4618      	mov	r0, r3
 800cec8:	4770      	bx	lr
 800ceca:	460b      	mov	r3, r1
 800cecc:	4618      	mov	r0, r3
 800cece:	4770      	bx	lr
 800ced0:	4613      	mov	r3, r2
 800ced2:	4618      	mov	r0, r3
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	a1facade 	.word	0xa1facade

0800cedc <ai_platform_network_get_error>:
 800cedc:	4b04      	ldr	r3, [pc, #16]	@ (800cef0 <ai_platform_network_get_error+0x14>)
 800cede:	6802      	ldr	r2, [r0, #0]
 800cee0:	4393      	bics	r3, r2
 800cee2:	d102      	bne.n	800ceea <ai_platform_network_get_error+0xe>
 800cee4:	300c      	adds	r0, #12
 800cee6:	f000 bc77 	b.w	800d7d8 <core_get_error>
 800ceea:	f241 0010 	movw	r0, #4112	@ 0x1010
 800ceee:	4770      	bx	lr
 800cef0:	a1c00100 	.word	0xa1c00100

0800cef4 <ai_platform_network_set_error>:
 800cef4:	b110      	cbz	r0, 800cefc <ai_platform_network_set_error+0x8>
 800cef6:	300c      	adds	r0, #12
 800cef8:	f000 bc74 	b.w	800d7e4 <core_set_error>
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop

0800cf00 <ai_platform_inputs_get>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	4b38      	ldr	r3, [pc, #224]	@ (800cfe8 <ai_platform_inputs_get+0xe8>)
 800cf06:	6802      	ldr	r2, [r0, #0]
 800cf08:	b085      	sub	sp, #20
 800cf0a:	4393      	bics	r3, r2
 800cf0c:	9003      	str	r0, [sp, #12]
 800cf0e:	9102      	str	r1, [sp, #8]
 800cf10:	d160      	bne.n	800cfd4 <ai_platform_inputs_get+0xd4>
 800cf12:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d04f      	beq.n	800cfb8 <ai_platform_inputs_get+0xb8>
 800cf18:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800cf1c:	f1ba 0f00 	cmp.w	sl, #0
 800cf20:	d04a      	beq.n	800cfb8 <ai_platform_inputs_get+0xb8>
 800cf22:	f04f 0b00 	mov.w	fp, #0
 800cf26:	465d      	mov	r5, fp
 800cf28:	e016      	b.n	800cf58 <ai_platform_inputs_get+0x58>
 800cf2a:	9901      	ldr	r1, [sp, #4]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	507a      	str	r2, [r7, r1]
 800cf30:	69b1      	ldr	r1, [r6, #24]
 800cf32:	684e      	ldr	r6, [r1, #4]
 800cf34:	60a3      	str	r3, [r4, #8]
 800cf36:	f04f 0201 	mov.w	r2, #1
 800cf3a:	7522      	strb	r2, [r4, #20]
 800cf3c:	6961      	ldr	r1, [r4, #20]
 800cf3e:	6020      	str	r0, [r4, #0]
 800cf40:	f369 211f 	bfi	r1, r9, #8, #24
 800cf44:	2300      	movs	r3, #0
 800cf46:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800cf4a:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800cf4e:	f8c4 c004 	str.w	ip, [r4, #4]
 800cf52:	3501      	adds	r5, #1
 800cf54:	f10b 0b1c 	add.w	fp, fp, #28
 800cf58:	f8ba 3000 	ldrh.w	r3, [sl]
 800cf5c:	42ab      	cmp	r3, r5
 800cf5e:	b2aa      	uxth	r2, r5
 800cf60:	d93c      	bls.n	800cfdc <ai_platform_inputs_get+0xdc>
 800cf62:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cf66:	00e9      	lsls	r1, r5, #3
 800cf68:	9101      	str	r1, [sp, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d036      	beq.n	800cfdc <ai_platform_inputs_get+0xdc>
 800cf6e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800cf72:	2e00      	cmp	r6, #0
 800cf74:	d032      	beq.n	800cfdc <ai_platform_inputs_get+0xdc>
 800cf76:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cf7a:	69b2      	ldr	r2, [r6, #24]
 800cf7c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800cf80:	6810      	ldr	r0, [r2, #0]
 800cf82:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800cf86:	68b3      	ldr	r3, [r6, #8]
 800cf88:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800cf8c:	f001 fab6 	bl	800e4fc <ai_array_to_buffer_fmt>
 800cf90:	69b1      	ldr	r1, [r6, #24]
 800cf92:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800cf96:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800cf9a:	445c      	add	r4, fp
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0c8      	beq.n	800cf32 <ai_platform_inputs_get+0x32>
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800cfa6:	6831      	ldr	r1, [r6, #0]
 800cfa8:	6059      	str	r1, [r3, #4]
 800cfaa:	b111      	cbz	r1, 800cfb2 <ai_platform_inputs_get+0xb2>
 800cfac:	8849      	ldrh	r1, [r1, #2]
 800cfae:	2900      	cmp	r1, #0
 800cfb0:	d1bb      	bne.n	800cf2a <ai_platform_inputs_get+0x2a>
 800cfb2:	69b1      	ldr	r1, [r6, #24]
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e7bc      	b.n	800cf32 <ai_platform_inputs_get+0x32>
 800cfb8:	9803      	ldr	r0, [sp, #12]
 800cfba:	2218      	movs	r2, #24
 800cfbc:	2111      	movs	r1, #17
 800cfbe:	300c      	adds	r0, #12
 800cfc0:	f000 fc10 	bl	800d7e4 <core_set_error>
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	9b02      	ldr	r3, [sp, #8]
 800cfca:	b103      	cbz	r3, 800cfce <ai_platform_inputs_get+0xce>
 800cfcc:	801a      	strh	r2, [r3, #0]
 800cfce:	b005      	add	sp, #20
 800cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	b005      	add	sp, #20
 800cfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfdc:	2a00      	cmp	r2, #0
 800cfde:	d0eb      	beq.n	800cfb8 <ai_platform_inputs_get+0xb8>
 800cfe0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cfe4:	6858      	ldr	r0, [r3, #4]
 800cfe6:	e7ef      	b.n	800cfc8 <ai_platform_inputs_get+0xc8>
 800cfe8:	a1c00100 	.word	0xa1c00100

0800cfec <ai_platform_outputs_get>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	4b37      	ldr	r3, [pc, #220]	@ (800d0d0 <ai_platform_outputs_get+0xe4>)
 800cff2:	6802      	ldr	r2, [r0, #0]
 800cff4:	b085      	sub	sp, #20
 800cff6:	4393      	bics	r3, r2
 800cff8:	9003      	str	r0, [sp, #12]
 800cffa:	9102      	str	r1, [sp, #8]
 800cffc:	d15d      	bne.n	800d0ba <ai_platform_outputs_get+0xce>
 800cffe:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800d000:	2b01      	cmp	r3, #1
 800d002:	d94c      	bls.n	800d09e <ai_platform_outputs_get+0xb2>
 800d004:	f04f 0b00 	mov.w	fp, #0
 800d008:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800d00c:	465d      	mov	r5, fp
 800d00e:	46d8      	mov	r8, fp
 800d010:	e016      	b.n	800d040 <ai_platform_outputs_get+0x54>
 800d012:	9a01      	ldr	r2, [sp, #4]
 800d014:	2101      	movs	r1, #1
 800d016:	50b9      	str	r1, [r7, r2]
 800d018:	69b2      	ldr	r2, [r6, #24]
 800d01a:	6856      	ldr	r6, [r2, #4]
 800d01c:	6020      	str	r0, [r4, #0]
 800d01e:	f04f 0201 	mov.w	r2, #1
 800d022:	7522      	strb	r2, [r4, #20]
 800d024:	6960      	ldr	r0, [r4, #20]
 800d026:	f8c4 c004 	str.w	ip, [r4, #4]
 800d02a:	f369 201f 	bfi	r0, r9, #8, #24
 800d02e:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800d032:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800d036:	9b00      	ldr	r3, [sp, #0]
 800d038:	61a3      	str	r3, [r4, #24]
 800d03a:	3501      	adds	r5, #1
 800d03c:	f10b 0b1c 	add.w	fp, fp, #28
 800d040:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800d044:	42ab      	cmp	r3, r5
 800d046:	b2aa      	uxth	r2, r5
 800d048:	d93b      	bls.n	800d0c2 <ai_platform_outputs_get+0xd6>
 800d04a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d04e:	00e9      	lsls	r1, r5, #3
 800d050:	9101      	str	r1, [sp, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d035      	beq.n	800d0c2 <ai_platform_outputs_get+0xd6>
 800d056:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800d05a:	2e00      	cmp	r6, #0
 800d05c:	d031      	beq.n	800d0c2 <ai_platform_outputs_get+0xd6>
 800d05e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d062:	69b2      	ldr	r2, [r6, #24]
 800d064:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800d068:	68b3      	ldr	r3, [r6, #8]
 800d06a:	6810      	ldr	r0, [r2, #0]
 800d06c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800d070:	68f3      	ldr	r3, [r6, #12]
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	f001 fa42 	bl	800e4fc <ai_array_to_buffer_fmt>
 800d078:	69b2      	ldr	r2, [r6, #24]
 800d07a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800d07e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800d082:	445c      	add	r4, fp
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0c8      	beq.n	800d01a <ai_platform_outputs_get+0x2e>
 800d088:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 800d08c:	6832      	ldr	r2, [r6, #0]
 800d08e:	605a      	str	r2, [r3, #4]
 800d090:	b112      	cbz	r2, 800d098 <ai_platform_outputs_get+0xac>
 800d092:	8852      	ldrh	r2, [r2, #2]
 800d094:	2a00      	cmp	r2, #0
 800d096:	d1bc      	bne.n	800d012 <ai_platform_outputs_get+0x26>
 800d098:	69b2      	ldr	r2, [r6, #24]
 800d09a:	2300      	movs	r3, #0
 800d09c:	e7bd      	b.n	800d01a <ai_platform_outputs_get+0x2e>
 800d09e:	9803      	ldr	r0, [sp, #12]
 800d0a0:	2218      	movs	r2, #24
 800d0a2:	2111      	movs	r1, #17
 800d0a4:	300c      	adds	r0, #12
 800d0a6:	f000 fb9d 	bl	800d7e4 <core_set_error>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	9b02      	ldr	r3, [sp, #8]
 800d0b0:	b103      	cbz	r3, 800d0b4 <ai_platform_outputs_get+0xc8>
 800d0b2:	801a      	strh	r2, [r3, #0]
 800d0b4:	b005      	add	sp, #20
 800d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	b005      	add	sp, #20
 800d0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	d0eb      	beq.n	800d09e <ai_platform_outputs_get+0xb2>
 800d0c6:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d0ca:	6858      	ldr	r0, [r3, #4]
 800d0cc:	e7ef      	b.n	800d0ae <ai_platform_outputs_get+0xc2>
 800d0ce:	bf00      	nop
 800d0d0:	a1c00100 	.word	0xa1c00100

0800d0d4 <ai_platform_network_create>:
 800d0d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800d0de:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800d0e2:	b320      	cbz	r0, 800d12e <ai_platform_network_create+0x5a>
 800d0e4:	6002      	str	r2, [r0, #0]
 800d0e6:	4616      	mov	r6, r2
 800d0e8:	461f      	mov	r7, r3
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	f000 fb72 	bl	800d7d4 <core_init>
 800d0f0:	b970      	cbnz	r0, 800d110 <ai_platform_network_create+0x3c>
 800d0f2:	2530      	movs	r5, #48	@ 0x30
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	6023      	str	r3, [r4, #0]
 800d0f8:	2410      	movs	r4, #16
 800d0fa:	4642      	mov	r2, r8
 800d0fc:	4649      	mov	r1, r9
 800d0fe:	4638      	mov	r0, r7
 800d100:	f001 fa7e 	bl	800e600 <ai_version_get>
 800d104:	60b0      	str	r0, [r6, #8]
 800d106:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800d10a:	b003      	add	sp, #12
 800d10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d110:	2200      	movs	r2, #0
 800d112:	4649      	mov	r1, r9
 800d114:	4638      	mov	r0, r7
 800d116:	f001 fa73 	bl	800e600 <ai_version_get>
 800d11a:	2200      	movs	r2, #0
 800d11c:	4605      	mov	r5, r0
 800d11e:	2105      	movs	r1, #5
 800d120:	2001      	movs	r0, #1
 800d122:	f001 fa6d 	bl	800e600 <ai_version_get>
 800d126:	4285      	cmp	r5, r0
 800d128:	d008      	beq.n	800d13c <ai_platform_network_create+0x68>
 800d12a:	2501      	movs	r5, #1
 800d12c:	e7e2      	b.n	800d0f4 <ai_platform_network_create+0x20>
 800d12e:	2510      	movs	r5, #16
 800d130:	462c      	mov	r4, r5
 800d132:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800d136:	b003      	add	sp, #12
 800d138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d13c:	4b05      	ldr	r3, [pc, #20]	@ (800d154 <ai_platform_network_create+0x80>)
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	a801      	add	r0, sp, #4
 800d142:	f000 fb5b 	bl	800d7fc <ai_check_custom_types>
 800d146:	b110      	cbz	r0, 800d14e <ai_platform_network_create+0x7a>
 800d148:	2400      	movs	r4, #0
 800d14a:	4625      	mov	r5, r4
 800d14c:	e7d5      	b.n	800d0fa <ai_platform_network_create+0x26>
 800d14e:	2502      	movs	r5, #2
 800d150:	e7d0      	b.n	800d0f4 <ai_platform_network_create+0x20>
 800d152:	bf00      	nop
 800d154:	84048403 	.word	0x84048403

0800d158 <ai_platform_network_init>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	4b63      	ldr	r3, [pc, #396]	@ (800d2ec <ai_platform_network_init+0x194>)
 800d15e:	6802      	ldr	r2, [r0, #0]
 800d160:	4393      	bics	r3, r2
 800d162:	b083      	sub	sp, #12
 800d164:	d156      	bne.n	800d214 <ai_platform_network_init+0xbc>
 800d166:	4604      	mov	r4, r0
 800d168:	460f      	mov	r7, r1
 800d16a:	2900      	cmp	r1, #0
 800d16c:	f000 80a9 	beq.w	800d2c2 <ai_platform_network_init+0x16a>
 800d170:	680b      	ldr	r3, [r1, #0]
 800d172:	495f      	ldr	r1, [pc, #380]	@ (800d2f0 <ai_platform_network_init+0x198>)
 800d174:	428b      	cmp	r3, r1
 800d176:	d113      	bne.n	800d1a0 <ai_platform_network_init+0x48>
 800d178:	495c      	ldr	r1, [pc, #368]	@ (800d2ec <ai_platform_network_init+0x194>)
 800d17a:	89bd      	ldrh	r5, [r7, #12]
 800d17c:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800d180:	f8d7 8010 	ldr.w	r8, [r7, #16]
 800d184:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 800d188:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 800d18c:	68be      	ldr	r6, [r7, #8]
 800d18e:	428a      	cmp	r2, r1
 800d190:	d02c      	beq.n	800d1ec <ai_platform_network_init+0x94>
 800d192:	2303      	movs	r3, #3
 800d194:	6123      	str	r3, [r4, #16]
 800d196:	4627      	mov	r7, r4
 800d198:	4638      	mov	r0, r7
 800d19a:	b003      	add	sp, #12
 800d19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	9301      	str	r3, [sp, #4]
 800d1a6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800d1aa:	f7ff fd7f 	bl	800ccac <ai_buffer_get_size>
 800d1ae:	f107 081c 	add.w	r8, r7, #28
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	2101      	movs	r1, #1
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	463e      	mov	r6, r7
 800d1ba:	6a3f      	ldr	r7, [r7, #32]
 800d1bc:	f7ff fd76 	bl	800ccac <ai_buffer_get_size>
 800d1c0:	2d00      	cmp	r5, #0
 800d1c2:	9b01      	ldr	r3, [sp, #4]
 800d1c4:	bf0a      	itet	eq
 800d1c6:	46a9      	moveq	r9, r5
 800d1c8:	f04f 0901 	movne.w	r9, #1
 800d1cc:	462e      	moveq	r6, r5
 800d1ce:	b330      	cbz	r0, 800d21e <ai_platform_network_init+0xc6>
 800d1d0:	2f00      	cmp	r7, #0
 800d1d2:	f000 8084 	beq.w	800d2de <ai_platform_network_init+0x186>
 800d1d6:	f04f 0a01 	mov.w	sl, #1
 800d1da:	f1bb 0f00 	cmp.w	fp, #0
 800d1de:	d021      	beq.n	800d224 <ai_platform_network_init+0xcc>
 800d1e0:	2500      	movs	r5, #0
 800d1e2:	6822      	ldr	r2, [r4, #0]
 800d1e4:	4941      	ldr	r1, [pc, #260]	@ (800d2ec <ai_platform_network_init+0x194>)
 800d1e6:	428a      	cmp	r2, r1
 800d1e8:	46ab      	mov	fp, r5
 800d1ea:	d1d2      	bne.n	800d192 <ai_platform_network_init+0x3a>
 800d1ec:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800d1ee:	454a      	cmp	r2, r9
 800d1f0:	4a3f      	ldr	r2, [pc, #252]	@ (800d2f0 <ai_platform_network_init+0x198>)
 800d1f2:	d221      	bcs.n	800d238 <ai_platform_network_init+0xe0>
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d15c      	bne.n	800d2b2 <ai_platform_network_init+0x15a>
 800d1f8:	6266      	str	r6, [r4, #36]	@ 0x24
 800d1fa:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800d1fe:	f8a4 b020 	strh.w	fp, [r4, #32]
 800d202:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800d206:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800d20a:	8525      	strh	r5, [r4, #40]	@ 0x28
 800d20c:	4620      	mov	r0, r4
 800d20e:	f000 fb1f 	bl	800d850 <ai_layers_init_all>
 800d212:	e7be      	b.n	800d192 <ai_platform_network_init+0x3a>
 800d214:	2700      	movs	r7, #0
 800d216:	4638      	mov	r0, r7
 800d218:	b003      	add	sp, #12
 800d21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21e:	4680      	mov	r8, r0
 800d220:	4682      	mov	sl, r0
 800d222:	e7da      	b.n	800d1da <ai_platform_network_init+0x82>
 800d224:	2d00      	cmp	r5, #0
 800d226:	d0dc      	beq.n	800d1e2 <ai_platform_network_init+0x8a>
 800d228:	2212      	movs	r2, #18
 800d22a:	2110      	movs	r1, #16
 800d22c:	f104 000c 	add.w	r0, r4, #12
 800d230:	f000 fad8 	bl	800d7e4 <core_set_error>
 800d234:	465f      	mov	r7, fp
 800d236:	e7af      	b.n	800d198 <ai_platform_network_init+0x40>
 800d238:	4293      	cmp	r3, r2
 800d23a:	d0dd      	beq.n	800d1f8 <ai_platform_network_init+0xa0>
 800d23c:	f1b9 0f00 	cmp.w	r9, #0
 800d240:	d018      	beq.n	800d274 <ai_platform_network_init+0x11c>
 800d242:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	f8cd 9004 	str.w	r9, [sp, #4]
 800d24c:	2700      	movs	r7, #0
 800d24e:	4699      	mov	r9, r3
 800d250:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d252:	eb06 0e07 	add.w	lr, r6, r7
 800d256:	eb03 0c07 	add.w	ip, r3, r7
 800d25a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d25e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d262:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800d266:	371c      	adds	r7, #28
 800d268:	45b9      	cmp	r9, r7
 800d26a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800d26e:	d1ef      	bne.n	800d250 <ai_platform_network_init+0xf8>
 800d270:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d274:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d276:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800d27a:	4553      	cmp	r3, sl
 800d27c:	f8a4 b020 	strh.w	fp, [r4, #32]
 800d280:	d325      	bcc.n	800d2ce <ai_platform_network_init+0x176>
 800d282:	f1ba 0f00 	cmp.w	sl, #0
 800d286:	d0be      	beq.n	800d206 <ai_platform_network_init+0xae>
 800d288:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 800d28c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800d290:	f04f 0c00 	mov.w	ip, #0
 800d294:	eb08 070c 	add.w	r7, r8, ip
 800d298:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d29a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d29c:	4466      	add	r6, ip
 800d29e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d2a0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d2a4:	f10c 0c1c 	add.w	ip, ip, #28
 800d2a8:	45f4      	cmp	ip, lr
 800d2aa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800d2ae:	d1f1      	bne.n	800d294 <ai_platform_network_init+0x13c>
 800d2b0:	e7a9      	b.n	800d206 <ai_platform_network_init+0xae>
 800d2b2:	2212      	movs	r2, #18
 800d2b4:	2116      	movs	r1, #22
 800d2b6:	f104 000c 	add.w	r0, r4, #12
 800d2ba:	f000 fa93 	bl	800d7e4 <core_set_error>
 800d2be:	2700      	movs	r7, #0
 800d2c0:	e76a      	b.n	800d198 <ai_platform_network_init+0x40>
 800d2c2:	2211      	movs	r2, #17
 800d2c4:	2110      	movs	r1, #16
 800d2c6:	300c      	adds	r0, #12
 800d2c8:	f000 fa8c 	bl	800d7e4 <core_set_error>
 800d2cc:	e764      	b.n	800d198 <ai_platform_network_init+0x40>
 800d2ce:	2213      	movs	r2, #19
 800d2d0:	2116      	movs	r1, #22
 800d2d2:	f104 000c 	add.w	r0, r4, #12
 800d2d6:	f000 fa85 	bl	800d7e4 <core_set_error>
 800d2da:	2700      	movs	r7, #0
 800d2dc:	e75c      	b.n	800d198 <ai_platform_network_init+0x40>
 800d2de:	2213      	movs	r2, #19
 800d2e0:	2110      	movs	r1, #16
 800d2e2:	f104 000c 	add.w	r0, r4, #12
 800d2e6:	f000 fa7d 	bl	800d7e4 <core_set_error>
 800d2ea:	e755      	b.n	800d198 <ai_platform_network_init+0x40>
 800d2ec:	a1c00100 	.word	0xa1c00100
 800d2f0:	a1facade 	.word	0xa1facade

0800d2f4 <ai_platform_network_post_init>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4b16      	ldr	r3, [pc, #88]	@ (800d350 <ai_platform_network_post_init+0x5c>)
 800d2f8:	6802      	ldr	r2, [r0, #0]
 800d2fa:	ea02 0103 	and.w	r1, r2, r3
 800d2fe:	4393      	bics	r3, r2
 800d300:	d108      	bne.n	800d314 <ai_platform_network_post_init+0x20>
 800d302:	6903      	ldr	r3, [r0, #16]
 800d304:	f013 0502 	ands.w	r5, r3, #2
 800d308:	4604      	mov	r4, r0
 800d30a:	d005      	beq.n	800d318 <ai_platform_network_post_init+0x24>
 800d30c:	428a      	cmp	r2, r1
 800d30e:	d00a      	beq.n	800d326 <ai_platform_network_post_init+0x32>
 800d310:	2001      	movs	r0, #1
 800d312:	bd38      	pop	{r3, r4, r5, pc}
 800d314:	2000      	movs	r0, #0
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	2210      	movs	r2, #16
 800d31a:	2111      	movs	r1, #17
 800d31c:	300c      	adds	r0, #12
 800d31e:	f000 fa61 	bl	800d7e4 <core_set_error>
 800d322:	4628      	mov	r0, r5
 800d324:	bd38      	pop	{r3, r4, r5, pc}
 800d326:	f000 faa1 	bl	800d86c <ai_layers_post_init_all>
 800d32a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d0ef      	beq.n	800d310 <ai_platform_network_post_init+0x1c>
 800d330:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800d332:	e008      	b.n	800d346 <ai_platform_network_post_init+0x52>
 800d334:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800d338:	4798      	blx	r3
 800d33a:	692b      	ldr	r3, [r5, #16]
 800d33c:	42ab      	cmp	r3, r5
 800d33e:	d0e7      	beq.n	800d310 <ai_platform_network_post_init+0x1c>
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0e5      	beq.n	800d310 <ai_platform_network_post_init+0x1c>
 800d344:	461d      	mov	r5, r3
 800d346:	4629      	mov	r1, r5
 800d348:	2000      	movs	r0, #0
 800d34a:	2d00      	cmp	r5, #0
 800d34c:	d1f2      	bne.n	800d334 <ai_platform_network_post_init+0x40>
 800d34e:	e7df      	b.n	800d310 <ai_platform_network_post_init+0x1c>
 800d350:	a1c00100 	.word	0xa1c00100

0800d354 <ai_platform_network_process>:
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d358:	4bb5      	ldr	r3, [pc, #724]	@ (800d630 <ai_platform_network_process+0x2dc>)
 800d35a:	4605      	mov	r5, r0
 800d35c:	6800      	ldr	r0, [r0, #0]
 800d35e:	b085      	sub	sp, #20
 800d360:	4383      	bics	r3, r0
 800d362:	9202      	str	r2, [sp, #8]
 800d364:	f040 8140 	bne.w	800d5e8 <ai_platform_network_process+0x294>
 800d368:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 8125 	beq.w	800d5ba <ai_platform_network_process+0x266>
 800d370:	692b      	ldr	r3, [r5, #16]
 800d372:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 800d376:	f003 0303 	and.w	r3, r3, #3
 800d37a:	2700      	movs	r7, #0
 800d37c:	2b03      	cmp	r3, #3
 800d37e:	61af      	str	r7, [r5, #24]
 800d380:	f040 8137 	bne.w	800d5f2 <ai_platform_network_process+0x29e>
 800d384:	2900      	cmp	r1, #0
 800d386:	f000 811e 	beq.w	800d5c6 <ai_platform_network_process+0x272>
 800d38a:	f1ba 0f00 	cmp.w	sl, #0
 800d38e:	f000 811a 	beq.w	800d5c6 <ai_platform_network_process+0x272>
 800d392:	f8ba 3000 	ldrh.w	r3, [sl]
 800d396:	2b00      	cmp	r3, #0
 800d398:	f000 8115 	beq.w	800d5c6 <ai_platform_network_process+0x272>
 800d39c:	698b      	ldr	r3, [r1, #24]
 800d39e:	9503      	str	r5, [sp, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	460e      	mov	r6, r1
 800d3a6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d072      	beq.n	800d494 <ai_platform_network_process+0x140>
 800d3ae:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d3b2:	2c00      	cmp	r4, #0
 800d3b4:	d06e      	beq.n	800d494 <ai_platform_network_process+0x140>
 800d3b6:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d3ba:	f8d3 9000 	ldr.w	r9, [r3]
 800d3be:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800d3c2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800d3c6:	f000 81d3 	beq.w	800d770 <ai_platform_network_process+0x41c>
 800d3ca:	69a3      	ldr	r3, [r4, #24]
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	685d      	ldr	r5, [r3, #4]
 800d3d2:	f7ff fc6b 	bl	800ccac <ai_buffer_get_size>
 800d3d6:	4285      	cmp	r5, r0
 800d3d8:	f0c0 8116 	bcc.w	800d608 <ai_platform_network_process+0x2b4>
 800d3dc:	68e0      	ldr	r0, [r4, #12]
 800d3de:	69b1      	ldr	r1, [r6, #24]
 800d3e0:	68c2      	ldr	r2, [r0, #12]
 800d3e2:	68cb      	ldr	r3, [r1, #12]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	f040 810f 	bne.w	800d608 <ai_platform_network_process+0x2b4>
 800d3ea:	6882      	ldr	r2, [r0, #8]
 800d3ec:	688b      	ldr	r3, [r1, #8]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	f040 810a 	bne.w	800d608 <ai_platform_network_process+0x2b4>
 800d3f4:	6842      	ldr	r2, [r0, #4]
 800d3f6:	684b      	ldr	r3, [r1, #4]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	f040 8105 	bne.w	800d608 <ai_platform_network_process+0x2b4>
 800d3fe:	69a3      	ldr	r3, [r4, #24]
 800d400:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d404:	f001 f8ea 	bl	800e5dc <ai_array_get_data_byte_size>
 800d408:	4605      	mov	r5, r0
 800d40a:	4620      	mov	r0, r4
 800d40c:	f001 f8fe 	bl	800e60c <get_tensor_byte_size>
 800d410:	4285      	cmp	r5, r0
 800d412:	f0c0 80f9 	bcc.w	800d608 <ai_platform_network_process+0x2b4>
 800d416:	69a3      	ldr	r3, [r4, #24]
 800d418:	6818      	ldr	r0, [r3, #0]
 800d41a:	f001 f86f 	bl	800e4fc <ai_array_to_buffer_fmt>
 800d41e:	6833      	ldr	r3, [r6, #0]
 800d420:	4058      	eors	r0, r3
 800d422:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800d426:	f040 81a5 	bne.w	800d774 <ai_platform_network_process+0x420>
 800d42a:	6873      	ldr	r3, [r6, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 819f 	beq.w	800d770 <ai_platform_network_process+0x41c>
 800d432:	69b3      	ldr	r3, [r6, #24]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	f000 81a5 	beq.w	800d786 <ai_platform_network_process+0x432>
 800d43c:	9a01      	ldr	r2, [sp, #4]
 800d43e:	429a      	cmp	r2, r3
 800d440:	bf38      	it	cc
 800d442:	461a      	movcc	r2, r3
 800d444:	4620      	mov	r0, r4
 800d446:	9201      	str	r2, [sp, #4]
 800d448:	f001 f8e0 	bl	800e60c <get_tensor_byte_size>
 800d44c:	f8c8 0008 	str.w	r0, [r8, #8]
 800d450:	69b3      	ldr	r3, [r6, #24]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	fb00 f303 	mul.w	r3, r0, r3
 800d458:	f8c8 300c 	str.w	r3, [r8, #12]
 800d45c:	6871      	ldr	r1, [r6, #4]
 800d45e:	f8c8 1004 	str.w	r1, [r8, #4]
 800d462:	440b      	add	r3, r1
 800d464:	f849 300b 	str.w	r3, [r9, fp]
 800d468:	69a0      	ldr	r0, [r4, #24]
 800d46a:	6803      	ldr	r3, [r0, #0]
 800d46c:	009a      	lsls	r2, r3, #2
 800d46e:	f107 0701 	add.w	r7, r7, #1
 800d472:	f106 061c 	add.w	r6, r6, #28
 800d476:	f100 80b1 	bmi.w	800d5dc <ai_platform_network_process+0x288>
 800d47a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d47e:	1a9b      	subs	r3, r3, r2
 800d480:	4419      	add	r1, r3
 800d482:	6081      	str	r1, [r0, #8]
 800d484:	69a3      	ldr	r3, [r4, #24]
 800d486:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d48a:	60da      	str	r2, [r3, #12]
 800d48c:	f8ba 3000 	ldrh.w	r3, [sl]
 800d490:	42bb      	cmp	r3, r7
 800d492:	d888      	bhi.n	800d3a6 <ai_platform_network_process+0x52>
 800d494:	9d03      	ldr	r5, [sp, #12]
 800d496:	9b02      	ldr	r3, [sp, #8]
 800d498:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f000 817c 	beq.w	800d798 <ai_platform_network_process+0x444>
 800d4a0:	2a01      	cmp	r2, #1
 800d4a2:	f240 80bd 	bls.w	800d620 <ai_platform_network_process+0x2cc>
 800d4a6:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 800d4aa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f000 80b6 	beq.w	800d620 <ai_platform_network_process+0x2cc>
 800d4b4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d4b8:	2700      	movs	r7, #0
 800d4ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f000 80bd 	beq.w	800d63e <ai_platform_network_process+0x2ea>
 800d4c4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800d4c8:	2e00      	cmp	r6, #0
 800d4ca:	f000 80b8 	beq.w	800d63e <ai_platform_network_process+0x2ea>
 800d4ce:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d4d2:	681c      	ldr	r4, [r3, #0]
 800d4d4:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800d4d8:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800d4dc:	f000 8160 	beq.w	800d7a0 <ai_platform_network_process+0x44c>
 800d4e0:	69b3      	ldr	r3, [r6, #24]
 800d4e2:	2101      	movs	r1, #1
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	9302      	str	r3, [sp, #8]
 800d4e8:	4658      	mov	r0, fp
 800d4ea:	f7ff fbdf 	bl	800ccac <ai_buffer_get_size>
 800d4ee:	9b02      	ldr	r3, [sp, #8]
 800d4f0:	4283      	cmp	r3, r0
 800d4f2:	f0c0 8095 	bcc.w	800d620 <ai_platform_network_process+0x2cc>
 800d4f6:	68f0      	ldr	r0, [r6, #12]
 800d4f8:	f8db 1018 	ldr.w	r1, [fp, #24]
 800d4fc:	68c2      	ldr	r2, [r0, #12]
 800d4fe:	68cb      	ldr	r3, [r1, #12]
 800d500:	429a      	cmp	r2, r3
 800d502:	f040 808d 	bne.w	800d620 <ai_platform_network_process+0x2cc>
 800d506:	6882      	ldr	r2, [r0, #8]
 800d508:	688b      	ldr	r3, [r1, #8]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	f040 8088 	bne.w	800d620 <ai_platform_network_process+0x2cc>
 800d510:	6842      	ldr	r2, [r0, #4]
 800d512:	684b      	ldr	r3, [r1, #4]
 800d514:	429a      	cmp	r2, r3
 800d516:	f040 8083 	bne.w	800d620 <ai_platform_network_process+0x2cc>
 800d51a:	69b3      	ldr	r3, [r6, #24]
 800d51c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d520:	f001 f85c 	bl	800e5dc <ai_array_get_data_byte_size>
 800d524:	9002      	str	r0, [sp, #8]
 800d526:	4630      	mov	r0, r6
 800d528:	f001 f870 	bl	800e60c <get_tensor_byte_size>
 800d52c:	9b02      	ldr	r3, [sp, #8]
 800d52e:	4283      	cmp	r3, r0
 800d530:	d376      	bcc.n	800d620 <ai_platform_network_process+0x2cc>
 800d532:	69b3      	ldr	r3, [r6, #24]
 800d534:	6818      	ldr	r0, [r3, #0]
 800d536:	f000 ffe1 	bl	800e4fc <ai_array_to_buffer_fmt>
 800d53a:	f8db 3000 	ldr.w	r3, [fp]
 800d53e:	4058      	eors	r0, r3
 800d540:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800d544:	f040 8134 	bne.w	800d7b0 <ai_platform_network_process+0x45c>
 800d548:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f000 8127 	beq.w	800d7a0 <ai_platform_network_process+0x44c>
 800d552:	f8db 3018 	ldr.w	r3, [fp, #24]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 8133 	beq.w	800d7c4 <ai_platform_network_process+0x470>
 800d55e:	9a01      	ldr	r2, [sp, #4]
 800d560:	429a      	cmp	r2, r3
 800d562:	bf38      	it	cc
 800d564:	461a      	movcc	r2, r3
 800d566:	4630      	mov	r0, r6
 800d568:	9201      	str	r2, [sp, #4]
 800d56a:	f001 f84f 	bl	800e60c <get_tensor_byte_size>
 800d56e:	f8c9 0008 	str.w	r0, [r9, #8]
 800d572:	f8db 3018 	ldr.w	r3, [fp, #24]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	fb00 f303 	mul.w	r3, r0, r3
 800d57c:	f8c9 300c 	str.w	r3, [r9, #12]
 800d580:	f8db 1004 	ldr.w	r1, [fp, #4]
 800d584:	f8c9 1004 	str.w	r1, [r9, #4]
 800d588:	440b      	add	r3, r1
 800d58a:	f844 300a 	str.w	r3, [r4, sl]
 800d58e:	69b0      	ldr	r0, [r6, #24]
 800d590:	6803      	ldr	r3, [r0, #0]
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	f107 0701 	add.w	r7, r7, #1
 800d598:	f10b 0b1c 	add.w	fp, fp, #28
 800d59c:	d44a      	bmi.n	800d634 <ai_platform_network_process+0x2e0>
 800d59e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800d5a2:	1a9b      	subs	r3, r3, r2
 800d5a4:	4419      	add	r1, r3
 800d5a6:	6081      	str	r1, [r0, #8]
 800d5a8:	69b3      	ldr	r3, [r6, #24]
 800d5aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d5ae:	60da      	str	r2, [r3, #12]
 800d5b0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d5b4:	42bb      	cmp	r3, r7
 800d5b6:	d880      	bhi.n	800d4ba <ai_platform_network_process+0x166>
 800d5b8:	e041      	b.n	800d63e <ai_platform_network_process+0x2ea>
 800d5ba:	692a      	ldr	r2, [r5, #16]
 800d5bc:	61ab      	str	r3, [r5, #24]
 800d5be:	f002 0203 	and.w	r2, r2, #3
 800d5c2:	2a03      	cmp	r2, #3
 800d5c4:	d115      	bne.n	800d5f2 <ai_platform_network_process+0x29e>
 800d5c6:	2217      	movs	r2, #23
 800d5c8:	2112      	movs	r1, #18
 800d5ca:	f105 000c 	add.w	r0, r5, #12
 800d5ce:	f000 f909 	bl	800d7e4 <core_set_error>
 800d5d2:	2400      	movs	r4, #0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	b005      	add	sp, #20
 800d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5dc:	f8ba 3000 	ldrh.w	r3, [sl]
 800d5e0:	429f      	cmp	r7, r3
 800d5e2:	f4ff aee0 	bcc.w	800d3a6 <ai_platform_network_process+0x52>
 800d5e6:	e755      	b.n	800d494 <ai_platform_network_process+0x140>
 800d5e8:	2400      	movs	r4, #0
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	b005      	add	sp, #20
 800d5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f2:	2230      	movs	r2, #48	@ 0x30
 800d5f4:	2111      	movs	r1, #17
 800d5f6:	f105 000c 	add.w	r0, r5, #12
 800d5fa:	f000 f8f3 	bl	800d7e4 <core_set_error>
 800d5fe:	2400      	movs	r4, #0
 800d600:	4620      	mov	r0, r4
 800d602:	b005      	add	sp, #20
 800d604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d608:	9d03      	ldr	r5, [sp, #12]
 800d60a:	2218      	movs	r2, #24
 800d60c:	2112      	movs	r1, #18
 800d60e:	f105 000c 	add.w	r0, r5, #12
 800d612:	f000 f8e7 	bl	800d7e4 <core_set_error>
 800d616:	2400      	movs	r4, #0
 800d618:	4620      	mov	r0, r4
 800d61a:	b005      	add	sp, #20
 800d61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d620:	2218      	movs	r2, #24
 800d622:	2113      	movs	r1, #19
 800d624:	f105 000c 	add.w	r0, r5, #12
 800d628:	f000 f8dc 	bl	800d7e4 <core_set_error>
 800d62c:	2400      	movs	r4, #0
 800d62e:	e7d1      	b.n	800d5d4 <ai_platform_network_process+0x280>
 800d630:	a1c00100 	.word	0xa1c00100
 800d634:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800d638:	429f      	cmp	r7, r3
 800d63a:	f4ff af3e 	bcc.w	800d4ba <ai_platform_network_process+0x166>
 800d63e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d642:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800d644:	832b      	strh	r3, [r5, #24]
 800d646:	2a00      	cmp	r2, #0
 800d648:	f040 808c 	bne.w	800d764 <ai_platform_network_process+0x410>
 800d64c:	4616      	mov	r6, r2
 800d64e:	4617      	mov	r7, r2
 800d650:	8b6c      	ldrh	r4, [r5, #26]
 800d652:	429c      	cmp	r4, r3
 800d654:	bf38      	it	cc
 800d656:	46ab      	movcc	fp, r5
 800d658:	d2bc      	bcs.n	800d5d4 <ai_platform_network_process+0x280>
 800d65a:	2e00      	cmp	r6, #0
 800d65c:	d030      	beq.n	800d6c0 <ai_platform_network_process+0x36c>
 800d65e:	f04f 0800 	mov.w	r8, #0
 800d662:	e014      	b.n	800d68e <ai_platform_network_process+0x33a>
 800d664:	6882      	ldr	r2, [r0, #8]
 800d666:	68c5      	ldr	r5, [r0, #12]
 800d668:	6863      	ldr	r3, [r4, #4]
 800d66a:	1b52      	subs	r2, r2, r5
 800d66c:	4413      	add	r3, r2
 800d66e:	6083      	str	r3, [r0, #8]
 800d670:	698b      	ldr	r3, [r1, #24]
 800d672:	6862      	ldr	r2, [r4, #4]
 800d674:	60da      	str	r2, [r3, #12]
 800d676:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800d67a:	f859 200a 	ldr.w	r2, [r9, sl]
 800d67e:	440b      	add	r3, r1
 800d680:	4293      	cmp	r3, r2
 800d682:	bf24      	itt	cs
 800d684:	68e3      	ldrcs	r3, [r4, #12]
 800d686:	1ad3      	subcs	r3, r2, r3
 800d688:	6063      	str	r3, [r4, #4]
 800d68a:	f108 0801 	add.w	r8, r8, #1
 800d68e:	8833      	ldrh	r3, [r6, #0]
 800d690:	4543      	cmp	r3, r8
 800d692:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800d696:	d913      	bls.n	800d6c0 <ai_platform_network_process+0x36c>
 800d698:	6873      	ldr	r3, [r6, #4]
 800d69a:	b18b      	cbz	r3, 800d6c0 <ai_platform_network_process+0x36c>
 800d69c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800d6a0:	b171      	cbz	r1, 800d6c0 <ai_platform_network_process+0x36c>
 800d6a2:	6988      	ldr	r0, [r1, #24]
 800d6a4:	68b2      	ldr	r2, [r6, #8]
 800d6a6:	6803      	ldr	r3, [r0, #0]
 800d6a8:	f8d2 9000 	ldr.w	r9, [r2]
 800d6ac:	009d      	lsls	r5, r3, #2
 800d6ae:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800d6b2:	d5d7      	bpl.n	800d664 <ai_platform_network_process+0x310>
 800d6b4:	6881      	ldr	r1, [r0, #8]
 800d6b6:	68a2      	ldr	r2, [r4, #8]
 800d6b8:	6860      	ldr	r0, [r4, #4]
 800d6ba:	f000 fe7d 	bl	800e3b8 <st_int8_copy>
 800d6be:	e7da      	b.n	800d676 <ai_platform_network_process+0x322>
 800d6c0:	4658      	mov	r0, fp
 800d6c2:	f000 f8e7 	bl	800d894 <ai_layers_forward_all>
 800d6c6:	2f00      	cmp	r7, #0
 800d6c8:	d03d      	beq.n	800d746 <ai_platform_network_process+0x3f2>
 800d6ca:	2400      	movs	r4, #0
 800d6cc:	e016      	b.n	800d6fc <ai_platform_network_process+0x3a8>
 800d6ce:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800d6d2:	f859 100a 	ldr.w	r1, [r9, sl]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	428b      	cmp	r3, r1
 800d6da:	bf24      	itt	cs
 800d6dc:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800d6e0:	1acb      	subcs	r3, r1, r3
 800d6e2:	f8c8 3004 	str.w	r3, [r8, #4]
 800d6e6:	6981      	ldr	r1, [r0, #24]
 800d6e8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800d6ec:	1b52      	subs	r2, r2, r5
 800d6ee:	4413      	add	r3, r2
 800d6f0:	608b      	str	r3, [r1, #8]
 800d6f2:	6983      	ldr	r3, [r0, #24]
 800d6f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d6f8:	60da      	str	r2, [r3, #12]
 800d6fa:	3401      	adds	r4, #1
 800d6fc:	883b      	ldrh	r3, [r7, #0]
 800d6fe:	42a3      	cmp	r3, r4
 800d700:	d921      	bls.n	800d746 <ai_platform_network_process+0x3f2>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	b1fb      	cbz	r3, 800d746 <ai_platform_network_process+0x3f2>
 800d706:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d70a:	b1e0      	cbz	r0, 800d746 <ai_platform_network_process+0x3f2>
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	6983      	ldr	r3, [r0, #24]
 800d710:	f8d2 9000 	ldr.w	r9, [r2]
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	0092      	lsls	r2, r2, #2
 800d718:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800d71c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800d720:	d5d5      	bpl.n	800d6ce <ai_platform_network_process+0x37a>
 800d722:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800d726:	6898      	ldr	r0, [r3, #8]
 800d728:	f000 fe46 	bl	800e3b8 <st_int8_copy>
 800d72c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800d730:	f859 200a 	ldr.w	r2, [r9, sl]
 800d734:	440b      	add	r3, r1
 800d736:	4293      	cmp	r3, r2
 800d738:	bf24      	itt	cs
 800d73a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800d73e:	1ad3      	subcs	r3, r2, r3
 800d740:	f8c8 3004 	str.w	r3, [r8, #4]
 800d744:	e7d9      	b.n	800d6fa <ai_platform_network_process+0x3a6>
 800d746:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800d74a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800d74e:	3401      	adds	r4, #1
 800d750:	b2a4      	uxth	r4, r4
 800d752:	42a3      	cmp	r3, r4
 800d754:	f8ab 401a 	strh.w	r4, [fp, #26]
 800d758:	f63f af7f 	bhi.w	800d65a <ai_platform_network_process+0x306>
 800d75c:	4620      	mov	r0, r4
 800d75e:	b005      	add	sp, #20
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	2a01      	cmp	r2, #1
 800d766:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 800d768:	d02a      	beq.n	800d7c0 <ai_platform_network_process+0x46c>
 800d76a:	f106 070c 	add.w	r7, r6, #12
 800d76e:	e76f      	b.n	800d650 <ai_platform_network_process+0x2fc>
 800d770:	9d03      	ldr	r5, [sp, #12]
 800d772:	e728      	b.n	800d5c6 <ai_platform_network_process+0x272>
 800d774:	9d03      	ldr	r5, [sp, #12]
 800d776:	2219      	movs	r2, #25
 800d778:	2112      	movs	r1, #18
 800d77a:	f105 000c 	add.w	r0, r5, #12
 800d77e:	f000 f831 	bl	800d7e4 <core_set_error>
 800d782:	2400      	movs	r4, #0
 800d784:	e726      	b.n	800d5d4 <ai_platform_network_process+0x280>
 800d786:	9d03      	ldr	r5, [sp, #12]
 800d788:	4604      	mov	r4, r0
 800d78a:	2221      	movs	r2, #33	@ 0x21
 800d78c:	2112      	movs	r1, #18
 800d78e:	f105 000c 	add.w	r0, r5, #12
 800d792:	f000 f827 	bl	800d7e4 <core_set_error>
 800d796:	e71d      	b.n	800d5d4 <ai_platform_network_process+0x280>
 800d798:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d79c:	832b      	strh	r3, [r5, #24]
 800d79e:	e752      	b.n	800d646 <ai_platform_network_process+0x2f2>
 800d7a0:	2217      	movs	r2, #23
 800d7a2:	2113      	movs	r1, #19
 800d7a4:	f105 000c 	add.w	r0, r5, #12
 800d7a8:	f000 f81c 	bl	800d7e4 <core_set_error>
 800d7ac:	2400      	movs	r4, #0
 800d7ae:	e711      	b.n	800d5d4 <ai_platform_network_process+0x280>
 800d7b0:	2219      	movs	r2, #25
 800d7b2:	2113      	movs	r1, #19
 800d7b4:	f105 000c 	add.w	r0, r5, #12
 800d7b8:	f000 f814 	bl	800d7e4 <core_set_error>
 800d7bc:	2400      	movs	r4, #0
 800d7be:	e709      	b.n	800d5d4 <ai_platform_network_process+0x280>
 800d7c0:	2700      	movs	r7, #0
 800d7c2:	e745      	b.n	800d650 <ai_platform_network_process+0x2fc>
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	2221      	movs	r2, #33	@ 0x21
 800d7c8:	2113      	movs	r1, #19
 800d7ca:	f105 000c 	add.w	r0, r5, #12
 800d7ce:	f000 f809 	bl	800d7e4 <core_set_error>
 800d7d2:	e6ff      	b.n	800d5d4 <ai_platform_network_process+0x280>

0800d7d4 <core_init>:
 800d7d4:	2001      	movs	r0, #1
 800d7d6:	4770      	bx	lr

0800d7d8 <core_get_error>:
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2200      	movs	r2, #0
 800d7dc:	6800      	ldr	r0, [r0, #0]
 800d7de:	601a      	str	r2, [r3, #0]
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop

0800d7e4 <core_set_error>:
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	7800      	ldrb	r0, [r0, #0]
 800d7e8:	b108      	cbz	r0, 800d7ee <core_set_error+0xa>
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	4770      	bx	lr
 800d7ee:	7019      	strb	r1, [r3, #0]
 800d7f0:	6819      	ldr	r1, [r3, #0]
 800d7f2:	f362 211f 	bfi	r1, r2, #8, #24
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	6019      	str	r1, [r3, #0]
 800d7fa:	4770      	bx	lr

0800d7fc <ai_check_custom_types>:
 800d7fc:	b082      	sub	sp, #8
 800d7fe:	4b13      	ldr	r3, [pc, #76]	@ (800d84c <ai_check_custom_types+0x50>)
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	b118      	cbz	r0, 800d80c <ai_check_custom_types+0x10>
 800d804:	7803      	ldrb	r3, [r0, #0]
 800d806:	2b03      	cmp	r3, #3
 800d808:	d002      	beq.n	800d810 <ai_check_custom_types+0x14>
 800d80a:	2000      	movs	r0, #0
 800d80c:	b002      	add	sp, #8
 800d80e:	4770      	bx	lr
 800d810:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d814:	4293      	cmp	r3, r2
 800d816:	d004      	beq.n	800d822 <ai_check_custom_types+0x26>
 800d818:	2001      	movs	r0, #1
 800d81a:	f080 0001 	eor.w	r0, r0, #1
 800d81e:	b002      	add	sp, #8
 800d820:	4770      	bx	lr
 800d822:	7842      	ldrb	r2, [r0, #1]
 800d824:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d828:	429a      	cmp	r2, r3
 800d82a:	f100 0001 	add.w	r0, r0, #1
 800d82e:	d1f3      	bne.n	800d818 <ai_check_custom_types+0x1c>
 800d830:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800d834:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d1ed      	bne.n	800d818 <ai_check_custom_types+0x1c>
 800d83c:	7842      	ldrb	r2, [r0, #1]
 800d83e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d842:	429a      	cmp	r2, r3
 800d844:	d1e8      	bne.n	800d818 <ai_check_custom_types+0x1c>
 800d846:	2000      	movs	r0, #0
 800d848:	e7e7      	b.n	800d81a <ai_check_custom_types+0x1e>
 800d84a:	bf00      	nop
 800d84c:	84048403 	.word	0x84048403

0800d850 <ai_layers_init_all>:
 800d850:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d852:	2100      	movs	r1, #0
 800d854:	b143      	cbz	r3, 800d868 <ai_layers_init_all+0x18>
 800d856:	691a      	ldr	r2, [r3, #16]
 800d858:	60d8      	str	r0, [r3, #12]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	f101 0101 	add.w	r1, r1, #1
 800d860:	d002      	beq.n	800d868 <ai_layers_init_all+0x18>
 800d862:	b10a      	cbz	r2, 800d868 <ai_layers_init_all+0x18>
 800d864:	4613      	mov	r3, r2
 800d866:	e7f5      	b.n	800d854 <ai_layers_init_all+0x4>
 800d868:	4608      	mov	r0, r1
 800d86a:	4770      	bx	lr

0800d86c <ai_layers_post_init_all>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800d870:	2500      	movs	r5, #0
 800d872:	b16c      	cbz	r4, 800d890 <ai_layers_post_init_all+0x24>
 800d874:	6863      	ldr	r3, [r4, #4]
 800d876:	07db      	lsls	r3, r3, #31
 800d878:	d504      	bpl.n	800d884 <ai_layers_post_init_all+0x18>
 800d87a:	6a23      	ldr	r3, [r4, #32]
 800d87c:	4620      	mov	r0, r4
 800d87e:	b10b      	cbz	r3, 800d884 <ai_layers_post_init_all+0x18>
 800d880:	4798      	blx	r3
 800d882:	3501      	adds	r5, #1
 800d884:	6923      	ldr	r3, [r4, #16]
 800d886:	42a3      	cmp	r3, r4
 800d888:	d002      	beq.n	800d890 <ai_layers_post_init_all+0x24>
 800d88a:	b10b      	cbz	r3, 800d890 <ai_layers_post_init_all+0x24>
 800d88c:	461c      	mov	r4, r3
 800d88e:	e7f0      	b.n	800d872 <ai_layers_post_init_all+0x6>
 800d890:	4628      	mov	r0, r5
 800d892:	bd38      	pop	{r3, r4, r5, pc}

0800d894 <ai_layers_forward_all>:
 800d894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d898:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800d89c:	4604      	mov	r4, r0
 800d89e:	f1b8 0f00 	cmp.w	r8, #0
 800d8a2:	d02b      	beq.n	800d8fc <ai_layers_forward_all+0x68>
 800d8a4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800d8a6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 800d8a8:	b321      	cbz	r1, 800d8f4 <ai_layers_forward_all+0x60>
 800d8aa:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	47c0      	blx	r8
 800d8b0:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800d8b2:	b1fe      	cbz	r6, 800d8f4 <ai_layers_forward_all+0x60>
 800d8b4:	2700      	movs	r7, #0
 800d8b6:	4631      	mov	r1, r6
 800d8b8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800d8ba:	2002      	movs	r0, #2
 800d8bc:	47c0      	blx	r8
 800d8be:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	696b      	ldr	r3, [r5, #20]
 800d8c4:	4798      	blx	r3
 800d8c6:	692e      	ldr	r6, [r5, #16]
 800d8c8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800d8ca:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800d8cc:	42b5      	cmp	r5, r6
 800d8ce:	f04f 0003 	mov.w	r0, #3
 800d8d2:	d007      	beq.n	800d8e4 <ai_layers_forward_all+0x50>
 800d8d4:	47c0      	blx	r8
 800d8d6:	3701      	adds	r7, #1
 800d8d8:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800d8da:	2e00      	cmp	r6, #0
 800d8dc:	d1eb      	bne.n	800d8b6 <ai_layers_forward_all+0x22>
 800d8de:	4638      	mov	r0, r7
 800d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e4:	2003      	movs	r0, #3
 800d8e6:	47c0      	blx	r8
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	3701      	adds	r7, #1
 800d8ec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	2700      	movs	r7, #0
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800d8fe:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800d900:	2d00      	cmp	r5, #0
 800d902:	d0f7      	beq.n	800d8f4 <ai_layers_forward_all+0x60>
 800d904:	4647      	mov	r7, r8
 800d906:	696b      	ldr	r3, [r5, #20]
 800d908:	4628      	mov	r0, r5
 800d90a:	4798      	blx	r3
 800d90c:	462b      	mov	r3, r5
 800d90e:	692d      	ldr	r5, [r5, #16]
 800d910:	429d      	cmp	r5, r3
 800d912:	d004      	beq.n	800d91e <ai_layers_forward_all+0x8a>
 800d914:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800d916:	3701      	adds	r7, #1
 800d918:	2d00      	cmp	r5, #0
 800d91a:	d1f4      	bne.n	800d906 <ai_layers_forward_all+0x72>
 800d91c:	e7df      	b.n	800d8de <ai_layers_forward_all+0x4a>
 800d91e:	2300      	movs	r3, #0
 800d920:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800d922:	3701      	adds	r7, #1
 800d924:	e7db      	b.n	800d8de <ai_layers_forward_all+0x4a>
 800d926:	bf00      	nop

0800d928 <forward_dense>:
 800d928:	6982      	ldr	r2, [r0, #24]
 800d92a:	8813      	ldrh	r3, [r2, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d043      	beq.n	800d9b8 <forward_dense+0x90>
 800d930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d934:	6855      	ldr	r5, [r2, #4]
 800d936:	6869      	ldr	r1, [r5, #4]
 800d938:	b08e      	sub	sp, #56	@ 0x38
 800d93a:	b101      	cbz	r1, 800d93e <forward_dense+0x16>
 800d93c:	6809      	ldr	r1, [r1, #0]
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d069      	beq.n	800da16 <forward_dense+0xee>
 800d942:	692a      	ldr	r2, [r5, #16]
 800d944:	b102      	cbz	r2, 800d948 <forward_dense+0x20>
 800d946:	6812      	ldr	r2, [r2, #0]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	d061      	beq.n	800da10 <forward_dense+0xe8>
 800d94c:	69ec      	ldr	r4, [r5, #28]
 800d94e:	2c00      	cmp	r4, #0
 800d950:	d057      	beq.n	800da02 <forward_dense+0xda>
 800d952:	8b2e      	ldrh	r6, [r5, #24]
 800d954:	6820      	ldr	r0, [r4, #0]
 800d956:	2e01      	cmp	r6, #1
 800d958:	d955      	bls.n	800da06 <forward_dense+0xde>
 800d95a:	6864      	ldr	r4, [r4, #4]
 800d95c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800d960:	68cf      	ldr	r7, [r1, #12]
 800d962:	68d0      	ldr	r0, [r2, #12]
 800d964:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800d968:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800d96c:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800d970:	f8d9 0000 	ldr.w	r0, [r9]
 800d974:	2b03      	cmp	r3, #3
 800d976:	fb06 f807 	mul.w	r8, r6, r7
 800d97a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800d97e:	d044      	beq.n	800da0a <forward_dense+0xe2>
 800d980:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800d982:	b11d      	cbz	r5, 800d98c <forward_dense+0x64>
 800d984:	682d      	ldr	r5, [r5, #0]
 800d986:	b10d      	cbz	r5, 800d98c <forward_dense+0x64>
 800d988:	69ab      	ldr	r3, [r5, #24]
 800d98a:	689d      	ldr	r5, [r3, #8]
 800d98c:	6992      	ldr	r2, [r2, #24]
 800d98e:	698b      	ldr	r3, [r1, #24]
 800d990:	6890      	ldr	r0, [r2, #8]
 800d992:	6899      	ldr	r1, [r3, #8]
 800d994:	b10c      	cbz	r4, 800d99a <forward_dense+0x72>
 800d996:	69a3      	ldr	r3, [r4, #24]
 800d998:	689c      	ldr	r4, [r3, #8]
 800d99a:	4b20      	ldr	r3, [pc, #128]	@ (800da1c <forward_dense+0xf4>)
 800d99c:	459c      	cmp	ip, r3
 800d99e:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800d9a2:	d023      	beq.n	800d9ec <forward_dense+0xc4>
 800d9a4:	4e1e      	ldr	r6, [pc, #120]	@ (800da20 <forward_dense+0xf8>)
 800d9a6:	45b4      	cmp	ip, r6
 800d9a8:	d015      	beq.n	800d9d6 <forward_dense+0xae>
 800d9aa:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800d9ae:	459c      	cmp	ip, r3
 800d9b0:	d004      	beq.n	800d9bc <forward_dense+0x94>
 800d9b2:	b00e      	add	sp, #56	@ 0x38
 800d9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	deff      	udf	#255	@ 0xff
 800d9bc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800d9c0:	a807      	add	r0, sp, #28
 800d9c2:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800d9c6:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800d9ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9cc:	f000 f944 	bl	800dc58 <forward_lite_dense_if32of32wf32>
 800d9d0:	b00e      	add	sp, #56	@ 0x38
 800d9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d6:	e9cd e803 	strd	lr, r8, [sp, #12]
 800d9da:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800d9de:	9500      	str	r5, [sp, #0]
 800d9e0:	464b      	mov	r3, r9
 800d9e2:	f000 fa93 	bl	800df0c <forward_lite_dense_if32of32wf32_lut4>
 800d9e6:	b00e      	add	sp, #56	@ 0x38
 800d9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ec:	e9cd e803 	strd	lr, r8, [sp, #12]
 800d9f0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800d9f4:	9500      	str	r5, [sp, #0]
 800d9f6:	464b      	mov	r3, r9
 800d9f8:	f000 fbb0 	bl	800e15c <forward_lite_dense_if32of32wf32_lut8>
 800d9fc:	b00e      	add	sp, #56	@ 0x38
 800d9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da02:	4620      	mov	r0, r4
 800da04:	e7aa      	b.n	800d95c <forward_dense+0x34>
 800da06:	2400      	movs	r4, #0
 800da08:	e7a8      	b.n	800d95c <forward_dense+0x34>
 800da0a:	2300      	movs	r3, #0
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	deff      	udf	#255	@ 0xff
 800da10:	2300      	movs	r3, #0
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	deff      	udf	#255	@ 0xff
 800da16:	2300      	movs	r3, #0
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	deff      	udf	#255	@ 0xff
 800da1c:	00d01040 	.word	0x00d01040
 800da20:	00f01040 	.word	0x00f01040

0800da24 <forward_relu>:
 800da24:	6982      	ldr	r2, [r0, #24]
 800da26:	8813      	ldrh	r3, [r2, #0]
 800da28:	b323      	cbz	r3, 800da74 <forward_relu+0x50>
 800da2a:	6851      	ldr	r1, [r2, #4]
 800da2c:	684a      	ldr	r2, [r1, #4]
 800da2e:	b102      	cbz	r2, 800da32 <forward_relu+0xe>
 800da30:	6812      	ldr	r2, [r2, #0]
 800da32:	2b01      	cmp	r3, #1
 800da34:	f000 808d 	beq.w	800db52 <forward_relu+0x12e>
 800da38:	b470      	push	{r4, r5, r6}
 800da3a:	6909      	ldr	r1, [r1, #16]
 800da3c:	b101      	cbz	r1, 800da40 <forward_relu+0x1c>
 800da3e:	6809      	ldr	r1, [r1, #0]
 800da40:	69c6      	ldr	r6, [r0, #28]
 800da42:	b1ce      	cbz	r6, 800da78 <forward_relu+0x54>
 800da44:	6873      	ldr	r3, [r6, #4]
 800da46:	6988      	ldr	r0, [r1, #24]
 800da48:	6991      	ldr	r1, [r2, #24]
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d044      	beq.n	800dad8 <forward_relu+0xb4>
 800da4e:	6893      	ldr	r3, [r2, #8]
 800da50:	6880      	ldr	r0, [r0, #8]
 800da52:	6889      	ldr	r1, [r1, #8]
 800da54:	0a1b      	lsrs	r3, r3, #8
 800da56:	d073      	beq.n	800db40 <forward_relu+0x11c>
 800da58:	68d5      	ldr	r5, [r2, #12]
 800da5a:	2201      	movs	r2, #1
 800da5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800da60:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800da64:	429d      	cmp	r5, r3
 800da66:	fb04 f202 	mul.w	r2, r4, r2
 800da6a:	d1f9      	bne.n	800da60 <forward_relu+0x3c>
 800da6c:	68b3      	ldr	r3, [r6, #8]
 800da6e:	bc70      	pop	{r4, r5, r6}
 800da70:	f000 b874 	b.w	800db5c <forward_lite_nl_relu_generic_if32of32_kernel>
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	deff      	udf	#255	@ 0xff
 800da78:	6893      	ldr	r3, [r2, #8]
 800da7a:	6989      	ldr	r1, [r1, #24]
 800da7c:	6990      	ldr	r0, [r2, #24]
 800da7e:	6889      	ldr	r1, [r1, #8]
 800da80:	6884      	ldr	r4, [r0, #8]
 800da82:	0a1b      	lsrs	r3, r3, #8
 800da84:	d05e      	beq.n	800db44 <forward_relu+0x120>
 800da86:	68d5      	ldr	r5, [r2, #12]
 800da88:	2201      	movs	r2, #1
 800da8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800da8e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800da92:	429d      	cmp	r5, r3
 800da94:	fb00 f202 	mul.w	r2, r0, r2
 800da98:	d1f9      	bne.n	800da8e <forward_relu+0x6a>
 800da9a:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800da9e:	3b01      	subs	r3, #1
 800daa0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800daa4:	4294      	cmp	r4, r2
 800daa6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800daaa:	d813      	bhi.n	800dad4 <forward_relu+0xb0>
 800daac:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800db58 <forward_relu+0x134>
 800dab0:	3204      	adds	r2, #4
 800dab2:	3104      	adds	r1, #4
 800dab4:	4613      	mov	r3, r2
 800dab6:	ed72 7a01 	vldmdb	r2!, {s15}
 800daba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac2:	f1a3 0308 	sub.w	r3, r3, #8
 800dac6:	bfb8      	it	lt
 800dac8:	eef0 7a47 	vmovlt.f32	s15, s14
 800dacc:	429c      	cmp	r4, r3
 800dace:	ed61 7a01 	vstmdb	r1!, {s15}
 800dad2:	d9ef      	bls.n	800dab4 <forward_relu+0x90>
 800dad4:	bc70      	pop	{r4, r5, r6}
 800dad6:	4770      	bx	lr
 800dad8:	688c      	ldr	r4, [r1, #8]
 800dada:	6891      	ldr	r1, [r2, #8]
 800dadc:	6880      	ldr	r0, [r0, #8]
 800dade:	0a09      	lsrs	r1, r1, #8
 800dae0:	d032      	beq.n	800db48 <forward_relu+0x124>
 800dae2:	68d5      	ldr	r5, [r2, #12]
 800dae4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800dae8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800daec:	4295      	cmp	r5, r2
 800daee:	fb01 f303 	mul.w	r3, r1, r3
 800daf2:	d1f9      	bne.n	800dae8 <forward_relu+0xc4>
 800daf4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800daf8:	3a01      	subs	r2, #1
 800dafa:	68b1      	ldr	r1, [r6, #8]
 800dafc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db00:	429c      	cmp	r4, r3
 800db02:	ed91 7a00 	vldr	s14, [r1]
 800db06:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800db0a:	d8e3      	bhi.n	800dad4 <forward_relu+0xb0>
 800db0c:	2500      	movs	r5, #0
 800db0e:	3304      	adds	r3, #4
 800db10:	1d02      	adds	r2, r0, #4
 800db12:	ed53 7a01 	vldr	s15, [r3, #-4]
 800db16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db1e:	f1a3 0104 	sub.w	r1, r3, #4
 800db22:	f1a3 0308 	sub.w	r3, r3, #8
 800db26:	d405      	bmi.n	800db34 <forward_relu+0x110>
 800db28:	429c      	cmp	r4, r3
 800db2a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800db2e:	d8d1      	bhi.n	800dad4 <forward_relu+0xb0>
 800db30:	460b      	mov	r3, r1
 800db32:	e7ee      	b.n	800db12 <forward_relu+0xee>
 800db34:	429c      	cmp	r4, r3
 800db36:	ed62 7a01 	vstmdb	r2!, {s15}
 800db3a:	d8cb      	bhi.n	800dad4 <forward_relu+0xb0>
 800db3c:	460b      	mov	r3, r1
 800db3e:	e7e8      	b.n	800db12 <forward_relu+0xee>
 800db40:	2201      	movs	r2, #1
 800db42:	e793      	b.n	800da6c <forward_relu+0x48>
 800db44:	4622      	mov	r2, r4
 800db46:	e7b1      	b.n	800daac <forward_relu+0x88>
 800db48:	68b2      	ldr	r2, [r6, #8]
 800db4a:	4623      	mov	r3, r4
 800db4c:	ed92 7a00 	vldr	s14, [r2]
 800db50:	e7dc      	b.n	800db0c <forward_relu+0xe8>
 800db52:	2300      	movs	r3, #0
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	deff      	udf	#255	@ 0xff
 800db58:	00000000 	.word	0x00000000

0800db5c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800db5c:	edd3 6a02 	vldr	s13, [r3, #8]
 800db60:	ed93 7a00 	vldr	s14, [r3]
 800db64:	ed93 6a01 	vldr	s12, [r3, #4]
 800db68:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800db6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db70:	d42a      	bmi.n	800dbc8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800db72:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800db76:	3a01      	subs	r2, #1
 800db78:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800db7c:	4561      	cmp	r1, ip
 800db7e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800db82:	d85d      	bhi.n	800dc40 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800db84:	1d11      	adds	r1, r2, #4
 800db86:	f10c 0304 	add.w	r3, ip, #4
 800db8a:	4408      	add	r0, r1
 800db8c:	ebac 0202 	sub.w	r2, ip, r2
 800db90:	e00c      	b.n	800dbac <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800db92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800db9e:	db01      	blt.n	800dba4 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800dba0:	ee65 7a86 	vmul.f32	s15, s11, s12
 800dba4:	4293      	cmp	r3, r2
 800dba6:	ed60 7a01 	vstmdb	r0!, {s15}
 800dbaa:	d00c      	beq.n	800dbc6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800dbac:	ed73 7a01 	vldmdb	r3!, {s15}
 800dbb0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800dbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb8:	daeb      	bge.n	800db92 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800dbba:	eef0 7a66 	vmov.f32	s15, s13
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	ed60 7a01 	vstmdb	r0!, {s15}
 800dbc4:	d1f2      	bne.n	800dbac <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800dbc6:	4770      	bx	lr
 800dbc8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800dbcc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800dbd0:	3a01      	subs	r2, #1
 800dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800dbda:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800dbde:	d017      	beq.n	800dc10 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800dbe0:	4561      	cmp	r1, ip
 800dbe2:	d82d      	bhi.n	800dc40 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800dbe4:	1d11      	adds	r1, r2, #4
 800dbe6:	f10c 0304 	add.w	r3, ip, #4
 800dbea:	4401      	add	r1, r0
 800dbec:	ebac 0202 	sub.w	r2, ip, r2
 800dbf0:	ed73 7a01 	vldmdb	r3!, {s15}
 800dbf4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800dbf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc00:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dc04:	d81d      	bhi.n	800dc42 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800dc06:	4293      	cmp	r3, r2
 800dc08:	ed61 6a01 	vstmdb	r1!, {s13}
 800dc0c:	d1f0      	bne.n	800dbf0 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800dc0e:	4770      	bx	lr
 800dc10:	4561      	cmp	r1, ip
 800dc12:	d815      	bhi.n	800dc40 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800dc14:	1d11      	adds	r1, r2, #4
 800dc16:	b500      	push	{lr}
 800dc18:	f10c 0304 	add.w	r3, ip, #4
 800dc1c:	f04f 0e00 	mov.w	lr, #0
 800dc20:	4401      	add	r1, r0
 800dc22:	ebac 0202 	sub.w	r2, ip, r2
 800dc26:	ed73 7a01 	vldmdb	r3!, {s15}
 800dc2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc32:	d40b      	bmi.n	800dc4c <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800dc34:	4293      	cmp	r3, r2
 800dc36:	f841 ed04 	str.w	lr, [r1, #-4]!
 800dc3a:	d1f4      	bne.n	800dc26 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800dc3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	4293      	cmp	r3, r2
 800dc44:	ed61 7a01 	vstmdb	r1!, {s15}
 800dc48:	d1d2      	bne.n	800dbf0 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800dc4a:	4770      	bx	lr
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	ed61 7a01 	vstmdb	r1!, {s15}
 800dc52:	d1e8      	bne.n	800dc26 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800dc54:	e7f2      	b.n	800dc3c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800dc56:	bf00      	nop

0800dc58 <forward_lite_dense_if32of32wf32>:
 800dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5c:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800dc60:	6801      	ldr	r1, [r0, #0]
 800dc62:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800dc66:	fb02 f303 	mul.w	r3, r2, r3
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dc70:	4299      	cmp	r1, r3
 800dc72:	9100      	str	r1, [sp, #0]
 800dc74:	9301      	str	r3, [sp, #4]
 800dc76:	f080 811e 	bcs.w	800deb6 <forward_lite_dense_if32of32wf32+0x25e>
 800dc7a:	6904      	ldr	r4, [r0, #16]
 800dc7c:	4607      	mov	r7, r0
 800dc7e:	0096      	lsls	r6, r2, #2
 800dc80:	9b00      	ldr	r3, [sp, #0]
 800dc82:	68bd      	ldr	r5, [r7, #8]
 800dc84:	eb03 0e06 	add.w	lr, r3, r6
 800dc88:	459e      	cmp	lr, r3
 800dc8a:	461e      	mov	r6, r3
 800dc8c:	f240 8104 	bls.w	800de98 <forward_lite_dense_if32of32wf32+0x240>
 800dc90:	f1a4 0c10 	sub.w	ip, r4, #16
 800dc94:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800dc98:	f10c 0c01 	add.w	ip, ip, #1
 800dc9c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800dca0:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800dca4:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800dca8:	2c0f      	cmp	r4, #15
 800dcaa:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800df08 <forward_lite_dense_if32of32wf32+0x2b0>
 800dcae:	f240 8105 	bls.w	800debc <forward_lite_dense_if32of32wf32+0x264>
 800dcb2:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 800dcb6:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 800dcba:	4621      	mov	r1, r4
 800dcbc:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800dcc0:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800dcc4:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800dcc8:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800dccc:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800dcd0:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 800dcd4:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800dcd8:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 800dcdc:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800dce0:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 800dce4:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800dce8:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800dcec:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800dcf0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dcf4:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800dcf8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dcfc:	3910      	subs	r1, #16
 800dcfe:	290f      	cmp	r1, #15
 800dd00:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800dd04:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800dd08:	eee5 7a86 	vfma.f32	s15, s11, s12
 800dd0c:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 800dd10:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800dd14:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800dd18:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 800dd1c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800dd20:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800dd24:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800dd28:	eee5 7a25 	vfma.f32	s15, s10, s11
 800dd2c:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 800dd30:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800dd34:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dd38:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 800dd3c:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800dd40:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dd44:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800dd48:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800dd4c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800dd50:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800dd54:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800dd58:	eee5 7a25 	vfma.f32	s15, s10, s11
 800dd5c:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800dd60:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800dd64:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dd68:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 800dd6c:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800dd70:	eee1 7a21 	vfma.f32	s15, s2, s3
 800dd74:	eee2 7a22 	vfma.f32	s15, s4, s5
 800dd78:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dd7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800dd80:	eee5 7a25 	vfma.f32	s15, s10, s11
 800dd84:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dd88:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd8c:	d896      	bhi.n	800dcbc <forward_lite_dense_if32of32wf32+0x64>
 800dd8e:	eb05 020b 	add.w	r2, r5, fp
 800dd92:	f004 010f 	and.w	r1, r4, #15
 800dd96:	4663      	mov	r3, ip
 800dd98:	2903      	cmp	r1, #3
 800dd9a:	d95f      	bls.n	800de5c <forward_lite_dense_if32of32wf32+0x204>
 800dd9c:	edd2 6a01 	vldr	s13, [r2, #4]
 800dda0:	edd3 7a01 	vldr	s15, [r3, #4]
 800dda4:	ed93 6a00 	vldr	s12, [r3]
 800dda8:	ed93 5a02 	vldr	s10, [r3, #8]
 800ddac:	edd2 5a02 	vldr	s11, [r2, #8]
 800ddb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ddb4:	edd2 6a00 	vldr	s13, [r2]
 800ddb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ddbc:	1f08      	subs	r0, r1, #4
 800ddbe:	2803      	cmp	r0, #3
 800ddc0:	ed93 6a03 	vldr	s12, [r3, #12]
 800ddc4:	edd2 6a03 	vldr	s13, [r2, #12]
 800ddc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ddd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ddd4:	eeb0 7a67 	vmov.f32	s14, s15
 800ddd8:	d938      	bls.n	800de4c <forward_lite_dense_if32of32wf32+0x1f4>
 800ddda:	edd2 6a05 	vldr	s13, [r2, #20]
 800ddde:	edd3 7a05 	vldr	s15, [r3, #20]
 800dde2:	ed93 6a04 	vldr	s12, [r3, #16]
 800dde6:	ed93 5a06 	vldr	s10, [r3, #24]
 800ddea:	edd2 5a06 	vldr	s11, [r2, #24]
 800ddee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ddf2:	edd2 6a04 	vldr	s13, [r2, #16]
 800ddf6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ddfa:	f1a1 0a08 	sub.w	sl, r1, #8
 800ddfe:	f1ba 0f03 	cmp.w	sl, #3
 800de02:	ed93 6a07 	vldr	s12, [r3, #28]
 800de06:	edd2 6a07 	vldr	s13, [r2, #28]
 800de0a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800de0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800de12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de16:	d919      	bls.n	800de4c <forward_lite_dense_if32of32wf32+0x1f4>
 800de18:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800de1c:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 800de20:	ed92 6a08 	vldr	s12, [r2, #32]
 800de24:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800de28:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800de2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800de30:	edd3 6a08 	vldr	s13, [r3, #32]
 800de34:	eee6 7a26 	vfma.f32	s15, s12, s13
 800de38:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 800de3c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800de40:	eee5 7a25 	vfma.f32	s15, s10, s11
 800de44:	eee6 7a26 	vfma.f32	s15, s12, s13
 800de48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de4c:	0880      	lsrs	r0, r0, #2
 800de4e:	3001      	adds	r0, #1
 800de50:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800de54:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800de58:	f001 0103 	and.w	r1, r1, #3
 800de5c:	b1a9      	cbz	r1, 800de8a <forward_lite_dense_if32of32wf32+0x232>
 800de5e:	edd3 6a00 	vldr	s13, [r3]
 800de62:	edd2 7a00 	vldr	s15, [r2]
 800de66:	3901      	subs	r1, #1
 800de68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800de6c:	d00d      	beq.n	800de8a <forward_lite_dense_if32of32wf32+0x232>
 800de6e:	edd3 6a01 	vldr	s13, [r3, #4]
 800de72:	edd2 7a01 	vldr	s15, [r2, #4]
 800de76:	2901      	cmp	r1, #1
 800de78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800de7c:	d005      	beq.n	800de8a <forward_lite_dense_if32of32wf32+0x232>
 800de7e:	edd2 6a02 	vldr	s13, [r2, #8]
 800de82:	edd3 7a02 	vldr	s15, [r3, #8]
 800de86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800de8a:	444d      	add	r5, r9
 800de8c:	eca6 7a01 	vstmia	r6!, {s14}
 800de90:	45b6      	cmp	lr, r6
 800de92:	f63f af09 	bhi.w	800dca8 <forward_lite_dense_if32of32wf32+0x50>
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	b99b      	cbnz	r3, 800dec4 <forward_lite_dense_if32of32wf32+0x26c>
 800de9c:	9b00      	ldr	r3, [sp, #0]
 800de9e:	9901      	ldr	r1, [sp, #4]
 800dea0:	693c      	ldr	r4, [r7, #16]
 800dea2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800dea6:	4299      	cmp	r1, r3
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800deae:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800deb2:	f63f aee5 	bhi.w	800dc80 <forward_lite_dense_if32of32wf32+0x28>
 800deb6:	b003      	add	sp, #12
 800deb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800debc:	4621      	mov	r1, r4
 800debe:	462a      	mov	r2, r5
 800dec0:	4643      	mov	r3, r8
 800dec2:	e769      	b.n	800dd98 <forward_lite_dense_if32of32wf32+0x140>
 800dec4:	2a00      	cmp	r2, #0
 800dec6:	d0e9      	beq.n	800de9c <forward_lite_dense_if32of32wf32+0x244>
 800dec8:	9a00      	ldr	r2, [sp, #0]
 800deca:	ed93 7a00 	vldr	s14, [r3]
 800dece:	edd2 7a00 	vldr	s15, [r2]
 800ded2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ded6:	4613      	mov	r3, r2
 800ded8:	edc2 7a00 	vstr	s15, [r2]
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	2a01      	cmp	r2, #1
 800dee0:	d9dc      	bls.n	800de9c <forward_lite_dense_if32of32wf32+0x244>
 800dee2:	1d19      	adds	r1, r3, #4
 800dee4:	2301      	movs	r3, #1
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	ed91 7a00 	vldr	s14, [r1]
 800deec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800def0:	edd2 7a00 	vldr	s15, [r2]
 800def4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800def8:	3301      	adds	r3, #1
 800defa:	ece1 7a01 	vstmia	r1!, {s15}
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	429a      	cmp	r2, r3
 800df02:	d8f0      	bhi.n	800dee6 <forward_lite_dense_if32of32wf32+0x28e>
 800df04:	e7ca      	b.n	800de9c <forward_lite_dense_if32of32wf32+0x244>
 800df06:	bf00      	nop
 800df08:	00000000 	.word	0x00000000

0800df0c <forward_lite_dense_if32of32wf32_lut4>:
 800df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	b08d      	sub	sp, #52	@ 0x34
 800df12:	4605      	mov	r5, r0
 800df14:	9005      	str	r0, [sp, #20]
 800df16:	920a      	str	r2, [sp, #40]	@ 0x28
 800df18:	4618      	mov	r0, r3
 800df1a:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800df1e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800df20:	fb02 f303 	mul.w	r3, r2, r3
 800df24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800df28:	460c      	mov	r4, r1
 800df2a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800df2c:	9308      	str	r3, [sp, #32]
 800df2e:	b126      	cbz	r6, 800df3a <forward_lite_dense_if32of32wf32_lut4+0x2e>
 800df30:	2240      	movs	r2, #64	@ 0x40
 800df32:	4631      	mov	r1, r6
 800df34:	f000 fa40 	bl	800e3b8 <st_int8_copy>
 800df38:	4630      	mov	r0, r6
 800df3a:	9b05      	ldr	r3, [sp, #20]
 800df3c:	9a08      	ldr	r2, [sp, #32]
 800df3e:	4293      	cmp	r3, r2
 800df40:	f080 80f5 	bcs.w	800e12e <forward_lite_dense_if32of32wf32_lut4+0x222>
 800df44:	08eb      	lsrs	r3, r5, #3
 800df46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	f005 0101 	and.w	r1, r5, #1
 800df4e:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	0092      	lsls	r2, r2, #2
 800df56:	f025 0801 	bic.w	r8, r5, #1
 800df5a:	9102      	str	r1, [sp, #8]
 800df5c:	9304      	str	r3, [sp, #16]
 800df5e:	00a9      	lsls	r1, r5, #2
 800df60:	9b05      	ldr	r3, [sp, #20]
 800df62:	9207      	str	r2, [sp, #28]
 800df64:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800df68:	9109      	str	r1, [sp, #36]	@ 0x24
 800df6a:	f104 0b20 	add.w	fp, r4, #32
 800df6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800df70:	9a07      	ldr	r2, [sp, #28]
 800df72:	eb03 0902 	add.w	r9, r3, r2
 800df76:	4599      	cmp	r9, r3
 800df78:	f1ab 0220 	sub.w	r2, fp, #32
 800df7c:	9206      	str	r2, [sp, #24]
 800df7e:	f240 80d9 	bls.w	800e134 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800df82:	469e      	mov	lr, r3
 800df84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df86:	f108 33ff 	add.w	r3, r8, #4294967295
 800df8a:	9303      	str	r3, [sp, #12]
 800df8c:	9b01      	ldr	r3, [sp, #4]
 800df8e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800e158 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800df92:	2b00      	cmp	r3, #0
 800df94:	f000 80b2 	beq.w	800e0fc <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800df98:	9b04      	ldr	r3, [sp, #16]
 800df9a:	18d5      	adds	r5, r2, r3
 800df9c:	465b      	mov	r3, fp
 800df9e:	7814      	ldrb	r4, [r2, #0]
 800dfa0:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800dfa4:	7851      	ldrb	r1, [r2, #1]
 800dfa6:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 800dfaa:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800dfae:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800dfb2:	ed13 5a04 	vldr	s10, [r3, #-16]
 800dfb6:	ed53 5a03 	vldr	s11, [r3, #-12]
 800dfba:	ed13 6a02 	vldr	s12, [r3, #-8]
 800dfbe:	ed53 6a01 	vldr	s13, [r3, #-4]
 800dfc2:	f004 060f 	and.w	r6, r4, #15
 800dfc6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800dfca:	edd6 7a00 	vldr	s15, [r6]
 800dfce:	0924      	lsrs	r4, r4, #4
 800dfd0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800dfd4:	ed94 3a00 	vldr	s6, [r4]
 800dfd8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800dfdc:	090c      	lsrs	r4, r1, #4
 800dfde:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dfe2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800dfe6:	f001 010f 	and.w	r1, r1, #15
 800dfea:	edd4 3a00 	vldr	s7, [r4]
 800dfee:	7894      	ldrb	r4, [r2, #2]
 800dff0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800dff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dff8:	0926      	lsrs	r6, r4, #4
 800dffa:	ed91 4a00 	vldr	s8, [r1]
 800dffe:	78d1      	ldrb	r1, [r2, #3]
 800e000:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e004:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800e008:	f004 040f 	and.w	r4, r4, #15
 800e00c:	edd6 4a00 	vldr	s9, [r6]
 800e010:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e014:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800e018:	3204      	adds	r2, #4
 800e01a:	ed94 5a00 	vldr	s10, [r4]
 800e01e:	090c      	lsrs	r4, r1, #4
 800e020:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e024:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800e028:	f001 010f 	and.w	r1, r1, #15
 800e02c:	edd4 5a00 	vldr	s11, [r4]
 800e030:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e034:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e038:	42aa      	cmp	r2, r5
 800e03a:	ed91 6a00 	vldr	s12, [r1]
 800e03e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e042:	f103 0320 	add.w	r3, r3, #32
 800e046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e04a:	d1a8      	bne.n	800df9e <forward_lite_dense_if32of32wf32_lut4+0x92>
 800e04c:	4656      	mov	r6, sl
 800e04e:	4546      	cmp	r6, r8
 800e050:	d258      	bcs.n	800e104 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 800e052:	9b03      	ldr	r3, [sp, #12]
 800e054:	1b9c      	subs	r4, r3, r6
 800e056:	08e7      	lsrs	r7, r4, #3
 800e058:	f106 0208 	add.w	r2, r6, #8
 800e05c:	1e69      	subs	r1, r5, #1
 800e05e:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800e062:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e066:	ed52 5a01 	vldr	s11, [r2, #-4]
 800e06a:	ed52 6a02 	vldr	s13, [r2, #-8]
 800e06e:	f003 0c0f 	and.w	ip, r3, #15
 800e072:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e076:	eddc 7a00 	vldr	s15, [ip]
 800e07a:	091b      	lsrs	r3, r3, #4
 800e07c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e080:	ed93 6a00 	vldr	s12, [r3]
 800e084:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e088:	42a1      	cmp	r1, r4
 800e08a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e08e:	f102 0208 	add.w	r2, r2, #8
 800e092:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e096:	d1e4      	bne.n	800e062 <forward_lite_dense_if32of32wf32_lut4+0x156>
 800e098:	3701      	adds	r7, #1
 800e09a:	19ea      	adds	r2, r5, r7
 800e09c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800e0a0:	9b02      	ldr	r3, [sp, #8]
 800e0a2:	b30b      	cbz	r3, 800e0e8 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 800e0a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e0a8:	edd6 7a00 	vldr	s15, [r6]
 800e0ac:	091b      	lsrs	r3, r3, #4
 800e0ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e0b2:	edd3 6a00 	vldr	s13, [r3]
 800e0b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e0ba:	ecae 7a01 	vstmia	lr!, {s14}
 800e0be:	45f1      	cmp	r9, lr
 800e0c0:	f63f af64 	bhi.w	800df8c <forward_lite_dense_if32of32wf32_lut4+0x80>
 800e0c4:	9b05      	ldr	r3, [sp, #20]
 800e0c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e0c8:	1899      	adds	r1, r3, r2
 800e0ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e0cc:	b9e3      	cbnz	r3, 800e108 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800e0ce:	9b08      	ldr	r3, [sp, #32]
 800e0d0:	428b      	cmp	r3, r1
 800e0d2:	d92c      	bls.n	800e12e <forward_lite_dense_if32of32wf32_lut4+0x222>
 800e0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0d6:	4498      	add	r8, r3
 800e0d8:	449a      	add	sl, r3
 800e0da:	449b      	add	fp, r3
 800e0dc:	9b05      	ldr	r3, [sp, #20]
 800e0de:	4599      	cmp	r9, r3
 800e0e0:	d92a      	bls.n	800e138 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800e0e2:	9105      	str	r1, [sp, #20]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	e743      	b.n	800df70 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800e0e8:	ecae 7a01 	vstmia	lr!, {s14}
 800e0ec:	45f1      	cmp	r9, lr
 800e0ee:	d9e9      	bls.n	800e0c4 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800e0f0:	9b01      	ldr	r3, [sp, #4]
 800e0f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e158 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f47f af4e 	bne.w	800df98 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 800e0fc:	9e06      	ldr	r6, [sp, #24]
 800e0fe:	4546      	cmp	r6, r8
 800e100:	4615      	mov	r5, r2
 800e102:	d3a6      	bcc.n	800e052 <forward_lite_dense_if32of32wf32_lut4+0x146>
 800e104:	462a      	mov	r2, r5
 800e106:	e7cb      	b.n	800e0a0 <forward_lite_dense_if32of32wf32_lut4+0x194>
 800e108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0df      	beq.n	800e0ce <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800e10e:	9b07      	ldr	r3, [sp, #28]
 800e110:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e112:	1acb      	subs	r3, r1, r3
 800e114:	edd3 7a00 	vldr	s15, [r3]
 800e118:	ecb2 7a01 	vldmia	r2!, {s14}
 800e11c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e120:	ece3 7a01 	vstmia	r3!, {s15}
 800e124:	428b      	cmp	r3, r1
 800e126:	d1f5      	bne.n	800e114 <forward_lite_dense_if32of32wf32_lut4+0x208>
 800e128:	9b08      	ldr	r3, [sp, #32]
 800e12a:	428b      	cmp	r3, r1
 800e12c:	d8d2      	bhi.n	800e0d4 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800e12e:	b00d      	add	sp, #52	@ 0x34
 800e130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e134:	4619      	mov	r1, r3
 800e136:	e7c8      	b.n	800e0ca <forward_lite_dense_if32of32wf32_lut4+0x1be>
 800e138:	9b07      	ldr	r3, [sp, #28]
 800e13a:	1acb      	subs	r3, r1, r3
 800e13c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800e13e:	461a      	mov	r2, r3
 800e140:	ed92 7a00 	vldr	s14, [r2]
 800e144:	ecf0 7a01 	vldmia	r0!, {s15}
 800e148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e14c:	ece2 7a01 	vstmia	r2!, {s15}
 800e150:	428a      	cmp	r2, r1
 800e152:	d1f5      	bne.n	800e140 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800e154:	e7f2      	b.n	800e13c <forward_lite_dense_if32of32wf32_lut4+0x230>
 800e156:	bf00      	nop
 800e158:	00000000 	.word	0x00000000

0800e15c <forward_lite_dense_if32of32wf32_lut8>:
 800e15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e160:	b087      	sub	sp, #28
 800e162:	460f      	mov	r7, r1
 800e164:	9204      	str	r2, [sp, #16]
 800e166:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 800e16a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e16c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800e16e:	fb01 f202 	mul.w	r2, r1, r2
 800e172:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e176:	4605      	mov	r5, r0
 800e178:	9202      	str	r2, [sp, #8]
 800e17a:	b136      	cbz	r6, 800e18a <forward_lite_dense_if32of32wf32_lut8+0x2e>
 800e17c:	4618      	mov	r0, r3
 800e17e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e182:	4631      	mov	r1, r6
 800e184:	f000 f918 	bl	800e3b8 <st_int8_copy>
 800e188:	4633      	mov	r3, r6
 800e18a:	9a02      	ldr	r2, [sp, #8]
 800e18c:	4295      	cmp	r5, r2
 800e18e:	f080 80f9 	bcs.w	800e384 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800e192:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e194:	0092      	lsls	r2, r2, #2
 800e196:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800e19a:	9201      	str	r2, [sp, #4]
 800e19c:	9205      	str	r2, [sp, #20]
 800e19e:	462a      	mov	r2, r5
 800e1a0:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800e1a4:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800e1a8:	464d      	mov	r5, r9
 800e1aa:	4691      	mov	r9, r2
 800e1ac:	9a01      	ldr	r2, [sp, #4]
 800e1ae:	eb09 0e02 	add.w	lr, r9, r2
 800e1b2:	00a1      	lsls	r1, r4, #2
 800e1b4:	3720      	adds	r7, #32
 800e1b6:	45ce      	cmp	lr, r9
 800e1b8:	f004 0007 	and.w	r0, r4, #7
 800e1bc:	9103      	str	r1, [sp, #12]
 800e1be:	f1a7 0b20 	sub.w	fp, r7, #32
 800e1c2:	f240 80c8 	bls.w	800e356 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800e1c6:	9a04      	ldr	r2, [sp, #16]
 800e1c8:	46cc      	mov	ip, r9
 800e1ca:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800e3b4 <forward_lite_dense_if32of32wf32_lut8+0x258>
 800e1ce:	2d00      	cmp	r5, #0
 800e1d0:	f000 80dd 	beq.w	800e38e <forward_lite_dense_if32of32wf32_lut8+0x232>
 800e1d4:	eb02 060a 	add.w	r6, r2, sl
 800e1d8:	4639      	mov	r1, r7
 800e1da:	7854      	ldrb	r4, [r2, #1]
 800e1dc:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800e1e0:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 800e1e4:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 800e1e8:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 800e1ec:	ed11 5a04 	vldr	s10, [r1, #-16]
 800e1f0:	ed51 5a03 	vldr	s11, [r1, #-12]
 800e1f4:	ed11 6a02 	vldr	s12, [r1, #-8]
 800e1f8:	ed51 6a01 	vldr	s13, [r1, #-4]
 800e1fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e200:	edd4 7a00 	vldr	s15, [r4]
 800e204:	7814      	ldrb	r4, [r2, #0]
 800e206:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e20a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800e20e:	ed94 3a00 	vldr	s6, [r4]
 800e212:	7894      	ldrb	r4, [r2, #2]
 800e214:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e218:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e21c:	3208      	adds	r2, #8
 800e21e:	edd4 3a00 	vldr	s7, [r4]
 800e222:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800e226:	eee3 7a84 	vfma.f32	s15, s7, s8
 800e22a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e22e:	3120      	adds	r1, #32
 800e230:	ed94 4a00 	vldr	s8, [r4]
 800e234:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 800e238:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e23c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e240:	edd4 4a00 	vldr	s9, [r4]
 800e244:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 800e248:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e24c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e250:	ed94 5a00 	vldr	s10, [r4]
 800e254:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 800e258:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e25c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e260:	edd4 5a00 	vldr	s11, [r4]
 800e264:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 800e268:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e26c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e270:	42b2      	cmp	r2, r6
 800e272:	ed94 6a00 	vldr	s12, [r4]
 800e276:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e27a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e27e:	d1ac      	bne.n	800e1da <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800e280:	4642      	mov	r2, r8
 800e282:	2800      	cmp	r0, #0
 800e284:	f000 8081 	beq.w	800e38a <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800e288:	7831      	ldrb	r1, [r6, #0]
 800e28a:	edd2 7a00 	vldr	s15, [r2]
 800e28e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e292:	edd1 6a00 	vldr	s13, [r1]
 800e296:	2801      	cmp	r0, #1
 800e298:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e29c:	d03f      	beq.n	800e31e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800e29e:	7871      	ldrb	r1, [r6, #1]
 800e2a0:	edd2 7a01 	vldr	s15, [r2, #4]
 800e2a4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e2a8:	edd1 6a00 	vldr	s13, [r1]
 800e2ac:	2802      	cmp	r0, #2
 800e2ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e2b2:	d034      	beq.n	800e31e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800e2b4:	78b1      	ldrb	r1, [r6, #2]
 800e2b6:	edd2 7a02 	vldr	s15, [r2, #8]
 800e2ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e2be:	edd1 6a00 	vldr	s13, [r1]
 800e2c2:	2803      	cmp	r0, #3
 800e2c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e2c8:	d029      	beq.n	800e31e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800e2ca:	78f1      	ldrb	r1, [r6, #3]
 800e2cc:	edd2 6a03 	vldr	s13, [r2, #12]
 800e2d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e2d4:	edd1 7a00 	vldr	s15, [r1]
 800e2d8:	2804      	cmp	r0, #4
 800e2da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e2de:	d01e      	beq.n	800e31e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800e2e0:	7931      	ldrb	r1, [r6, #4]
 800e2e2:	edd2 6a04 	vldr	s13, [r2, #16]
 800e2e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e2ea:	edd1 7a00 	vldr	s15, [r1]
 800e2ee:	2805      	cmp	r0, #5
 800e2f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e2f4:	d013      	beq.n	800e31e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800e2f6:	7971      	ldrb	r1, [r6, #5]
 800e2f8:	edd2 6a05 	vldr	s13, [r2, #20]
 800e2fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e300:	edd1 7a00 	vldr	s15, [r1]
 800e304:	2806      	cmp	r0, #6
 800e306:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e30a:	d008      	beq.n	800e31e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800e30c:	edd2 7a06 	vldr	s15, [r2, #24]
 800e310:	79b2      	ldrb	r2, [r6, #6]
 800e312:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e316:	edd2 6a00 	vldr	s13, [r2]
 800e31a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e31e:	1832      	adds	r2, r6, r0
 800e320:	ecac 7a01 	vstmia	ip!, {s14}
 800e324:	45e6      	cmp	lr, ip
 800e326:	f63f af50 	bhi.w	800e1ca <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800e32a:	9a05      	ldr	r2, [sp, #20]
 800e32c:	eb09 0402 	add.w	r4, r9, r2
 800e330:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e332:	b9a2      	cbnz	r2, 800e35e <forward_lite_dense_if32of32wf32_lut8+0x202>
 800e334:	9a02      	ldr	r2, [sp, #8]
 800e336:	42a2      	cmp	r2, r4
 800e338:	d924      	bls.n	800e384 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800e33a:	9a03      	ldr	r2, [sp, #12]
 800e33c:	45ce      	cmp	lr, r9
 800e33e:	4490      	add	r8, r2
 800e340:	4417      	add	r7, r2
 800e342:	d927      	bls.n	800e394 <forward_lite_dense_if32of32wf32_lut8+0x238>
 800e344:	9a01      	ldr	r2, [sp, #4]
 800e346:	46a1      	mov	r9, r4
 800e348:	eb09 0e02 	add.w	lr, r9, r2
 800e34c:	45ce      	cmp	lr, r9
 800e34e:	f1a7 0b20 	sub.w	fp, r7, #32
 800e352:	f63f af38 	bhi.w	800e1c6 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 800e356:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e358:	464c      	mov	r4, r9
 800e35a:	2a00      	cmp	r2, #0
 800e35c:	d0ea      	beq.n	800e334 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800e35e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e360:	2a00      	cmp	r2, #0
 800e362:	d0e7      	beq.n	800e334 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800e364:	9a01      	ldr	r2, [sp, #4]
 800e366:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e368:	1aa2      	subs	r2, r4, r2
 800e36a:	edd2 7a00 	vldr	s15, [r2]
 800e36e:	ecb1 7a01 	vldmia	r1!, {s14}
 800e372:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e376:	ece2 7a01 	vstmia	r2!, {s15}
 800e37a:	4294      	cmp	r4, r2
 800e37c:	d1f5      	bne.n	800e36a <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800e37e:	9a02      	ldr	r2, [sp, #8]
 800e380:	42a2      	cmp	r2, r4
 800e382:	d8da      	bhi.n	800e33a <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800e384:	b007      	add	sp, #28
 800e386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e38a:	4632      	mov	r2, r6
 800e38c:	e7c8      	b.n	800e320 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800e38e:	4616      	mov	r6, r2
 800e390:	465a      	mov	r2, fp
 800e392:	e776      	b.n	800e282 <forward_lite_dense_if32of32wf32_lut8+0x126>
 800e394:	9b01      	ldr	r3, [sp, #4]
 800e396:	1ae3      	subs	r3, r4, r3
 800e398:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e39a:	461a      	mov	r2, r3
 800e39c:	ed92 7a00 	vldr	s14, [r2]
 800e3a0:	ecf1 7a01 	vldmia	r1!, {s15}
 800e3a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e3a8:	ece2 7a01 	vstmia	r2!, {s15}
 800e3ac:	42a2      	cmp	r2, r4
 800e3ae:	d1f5      	bne.n	800e39c <forward_lite_dense_if32of32wf32_lut8+0x240>
 800e3b0:	e7f2      	b.n	800e398 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800e3b2:	bf00      	nop
 800e3b4:	00000000 	.word	0x00000000

0800e3b8 <st_int8_copy>:
 800e3b8:	4288      	cmp	r0, r1
 800e3ba:	d022      	beq.n	800e402 <st_int8_copy+0x4a>
 800e3bc:	b30a      	cbz	r2, 800e402 <st_int8_copy+0x4a>
 800e3be:	4288      	cmp	r0, r1
 800e3c0:	d312      	bcc.n	800e3e8 <st_int8_copy+0x30>
 800e3c2:	2a03      	cmp	r2, #3
 800e3c4:	d81e      	bhi.n	800e404 <st_int8_copy+0x4c>
 800e3c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e3ca:	f801 3b01 	strb.w	r3, [r1], #1
 800e3ce:	2a01      	cmp	r2, #1
 800e3d0:	d017      	beq.n	800e402 <st_int8_copy+0x4a>
 800e3d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e3d6:	f801 3b01 	strb.w	r3, [r1], #1
 800e3da:	2a02      	cmp	r2, #2
 800e3dc:	d011      	beq.n	800e402 <st_int8_copy+0x4a>
 800e3de:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e3e2:	f801 3b01 	strb.w	r3, [r1], #1
 800e3e6:	4770      	bx	lr
 800e3e8:	1883      	adds	r3, r0, r2
 800e3ea:	4299      	cmp	r1, r3
 800e3ec:	d2e9      	bcs.n	800e3c2 <st_int8_copy+0xa>
 800e3ee:	4298      	cmp	r0, r3
 800e3f0:	440a      	add	r2, r1
 800e3f2:	d206      	bcs.n	800e402 <st_int8_copy+0x4a>
 800e3f4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800e3f8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800e3fc:	4298      	cmp	r0, r3
 800e3fe:	d1f9      	bne.n	800e3f4 <st_int8_copy+0x3c>
 800e400:	4770      	bx	lr
 800e402:	4770      	bx	lr
 800e404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e408:	f001 0403 	and.w	r4, r1, #3
 800e40c:	f1c4 0304 	rsb	r3, r4, #4
 800e410:	f000 0e03 	and.w	lr, r0, #3
 800e414:	eba2 0c03 	sub.w	ip, r2, r3
 800e418:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e41c:	f801 3b01 	strb.w	r3, [r1], #1
 800e420:	2c03      	cmp	r4, #3
 800e422:	f1c4 0202 	rsb	r2, r4, #2
 800e426:	d00e      	beq.n	800e446 <st_int8_copy+0x8e>
 800e428:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e42c:	f801 3b01 	strb.w	r3, [r1], #1
 800e430:	2a00      	cmp	r2, #0
 800e432:	dd08      	ble.n	800e446 <st_int8_copy+0x8e>
 800e434:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e438:	f801 3b01 	strb.w	r3, [r1], #1
 800e43c:	b91c      	cbnz	r4, 800e446 <st_int8_copy+0x8e>
 800e43e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e442:	f801 3b01 	strb.w	r3, [r1], #1
 800e446:	4574      	cmp	r4, lr
 800e448:	d02b      	beq.n	800e4a2 <st_int8_copy+0xea>
 800e44a:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800e44e:	1e5a      	subs	r2, r3, #1
 800e450:	b153      	cbz	r3, 800e468 <st_int8_copy+0xb0>
 800e452:	f850 3b04 	ldr.w	r3, [r0], #4
 800e456:	f850 4b04 	ldr.w	r4, [r0], #4
 800e45a:	f850 5b04 	ldr.w	r5, [r0], #4
 800e45e:	f850 6b04 	ldr.w	r6, [r0], #4
 800e462:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800e464:	3a01      	subs	r2, #1
 800e466:	d2f4      	bcs.n	800e452 <st_int8_copy+0x9a>
 800e468:	f01c 0f08 	tst.w	ip, #8
 800e46c:	d004      	beq.n	800e478 <st_int8_copy+0xc0>
 800e46e:	f850 3b04 	ldr.w	r3, [r0], #4
 800e472:	f850 4b04 	ldr.w	r4, [r0], #4
 800e476:	c118      	stmia	r1!, {r3, r4}
 800e478:	f01c 0f04 	tst.w	ip, #4
 800e47c:	d003      	beq.n	800e486 <st_int8_copy+0xce>
 800e47e:	f850 3b04 	ldr.w	r3, [r0], #4
 800e482:	f841 3b04 	str.w	r3, [r1], #4
 800e486:	f01c 0f02 	tst.w	ip, #2
 800e48a:	d003      	beq.n	800e494 <st_int8_copy+0xdc>
 800e48c:	f830 3b02 	ldrh.w	r3, [r0], #2
 800e490:	f821 3b02 	strh.w	r3, [r1], #2
 800e494:	f01c 0f01 	tst.w	ip, #1
 800e498:	d001      	beq.n	800e49e <st_int8_copy+0xe6>
 800e49a:	7803      	ldrb	r3, [r0, #0]
 800e49c:	700b      	strb	r3, [r1, #0]
 800e49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4a2:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800e4a6:	f103 39ff 	add.w	r9, r3, #4294967295
 800e4aa:	b183      	cbz	r3, 800e4ce <st_int8_copy+0x116>
 800e4ac:	4688      	mov	r8, r1
 800e4ae:	4686      	mov	lr, r0
 800e4b0:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800e4b4:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800e4b8:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800e4bc:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800e4c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e4c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 800e4c8:	4641      	mov	r1, r8
 800e4ca:	4670      	mov	r0, lr
 800e4cc:	d1ee      	bne.n	800e4ac <st_int8_copy+0xf4>
 800e4ce:	f01c 0f20 	tst.w	ip, #32
 800e4d2:	d007      	beq.n	800e4e4 <st_int8_copy+0x12c>
 800e4d4:	4688      	mov	r8, r1
 800e4d6:	4686      	mov	lr, r0
 800e4d8:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800e4dc:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800e4e0:	4641      	mov	r1, r8
 800e4e2:	4670      	mov	r0, lr
 800e4e4:	f01c 0f10 	tst.w	ip, #16
 800e4e8:	d001      	beq.n	800e4ee <st_int8_copy+0x136>
 800e4ea:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800e4ec:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800e4ee:	f01c 0f08 	tst.w	ip, #8
 800e4f2:	d0c1      	beq.n	800e478 <st_int8_copy+0xc0>
 800e4f4:	c818      	ldmia	r0!, {r3, r4}
 800e4f6:	c118      	stmia	r1!, {r3, r4}
 800e4f8:	e7be      	b.n	800e478 <st_int8_copy+0xc0>
 800e4fa:	bf00      	nop

0800e4fc <ai_array_to_buffer_fmt>:
 800e4fc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800e500:	2b02      	cmp	r3, #2
 800e502:	d055      	beq.n	800e5b0 <ai_array_to_buffer_fmt+0xb4>
 800e504:	4a2d      	ldr	r2, [pc, #180]	@ (800e5bc <ai_array_to_buffer_fmt+0xc0>)
 800e506:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d010      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e50e:	dc21      	bgt.n	800e554 <ai_array_to_buffer_fmt+0x58>
 800e510:	4a2b      	ldr	r2, [pc, #172]	@ (800e5c0 <ai_array_to_buffer_fmt+0xc4>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d00c      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e516:	dd0f      	ble.n	800e538 <ai_array_to_buffer_fmt+0x3c>
 800e518:	4a2a      	ldr	r2, [pc, #168]	@ (800e5c4 <ai_array_to_buffer_fmt+0xc8>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d008      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e51e:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800e522:	4293      	cmp	r3, r2
 800e524:	d004      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e526:	4a28      	ldr	r2, [pc, #160]	@ (800e5c8 <ai_array_to_buffer_fmt+0xcc>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	bf0c      	ite	eq
 800e52c:	4613      	moveq	r3, r2
 800e52e:	2340      	movne	r3, #64	@ 0x40
 800e530:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e534:	4318      	orrs	r0, r3
 800e536:	4770      	bx	lr
 800e538:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d0f7      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e540:	dd2c      	ble.n	800e59c <ai_array_to_buffer_fmt+0xa0>
 800e542:	4a22      	ldr	r2, [pc, #136]	@ (800e5cc <ai_array_to_buffer_fmt+0xd0>)
 800e544:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e548:	4293      	cmp	r3, r2
 800e54a:	bf0c      	ite	eq
 800e54c:	4613      	moveq	r3, r2
 800e54e:	2340      	movne	r3, #64	@ 0x40
 800e550:	4318      	orrs	r0, r3
 800e552:	4770      	bx	lr
 800e554:	4a1e      	ldr	r2, [pc, #120]	@ (800e5d0 <ai_array_to_buffer_fmt+0xd4>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d0ea      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e55a:	dd10      	ble.n	800e57e <ai_array_to_buffer_fmt+0x82>
 800e55c:	4a1d      	ldr	r2, [pc, #116]	@ (800e5d4 <ai_array_to_buffer_fmt+0xd8>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d0e6      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e562:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800e566:	4293      	cmp	r3, r2
 800e568:	d0e2      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e56a:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800e56e:	4293      	cmp	r3, r2
 800e570:	bf0c      	ite	eq
 800e572:	4613      	moveq	r3, r2
 800e574:	2340      	movne	r3, #64	@ 0x40
 800e576:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800e57a:	4318      	orrs	r0, r3
 800e57c:	4770      	bx	lr
 800e57e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800e582:	4293      	cmp	r3, r2
 800e584:	d0d4      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e586:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d0d0      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e58e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e592:	4293      	cmp	r3, r2
 800e594:	bf0c      	ite	eq
 800e596:	4613      	moveq	r3, r2
 800e598:	2340      	movne	r3, #64	@ 0x40
 800e59a:	e7c9      	b.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e59c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d0c5      	beq.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e5a4:	3280      	adds	r2, #128	@ 0x80
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	bf0c      	ite	eq
 800e5aa:	4613      	moveq	r3, r2
 800e5ac:	2340      	movne	r3, #64	@ 0x40
 800e5ae:	e7bf      	b.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e5b0:	4b09      	ldr	r3, [pc, #36]	@ (800e5d8 <ai_array_to_buffer_fmt+0xdc>)
 800e5b2:	4003      	ands	r3, r0
 800e5b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e5b8:	e7ba      	b.n	800e530 <ai_array_to_buffer_fmt+0x34>
 800e5ba:	bf00      	nop
 800e5bc:	00821040 	.word	0x00821040
 800e5c0:	00040840 	.word	0x00040840
 800e5c4:	00041040 	.word	0x00041040
 800e5c8:	0004084f 	.word	0x0004084f
 800e5cc:	00040447 	.word	0x00040447
 800e5d0:	00840447 	.word	0x00840447
 800e5d4:	0084084f 	.word	0x0084084f
 800e5d8:	00803fff 	.word	0x00803fff

0800e5dc <ai_array_get_data_byte_size>:
 800e5dc:	b169      	cbz	r1, 800e5fa <ai_array_get_data_byte_size+0x1e>
 800e5de:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800e5e2:	fb03 f101 	mul.w	r1, r3, r1
 800e5e6:	1dcb      	adds	r3, r1, #7
 800e5e8:	f023 0307 	bic.w	r3, r3, #7
 800e5ec:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800e5f0:	fa23 f000 	lsr.w	r0, r3, r0
 800e5f4:	3007      	adds	r0, #7
 800e5f6:	08c0      	lsrs	r0, r0, #3
 800e5f8:	4770      	bx	lr
 800e5fa:	4608      	mov	r0, r1
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop

0800e600 <ai_version_get>:
 800e600:	0212      	lsls	r2, r2, #8
 800e602:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e606:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800e60a:	4770      	bx	lr

0800e60c <get_tensor_byte_size>:
 800e60c:	b410      	push	{r4}
 800e60e:	6983      	ldr	r3, [r0, #24]
 800e610:	68c4      	ldr	r4, [r0, #12]
 800e612:	6941      	ldr	r1, [r0, #20]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	68e0      	ldr	r0, [r4, #12]
 800e618:	4a07      	ldr	r2, [pc, #28]	@ (800e638 <get_tensor_byte_size+0x2c>)
 800e61a:	68c9      	ldr	r1, [r1, #12]
 800e61c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e620:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800e624:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e628:	fb01 f000 	mul.w	r0, r1, r0
 800e62c:	4293      	cmp	r3, r2
 800e62e:	bf04      	itt	eq
 800e630:	3007      	addeq	r0, #7
 800e632:	08c0      	lsreq	r0, r0, #3
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	000400c0 	.word	0x000400c0

0800e63c <malloc>:
 800e63c:	4b02      	ldr	r3, [pc, #8]	@ (800e648 <malloc+0xc>)
 800e63e:	4601      	mov	r1, r0
 800e640:	6818      	ldr	r0, [r3, #0]
 800e642:	f000 b82d 	b.w	800e6a0 <_malloc_r>
 800e646:	bf00      	nop
 800e648:	20000694 	.word	0x20000694

0800e64c <free>:
 800e64c:	4b02      	ldr	r3, [pc, #8]	@ (800e658 <free+0xc>)
 800e64e:	4601      	mov	r1, r0
 800e650:	6818      	ldr	r0, [r3, #0]
 800e652:	f000 b951 	b.w	800e8f8 <_free_r>
 800e656:	bf00      	nop
 800e658:	20000694 	.word	0x20000694

0800e65c <sbrk_aligned>:
 800e65c:	b570      	push	{r4, r5, r6, lr}
 800e65e:	4e0f      	ldr	r6, [pc, #60]	@ (800e69c <sbrk_aligned+0x40>)
 800e660:	460c      	mov	r4, r1
 800e662:	6831      	ldr	r1, [r6, #0]
 800e664:	4605      	mov	r5, r0
 800e666:	b911      	cbnz	r1, 800e66e <sbrk_aligned+0x12>
 800e668:	f000 f8fc 	bl	800e864 <_sbrk_r>
 800e66c:	6030      	str	r0, [r6, #0]
 800e66e:	4621      	mov	r1, r4
 800e670:	4628      	mov	r0, r5
 800e672:	f000 f8f7 	bl	800e864 <_sbrk_r>
 800e676:	1c43      	adds	r3, r0, #1
 800e678:	d103      	bne.n	800e682 <sbrk_aligned+0x26>
 800e67a:	f04f 34ff 	mov.w	r4, #4294967295
 800e67e:	4620      	mov	r0, r4
 800e680:	bd70      	pop	{r4, r5, r6, pc}
 800e682:	1cc4      	adds	r4, r0, #3
 800e684:	f024 0403 	bic.w	r4, r4, #3
 800e688:	42a0      	cmp	r0, r4
 800e68a:	d0f8      	beq.n	800e67e <sbrk_aligned+0x22>
 800e68c:	1a21      	subs	r1, r4, r0
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 f8e8 	bl	800e864 <_sbrk_r>
 800e694:	3001      	adds	r0, #1
 800e696:	d1f2      	bne.n	800e67e <sbrk_aligned+0x22>
 800e698:	e7ef      	b.n	800e67a <sbrk_aligned+0x1e>
 800e69a:	bf00      	nop
 800e69c:	200014d0 	.word	0x200014d0

0800e6a0 <_malloc_r>:
 800e6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a4:	1ccd      	adds	r5, r1, #3
 800e6a6:	f025 0503 	bic.w	r5, r5, #3
 800e6aa:	3508      	adds	r5, #8
 800e6ac:	2d0c      	cmp	r5, #12
 800e6ae:	bf38      	it	cc
 800e6b0:	250c      	movcc	r5, #12
 800e6b2:	2d00      	cmp	r5, #0
 800e6b4:	4606      	mov	r6, r0
 800e6b6:	db01      	blt.n	800e6bc <_malloc_r+0x1c>
 800e6b8:	42a9      	cmp	r1, r5
 800e6ba:	d904      	bls.n	800e6c6 <_malloc_r+0x26>
 800e6bc:	230c      	movs	r3, #12
 800e6be:	6033      	str	r3, [r6, #0]
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e79c <_malloc_r+0xfc>
 800e6ca:	f000 f869 	bl	800e7a0 <__malloc_lock>
 800e6ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e6d2:	461c      	mov	r4, r3
 800e6d4:	bb44      	cbnz	r4, 800e728 <_malloc_r+0x88>
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff ffbf 	bl	800e65c <sbrk_aligned>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	d158      	bne.n	800e796 <_malloc_r+0xf6>
 800e6e4:	f8d8 4000 	ldr.w	r4, [r8]
 800e6e8:	4627      	mov	r7, r4
 800e6ea:	2f00      	cmp	r7, #0
 800e6ec:	d143      	bne.n	800e776 <_malloc_r+0xd6>
 800e6ee:	2c00      	cmp	r4, #0
 800e6f0:	d04b      	beq.n	800e78a <_malloc_r+0xea>
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	eb04 0903 	add.w	r9, r4, r3
 800e6fc:	f000 f8b2 	bl	800e864 <_sbrk_r>
 800e700:	4581      	cmp	r9, r0
 800e702:	d142      	bne.n	800e78a <_malloc_r+0xea>
 800e704:	6821      	ldr	r1, [r4, #0]
 800e706:	1a6d      	subs	r5, r5, r1
 800e708:	4629      	mov	r1, r5
 800e70a:	4630      	mov	r0, r6
 800e70c:	f7ff ffa6 	bl	800e65c <sbrk_aligned>
 800e710:	3001      	adds	r0, #1
 800e712:	d03a      	beq.n	800e78a <_malloc_r+0xea>
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	442b      	add	r3, r5
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	f8d8 3000 	ldr.w	r3, [r8]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	bb62      	cbnz	r2, 800e77c <_malloc_r+0xdc>
 800e722:	f8c8 7000 	str.w	r7, [r8]
 800e726:	e00f      	b.n	800e748 <_malloc_r+0xa8>
 800e728:	6822      	ldr	r2, [r4, #0]
 800e72a:	1b52      	subs	r2, r2, r5
 800e72c:	d420      	bmi.n	800e770 <_malloc_r+0xd0>
 800e72e:	2a0b      	cmp	r2, #11
 800e730:	d917      	bls.n	800e762 <_malloc_r+0xc2>
 800e732:	1961      	adds	r1, r4, r5
 800e734:	42a3      	cmp	r3, r4
 800e736:	6025      	str	r5, [r4, #0]
 800e738:	bf18      	it	ne
 800e73a:	6059      	strne	r1, [r3, #4]
 800e73c:	6863      	ldr	r3, [r4, #4]
 800e73e:	bf08      	it	eq
 800e740:	f8c8 1000 	streq.w	r1, [r8]
 800e744:	5162      	str	r2, [r4, r5]
 800e746:	604b      	str	r3, [r1, #4]
 800e748:	4630      	mov	r0, r6
 800e74a:	f000 f82f 	bl	800e7ac <__malloc_unlock>
 800e74e:	f104 000b 	add.w	r0, r4, #11
 800e752:	1d23      	adds	r3, r4, #4
 800e754:	f020 0007 	bic.w	r0, r0, #7
 800e758:	1ac2      	subs	r2, r0, r3
 800e75a:	bf1c      	itt	ne
 800e75c:	1a1b      	subne	r3, r3, r0
 800e75e:	50a3      	strne	r3, [r4, r2]
 800e760:	e7af      	b.n	800e6c2 <_malloc_r+0x22>
 800e762:	6862      	ldr	r2, [r4, #4]
 800e764:	42a3      	cmp	r3, r4
 800e766:	bf0c      	ite	eq
 800e768:	f8c8 2000 	streq.w	r2, [r8]
 800e76c:	605a      	strne	r2, [r3, #4]
 800e76e:	e7eb      	b.n	800e748 <_malloc_r+0xa8>
 800e770:	4623      	mov	r3, r4
 800e772:	6864      	ldr	r4, [r4, #4]
 800e774:	e7ae      	b.n	800e6d4 <_malloc_r+0x34>
 800e776:	463c      	mov	r4, r7
 800e778:	687f      	ldr	r7, [r7, #4]
 800e77a:	e7b6      	b.n	800e6ea <_malloc_r+0x4a>
 800e77c:	461a      	mov	r2, r3
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	42a3      	cmp	r3, r4
 800e782:	d1fb      	bne.n	800e77c <_malloc_r+0xdc>
 800e784:	2300      	movs	r3, #0
 800e786:	6053      	str	r3, [r2, #4]
 800e788:	e7de      	b.n	800e748 <_malloc_r+0xa8>
 800e78a:	230c      	movs	r3, #12
 800e78c:	6033      	str	r3, [r6, #0]
 800e78e:	4630      	mov	r0, r6
 800e790:	f000 f80c 	bl	800e7ac <__malloc_unlock>
 800e794:	e794      	b.n	800e6c0 <_malloc_r+0x20>
 800e796:	6005      	str	r5, [r0, #0]
 800e798:	e7d6      	b.n	800e748 <_malloc_r+0xa8>
 800e79a:	bf00      	nop
 800e79c:	200014d4 	.word	0x200014d4

0800e7a0 <__malloc_lock>:
 800e7a0:	4801      	ldr	r0, [pc, #4]	@ (800e7a8 <__malloc_lock+0x8>)
 800e7a2:	f000 b899 	b.w	800e8d8 <__retarget_lock_acquire_recursive>
 800e7a6:	bf00      	nop
 800e7a8:	20001614 	.word	0x20001614

0800e7ac <__malloc_unlock>:
 800e7ac:	4801      	ldr	r0, [pc, #4]	@ (800e7b4 <__malloc_unlock+0x8>)
 800e7ae:	f000 b894 	b.w	800e8da <__retarget_lock_release_recursive>
 800e7b2:	bf00      	nop
 800e7b4:	20001614 	.word	0x20001614

0800e7b8 <_realloc_r>:
 800e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7bc:	4680      	mov	r8, r0
 800e7be:	4615      	mov	r5, r2
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	b921      	cbnz	r1, 800e7ce <_realloc_r+0x16>
 800e7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	f7ff bf69 	b.w	800e6a0 <_malloc_r>
 800e7ce:	b92a      	cbnz	r2, 800e7dc <_realloc_r+0x24>
 800e7d0:	f000 f892 	bl	800e8f8 <_free_r>
 800e7d4:	2400      	movs	r4, #0
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7dc:	f000 f8d6 	bl	800e98c <_malloc_usable_size_r>
 800e7e0:	4285      	cmp	r5, r0
 800e7e2:	4606      	mov	r6, r0
 800e7e4:	d802      	bhi.n	800e7ec <_realloc_r+0x34>
 800e7e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7ea:	d8f4      	bhi.n	800e7d6 <_realloc_r+0x1e>
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	f7ff ff56 	bl	800e6a0 <_malloc_r>
 800e7f4:	4607      	mov	r7, r0
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d0ec      	beq.n	800e7d4 <_realloc_r+0x1c>
 800e7fa:	42b5      	cmp	r5, r6
 800e7fc:	462a      	mov	r2, r5
 800e7fe:	4621      	mov	r1, r4
 800e800:	bf28      	it	cs
 800e802:	4632      	movcs	r2, r6
 800e804:	f000 f86a 	bl	800e8dc <memcpy>
 800e808:	4621      	mov	r1, r4
 800e80a:	4640      	mov	r0, r8
 800e80c:	f000 f874 	bl	800e8f8 <_free_r>
 800e810:	463c      	mov	r4, r7
 800e812:	e7e0      	b.n	800e7d6 <_realloc_r+0x1e>

0800e814 <siprintf>:
 800e814:	b40e      	push	{r1, r2, r3}
 800e816:	b500      	push	{lr}
 800e818:	b09c      	sub	sp, #112	@ 0x70
 800e81a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e81c:	9002      	str	r0, [sp, #8]
 800e81e:	9006      	str	r0, [sp, #24]
 800e820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e824:	4809      	ldr	r0, [pc, #36]	@ (800e84c <siprintf+0x38>)
 800e826:	9107      	str	r1, [sp, #28]
 800e828:	9104      	str	r1, [sp, #16]
 800e82a:	4909      	ldr	r1, [pc, #36]	@ (800e850 <siprintf+0x3c>)
 800e82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e830:	9105      	str	r1, [sp, #20]
 800e832:	6800      	ldr	r0, [r0, #0]
 800e834:	9301      	str	r3, [sp, #4]
 800e836:	a902      	add	r1, sp, #8
 800e838:	f000 f90c 	bl	800ea54 <_svfiprintf_r>
 800e83c:	9b02      	ldr	r3, [sp, #8]
 800e83e:	2200      	movs	r2, #0
 800e840:	701a      	strb	r2, [r3, #0]
 800e842:	b01c      	add	sp, #112	@ 0x70
 800e844:	f85d eb04 	ldr.w	lr, [sp], #4
 800e848:	b003      	add	sp, #12
 800e84a:	4770      	bx	lr
 800e84c:	20000694 	.word	0x20000694
 800e850:	ffff0208 	.word	0xffff0208

0800e854 <memset>:
 800e854:	4402      	add	r2, r0
 800e856:	4603      	mov	r3, r0
 800e858:	4293      	cmp	r3, r2
 800e85a:	d100      	bne.n	800e85e <memset+0xa>
 800e85c:	4770      	bx	lr
 800e85e:	f803 1b01 	strb.w	r1, [r3], #1
 800e862:	e7f9      	b.n	800e858 <memset+0x4>

0800e864 <_sbrk_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4d06      	ldr	r5, [pc, #24]	@ (800e880 <_sbrk_r+0x1c>)
 800e868:	2300      	movs	r3, #0
 800e86a:	4604      	mov	r4, r0
 800e86c:	4608      	mov	r0, r1
 800e86e:	602b      	str	r3, [r5, #0]
 800e870:	f7f3 fbfc 	bl	800206c <_sbrk>
 800e874:	1c43      	adds	r3, r0, #1
 800e876:	d102      	bne.n	800e87e <_sbrk_r+0x1a>
 800e878:	682b      	ldr	r3, [r5, #0]
 800e87a:	b103      	cbz	r3, 800e87e <_sbrk_r+0x1a>
 800e87c:	6023      	str	r3, [r4, #0]
 800e87e:	bd38      	pop	{r3, r4, r5, pc}
 800e880:	20001610 	.word	0x20001610

0800e884 <__errno>:
 800e884:	4b01      	ldr	r3, [pc, #4]	@ (800e88c <__errno+0x8>)
 800e886:	6818      	ldr	r0, [r3, #0]
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	20000694 	.word	0x20000694

0800e890 <__libc_init_array>:
 800e890:	b570      	push	{r4, r5, r6, lr}
 800e892:	4d0d      	ldr	r5, [pc, #52]	@ (800e8c8 <__libc_init_array+0x38>)
 800e894:	4c0d      	ldr	r4, [pc, #52]	@ (800e8cc <__libc_init_array+0x3c>)
 800e896:	1b64      	subs	r4, r4, r5
 800e898:	10a4      	asrs	r4, r4, #2
 800e89a:	2600      	movs	r6, #0
 800e89c:	42a6      	cmp	r6, r4
 800e89e:	d109      	bne.n	800e8b4 <__libc_init_array+0x24>
 800e8a0:	4d0b      	ldr	r5, [pc, #44]	@ (800e8d0 <__libc_init_array+0x40>)
 800e8a2:	4c0c      	ldr	r4, [pc, #48]	@ (800e8d4 <__libc_init_array+0x44>)
 800e8a4:	f000 fd86 	bl	800f3b4 <_init>
 800e8a8:	1b64      	subs	r4, r4, r5
 800e8aa:	10a4      	asrs	r4, r4, #2
 800e8ac:	2600      	movs	r6, #0
 800e8ae:	42a6      	cmp	r6, r4
 800e8b0:	d105      	bne.n	800e8be <__libc_init_array+0x2e>
 800e8b2:	bd70      	pop	{r4, r5, r6, pc}
 800e8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8b8:	4798      	blx	r3
 800e8ba:	3601      	adds	r6, #1
 800e8bc:	e7ee      	b.n	800e89c <__libc_init_array+0xc>
 800e8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8c2:	4798      	blx	r3
 800e8c4:	3601      	adds	r6, #1
 800e8c6:	e7f2      	b.n	800e8ae <__libc_init_array+0x1e>
 800e8c8:	08013e98 	.word	0x08013e98
 800e8cc:	08013e98 	.word	0x08013e98
 800e8d0:	08013e98 	.word	0x08013e98
 800e8d4:	08013e9c 	.word	0x08013e9c

0800e8d8 <__retarget_lock_acquire_recursive>:
 800e8d8:	4770      	bx	lr

0800e8da <__retarget_lock_release_recursive>:
 800e8da:	4770      	bx	lr

0800e8dc <memcpy>:
 800e8dc:	440a      	add	r2, r1
 800e8de:	4291      	cmp	r1, r2
 800e8e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8e4:	d100      	bne.n	800e8e8 <memcpy+0xc>
 800e8e6:	4770      	bx	lr
 800e8e8:	b510      	push	{r4, lr}
 800e8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8f2:	4291      	cmp	r1, r2
 800e8f4:	d1f9      	bne.n	800e8ea <memcpy+0xe>
 800e8f6:	bd10      	pop	{r4, pc}

0800e8f8 <_free_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	2900      	cmp	r1, #0
 800e8fe:	d041      	beq.n	800e984 <_free_r+0x8c>
 800e900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e904:	1f0c      	subs	r4, r1, #4
 800e906:	2b00      	cmp	r3, #0
 800e908:	bfb8      	it	lt
 800e90a:	18e4      	addlt	r4, r4, r3
 800e90c:	f7ff ff48 	bl	800e7a0 <__malloc_lock>
 800e910:	4a1d      	ldr	r2, [pc, #116]	@ (800e988 <_free_r+0x90>)
 800e912:	6813      	ldr	r3, [r2, #0]
 800e914:	b933      	cbnz	r3, 800e924 <_free_r+0x2c>
 800e916:	6063      	str	r3, [r4, #4]
 800e918:	6014      	str	r4, [r2, #0]
 800e91a:	4628      	mov	r0, r5
 800e91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e920:	f7ff bf44 	b.w	800e7ac <__malloc_unlock>
 800e924:	42a3      	cmp	r3, r4
 800e926:	d908      	bls.n	800e93a <_free_r+0x42>
 800e928:	6820      	ldr	r0, [r4, #0]
 800e92a:	1821      	adds	r1, r4, r0
 800e92c:	428b      	cmp	r3, r1
 800e92e:	bf01      	itttt	eq
 800e930:	6819      	ldreq	r1, [r3, #0]
 800e932:	685b      	ldreq	r3, [r3, #4]
 800e934:	1809      	addeq	r1, r1, r0
 800e936:	6021      	streq	r1, [r4, #0]
 800e938:	e7ed      	b.n	800e916 <_free_r+0x1e>
 800e93a:	461a      	mov	r2, r3
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	b10b      	cbz	r3, 800e944 <_free_r+0x4c>
 800e940:	42a3      	cmp	r3, r4
 800e942:	d9fa      	bls.n	800e93a <_free_r+0x42>
 800e944:	6811      	ldr	r1, [r2, #0]
 800e946:	1850      	adds	r0, r2, r1
 800e948:	42a0      	cmp	r0, r4
 800e94a:	d10b      	bne.n	800e964 <_free_r+0x6c>
 800e94c:	6820      	ldr	r0, [r4, #0]
 800e94e:	4401      	add	r1, r0
 800e950:	1850      	adds	r0, r2, r1
 800e952:	4283      	cmp	r3, r0
 800e954:	6011      	str	r1, [r2, #0]
 800e956:	d1e0      	bne.n	800e91a <_free_r+0x22>
 800e958:	6818      	ldr	r0, [r3, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	6053      	str	r3, [r2, #4]
 800e95e:	4408      	add	r0, r1
 800e960:	6010      	str	r0, [r2, #0]
 800e962:	e7da      	b.n	800e91a <_free_r+0x22>
 800e964:	d902      	bls.n	800e96c <_free_r+0x74>
 800e966:	230c      	movs	r3, #12
 800e968:	602b      	str	r3, [r5, #0]
 800e96a:	e7d6      	b.n	800e91a <_free_r+0x22>
 800e96c:	6820      	ldr	r0, [r4, #0]
 800e96e:	1821      	adds	r1, r4, r0
 800e970:	428b      	cmp	r3, r1
 800e972:	bf04      	itt	eq
 800e974:	6819      	ldreq	r1, [r3, #0]
 800e976:	685b      	ldreq	r3, [r3, #4]
 800e978:	6063      	str	r3, [r4, #4]
 800e97a:	bf04      	itt	eq
 800e97c:	1809      	addeq	r1, r1, r0
 800e97e:	6021      	streq	r1, [r4, #0]
 800e980:	6054      	str	r4, [r2, #4]
 800e982:	e7ca      	b.n	800e91a <_free_r+0x22>
 800e984:	bd38      	pop	{r3, r4, r5, pc}
 800e986:	bf00      	nop
 800e988:	200014d4 	.word	0x200014d4

0800e98c <_malloc_usable_size_r>:
 800e98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e990:	1f18      	subs	r0, r3, #4
 800e992:	2b00      	cmp	r3, #0
 800e994:	bfbc      	itt	lt
 800e996:	580b      	ldrlt	r3, [r1, r0]
 800e998:	18c0      	addlt	r0, r0, r3
 800e99a:	4770      	bx	lr

0800e99c <__ssputs_r>:
 800e99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9a0:	688e      	ldr	r6, [r1, #8]
 800e9a2:	461f      	mov	r7, r3
 800e9a4:	42be      	cmp	r6, r7
 800e9a6:	680b      	ldr	r3, [r1, #0]
 800e9a8:	4682      	mov	sl, r0
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	4690      	mov	r8, r2
 800e9ae:	d82d      	bhi.n	800ea0c <__ssputs_r+0x70>
 800e9b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e9b8:	d026      	beq.n	800ea08 <__ssputs_r+0x6c>
 800e9ba:	6965      	ldr	r5, [r4, #20]
 800e9bc:	6909      	ldr	r1, [r1, #16]
 800e9be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9c2:	eba3 0901 	sub.w	r9, r3, r1
 800e9c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9ca:	1c7b      	adds	r3, r7, #1
 800e9cc:	444b      	add	r3, r9
 800e9ce:	106d      	asrs	r5, r5, #1
 800e9d0:	429d      	cmp	r5, r3
 800e9d2:	bf38      	it	cc
 800e9d4:	461d      	movcc	r5, r3
 800e9d6:	0553      	lsls	r3, r2, #21
 800e9d8:	d527      	bpl.n	800ea2a <__ssputs_r+0x8e>
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f7ff fe60 	bl	800e6a0 <_malloc_r>
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	b360      	cbz	r0, 800ea3e <__ssputs_r+0xa2>
 800e9e4:	6921      	ldr	r1, [r4, #16]
 800e9e6:	464a      	mov	r2, r9
 800e9e8:	f7ff ff78 	bl	800e8dc <memcpy>
 800e9ec:	89a3      	ldrh	r3, [r4, #12]
 800e9ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9f6:	81a3      	strh	r3, [r4, #12]
 800e9f8:	6126      	str	r6, [r4, #16]
 800e9fa:	6165      	str	r5, [r4, #20]
 800e9fc:	444e      	add	r6, r9
 800e9fe:	eba5 0509 	sub.w	r5, r5, r9
 800ea02:	6026      	str	r6, [r4, #0]
 800ea04:	60a5      	str	r5, [r4, #8]
 800ea06:	463e      	mov	r6, r7
 800ea08:	42be      	cmp	r6, r7
 800ea0a:	d900      	bls.n	800ea0e <__ssputs_r+0x72>
 800ea0c:	463e      	mov	r6, r7
 800ea0e:	6820      	ldr	r0, [r4, #0]
 800ea10:	4632      	mov	r2, r6
 800ea12:	4641      	mov	r1, r8
 800ea14:	f000 faa8 	bl	800ef68 <memmove>
 800ea18:	68a3      	ldr	r3, [r4, #8]
 800ea1a:	1b9b      	subs	r3, r3, r6
 800ea1c:	60a3      	str	r3, [r4, #8]
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	4433      	add	r3, r6
 800ea22:	6023      	str	r3, [r4, #0]
 800ea24:	2000      	movs	r0, #0
 800ea26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea2a:	462a      	mov	r2, r5
 800ea2c:	f7ff fec4 	bl	800e7b8 <_realloc_r>
 800ea30:	4606      	mov	r6, r0
 800ea32:	2800      	cmp	r0, #0
 800ea34:	d1e0      	bne.n	800e9f8 <__ssputs_r+0x5c>
 800ea36:	6921      	ldr	r1, [r4, #16]
 800ea38:	4650      	mov	r0, sl
 800ea3a:	f7ff ff5d 	bl	800e8f8 <_free_r>
 800ea3e:	230c      	movs	r3, #12
 800ea40:	f8ca 3000 	str.w	r3, [sl]
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea4a:	81a3      	strh	r3, [r4, #12]
 800ea4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea50:	e7e9      	b.n	800ea26 <__ssputs_r+0x8a>
	...

0800ea54 <_svfiprintf_r>:
 800ea54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea58:	4698      	mov	r8, r3
 800ea5a:	898b      	ldrh	r3, [r1, #12]
 800ea5c:	061b      	lsls	r3, r3, #24
 800ea5e:	b09d      	sub	sp, #116	@ 0x74
 800ea60:	4607      	mov	r7, r0
 800ea62:	460d      	mov	r5, r1
 800ea64:	4614      	mov	r4, r2
 800ea66:	d510      	bpl.n	800ea8a <_svfiprintf_r+0x36>
 800ea68:	690b      	ldr	r3, [r1, #16]
 800ea6a:	b973      	cbnz	r3, 800ea8a <_svfiprintf_r+0x36>
 800ea6c:	2140      	movs	r1, #64	@ 0x40
 800ea6e:	f7ff fe17 	bl	800e6a0 <_malloc_r>
 800ea72:	6028      	str	r0, [r5, #0]
 800ea74:	6128      	str	r0, [r5, #16]
 800ea76:	b930      	cbnz	r0, 800ea86 <_svfiprintf_r+0x32>
 800ea78:	230c      	movs	r3, #12
 800ea7a:	603b      	str	r3, [r7, #0]
 800ea7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea80:	b01d      	add	sp, #116	@ 0x74
 800ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea86:	2340      	movs	r3, #64	@ 0x40
 800ea88:	616b      	str	r3, [r5, #20]
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea8e:	2320      	movs	r3, #32
 800ea90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea98:	2330      	movs	r3, #48	@ 0x30
 800ea9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ec38 <_svfiprintf_r+0x1e4>
 800ea9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eaa2:	f04f 0901 	mov.w	r9, #1
 800eaa6:	4623      	mov	r3, r4
 800eaa8:	469a      	mov	sl, r3
 800eaaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaae:	b10a      	cbz	r2, 800eab4 <_svfiprintf_r+0x60>
 800eab0:	2a25      	cmp	r2, #37	@ 0x25
 800eab2:	d1f9      	bne.n	800eaa8 <_svfiprintf_r+0x54>
 800eab4:	ebba 0b04 	subs.w	fp, sl, r4
 800eab8:	d00b      	beq.n	800ead2 <_svfiprintf_r+0x7e>
 800eaba:	465b      	mov	r3, fp
 800eabc:	4622      	mov	r2, r4
 800eabe:	4629      	mov	r1, r5
 800eac0:	4638      	mov	r0, r7
 800eac2:	f7ff ff6b 	bl	800e99c <__ssputs_r>
 800eac6:	3001      	adds	r0, #1
 800eac8:	f000 80a7 	beq.w	800ec1a <_svfiprintf_r+0x1c6>
 800eacc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eace:	445a      	add	r2, fp
 800ead0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ead2:	f89a 3000 	ldrb.w	r3, [sl]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f000 809f 	beq.w	800ec1a <_svfiprintf_r+0x1c6>
 800eadc:	2300      	movs	r3, #0
 800eade:	f04f 32ff 	mov.w	r2, #4294967295
 800eae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eae6:	f10a 0a01 	add.w	sl, sl, #1
 800eaea:	9304      	str	r3, [sp, #16]
 800eaec:	9307      	str	r3, [sp, #28]
 800eaee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eaf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eaf4:	4654      	mov	r4, sl
 800eaf6:	2205      	movs	r2, #5
 800eaf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eafc:	484e      	ldr	r0, [pc, #312]	@ (800ec38 <_svfiprintf_r+0x1e4>)
 800eafe:	f7f1 fb87 	bl	8000210 <memchr>
 800eb02:	9a04      	ldr	r2, [sp, #16]
 800eb04:	b9d8      	cbnz	r0, 800eb3e <_svfiprintf_r+0xea>
 800eb06:	06d0      	lsls	r0, r2, #27
 800eb08:	bf44      	itt	mi
 800eb0a:	2320      	movmi	r3, #32
 800eb0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb10:	0711      	lsls	r1, r2, #28
 800eb12:	bf44      	itt	mi
 800eb14:	232b      	movmi	r3, #43	@ 0x2b
 800eb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb20:	d015      	beq.n	800eb4e <_svfiprintf_r+0xfa>
 800eb22:	9a07      	ldr	r2, [sp, #28]
 800eb24:	4654      	mov	r4, sl
 800eb26:	2000      	movs	r0, #0
 800eb28:	f04f 0c0a 	mov.w	ip, #10
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb32:	3b30      	subs	r3, #48	@ 0x30
 800eb34:	2b09      	cmp	r3, #9
 800eb36:	d94b      	bls.n	800ebd0 <_svfiprintf_r+0x17c>
 800eb38:	b1b0      	cbz	r0, 800eb68 <_svfiprintf_r+0x114>
 800eb3a:	9207      	str	r2, [sp, #28]
 800eb3c:	e014      	b.n	800eb68 <_svfiprintf_r+0x114>
 800eb3e:	eba0 0308 	sub.w	r3, r0, r8
 800eb42:	fa09 f303 	lsl.w	r3, r9, r3
 800eb46:	4313      	orrs	r3, r2
 800eb48:	9304      	str	r3, [sp, #16]
 800eb4a:	46a2      	mov	sl, r4
 800eb4c:	e7d2      	b.n	800eaf4 <_svfiprintf_r+0xa0>
 800eb4e:	9b03      	ldr	r3, [sp, #12]
 800eb50:	1d19      	adds	r1, r3, #4
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	9103      	str	r1, [sp, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	bfbb      	ittet	lt
 800eb5a:	425b      	neglt	r3, r3
 800eb5c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb60:	9307      	strge	r3, [sp, #28]
 800eb62:	9307      	strlt	r3, [sp, #28]
 800eb64:	bfb8      	it	lt
 800eb66:	9204      	strlt	r2, [sp, #16]
 800eb68:	7823      	ldrb	r3, [r4, #0]
 800eb6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb6c:	d10a      	bne.n	800eb84 <_svfiprintf_r+0x130>
 800eb6e:	7863      	ldrb	r3, [r4, #1]
 800eb70:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb72:	d132      	bne.n	800ebda <_svfiprintf_r+0x186>
 800eb74:	9b03      	ldr	r3, [sp, #12]
 800eb76:	1d1a      	adds	r2, r3, #4
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	9203      	str	r2, [sp, #12]
 800eb7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb80:	3402      	adds	r4, #2
 800eb82:	9305      	str	r3, [sp, #20]
 800eb84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ec48 <_svfiprintf_r+0x1f4>
 800eb88:	7821      	ldrb	r1, [r4, #0]
 800eb8a:	2203      	movs	r2, #3
 800eb8c:	4650      	mov	r0, sl
 800eb8e:	f7f1 fb3f 	bl	8000210 <memchr>
 800eb92:	b138      	cbz	r0, 800eba4 <_svfiprintf_r+0x150>
 800eb94:	9b04      	ldr	r3, [sp, #16]
 800eb96:	eba0 000a 	sub.w	r0, r0, sl
 800eb9a:	2240      	movs	r2, #64	@ 0x40
 800eb9c:	4082      	lsls	r2, r0
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	3401      	adds	r4, #1
 800eba2:	9304      	str	r3, [sp, #16]
 800eba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba8:	4824      	ldr	r0, [pc, #144]	@ (800ec3c <_svfiprintf_r+0x1e8>)
 800ebaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebae:	2206      	movs	r2, #6
 800ebb0:	f7f1 fb2e 	bl	8000210 <memchr>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d036      	beq.n	800ec26 <_svfiprintf_r+0x1d2>
 800ebb8:	4b21      	ldr	r3, [pc, #132]	@ (800ec40 <_svfiprintf_r+0x1ec>)
 800ebba:	bb1b      	cbnz	r3, 800ec04 <_svfiprintf_r+0x1b0>
 800ebbc:	9b03      	ldr	r3, [sp, #12]
 800ebbe:	3307      	adds	r3, #7
 800ebc0:	f023 0307 	bic.w	r3, r3, #7
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	9303      	str	r3, [sp, #12]
 800ebc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebca:	4433      	add	r3, r6
 800ebcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebce:	e76a      	b.n	800eaa6 <_svfiprintf_r+0x52>
 800ebd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	2001      	movs	r0, #1
 800ebd8:	e7a8      	b.n	800eb2c <_svfiprintf_r+0xd8>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	3401      	adds	r4, #1
 800ebde:	9305      	str	r3, [sp, #20]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	f04f 0c0a 	mov.w	ip, #10
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebec:	3a30      	subs	r2, #48	@ 0x30
 800ebee:	2a09      	cmp	r2, #9
 800ebf0:	d903      	bls.n	800ebfa <_svfiprintf_r+0x1a6>
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0c6      	beq.n	800eb84 <_svfiprintf_r+0x130>
 800ebf6:	9105      	str	r1, [sp, #20]
 800ebf8:	e7c4      	b.n	800eb84 <_svfiprintf_r+0x130>
 800ebfa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebfe:	4604      	mov	r4, r0
 800ec00:	2301      	movs	r3, #1
 800ec02:	e7f0      	b.n	800ebe6 <_svfiprintf_r+0x192>
 800ec04:	ab03      	add	r3, sp, #12
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	462a      	mov	r2, r5
 800ec0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ec44 <_svfiprintf_r+0x1f0>)
 800ec0c:	a904      	add	r1, sp, #16
 800ec0e:	4638      	mov	r0, r7
 800ec10:	f3af 8000 	nop.w
 800ec14:	1c42      	adds	r2, r0, #1
 800ec16:	4606      	mov	r6, r0
 800ec18:	d1d6      	bne.n	800ebc8 <_svfiprintf_r+0x174>
 800ec1a:	89ab      	ldrh	r3, [r5, #12]
 800ec1c:	065b      	lsls	r3, r3, #25
 800ec1e:	f53f af2d 	bmi.w	800ea7c <_svfiprintf_r+0x28>
 800ec22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec24:	e72c      	b.n	800ea80 <_svfiprintf_r+0x2c>
 800ec26:	ab03      	add	r3, sp, #12
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	462a      	mov	r2, r5
 800ec2c:	4b05      	ldr	r3, [pc, #20]	@ (800ec44 <_svfiprintf_r+0x1f0>)
 800ec2e:	a904      	add	r1, sp, #16
 800ec30:	4638      	mov	r0, r7
 800ec32:	f000 f879 	bl	800ed28 <_printf_i>
 800ec36:	e7ed      	b.n	800ec14 <_svfiprintf_r+0x1c0>
 800ec38:	08013e28 	.word	0x08013e28
 800ec3c:	08013e32 	.word	0x08013e32
 800ec40:	00000000 	.word	0x00000000
 800ec44:	0800e99d 	.word	0x0800e99d
 800ec48:	08013e2e 	.word	0x08013e2e

0800ec4c <_printf_common>:
 800ec4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec50:	4616      	mov	r6, r2
 800ec52:	4698      	mov	r8, r3
 800ec54:	688a      	ldr	r2, [r1, #8]
 800ec56:	690b      	ldr	r3, [r1, #16]
 800ec58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	bfb8      	it	lt
 800ec60:	4613      	movlt	r3, r2
 800ec62:	6033      	str	r3, [r6, #0]
 800ec64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec68:	4607      	mov	r7, r0
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	b10a      	cbz	r2, 800ec72 <_printf_common+0x26>
 800ec6e:	3301      	adds	r3, #1
 800ec70:	6033      	str	r3, [r6, #0]
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	0699      	lsls	r1, r3, #26
 800ec76:	bf42      	ittt	mi
 800ec78:	6833      	ldrmi	r3, [r6, #0]
 800ec7a:	3302      	addmi	r3, #2
 800ec7c:	6033      	strmi	r3, [r6, #0]
 800ec7e:	6825      	ldr	r5, [r4, #0]
 800ec80:	f015 0506 	ands.w	r5, r5, #6
 800ec84:	d106      	bne.n	800ec94 <_printf_common+0x48>
 800ec86:	f104 0a19 	add.w	sl, r4, #25
 800ec8a:	68e3      	ldr	r3, [r4, #12]
 800ec8c:	6832      	ldr	r2, [r6, #0]
 800ec8e:	1a9b      	subs	r3, r3, r2
 800ec90:	42ab      	cmp	r3, r5
 800ec92:	dc26      	bgt.n	800ece2 <_printf_common+0x96>
 800ec94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec98:	6822      	ldr	r2, [r4, #0]
 800ec9a:	3b00      	subs	r3, #0
 800ec9c:	bf18      	it	ne
 800ec9e:	2301      	movne	r3, #1
 800eca0:	0692      	lsls	r2, r2, #26
 800eca2:	d42b      	bmi.n	800ecfc <_printf_common+0xb0>
 800eca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eca8:	4641      	mov	r1, r8
 800ecaa:	4638      	mov	r0, r7
 800ecac:	47c8      	blx	r9
 800ecae:	3001      	adds	r0, #1
 800ecb0:	d01e      	beq.n	800ecf0 <_printf_common+0xa4>
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	6922      	ldr	r2, [r4, #16]
 800ecb6:	f003 0306 	and.w	r3, r3, #6
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	bf02      	ittt	eq
 800ecbe:	68e5      	ldreq	r5, [r4, #12]
 800ecc0:	6833      	ldreq	r3, [r6, #0]
 800ecc2:	1aed      	subeq	r5, r5, r3
 800ecc4:	68a3      	ldr	r3, [r4, #8]
 800ecc6:	bf0c      	ite	eq
 800ecc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eccc:	2500      	movne	r5, #0
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	bfc4      	itt	gt
 800ecd2:	1a9b      	subgt	r3, r3, r2
 800ecd4:	18ed      	addgt	r5, r5, r3
 800ecd6:	2600      	movs	r6, #0
 800ecd8:	341a      	adds	r4, #26
 800ecda:	42b5      	cmp	r5, r6
 800ecdc:	d11a      	bne.n	800ed14 <_printf_common+0xc8>
 800ecde:	2000      	movs	r0, #0
 800ece0:	e008      	b.n	800ecf4 <_printf_common+0xa8>
 800ece2:	2301      	movs	r3, #1
 800ece4:	4652      	mov	r2, sl
 800ece6:	4641      	mov	r1, r8
 800ece8:	4638      	mov	r0, r7
 800ecea:	47c8      	blx	r9
 800ecec:	3001      	adds	r0, #1
 800ecee:	d103      	bne.n	800ecf8 <_printf_common+0xac>
 800ecf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf8:	3501      	adds	r5, #1
 800ecfa:	e7c6      	b.n	800ec8a <_printf_common+0x3e>
 800ecfc:	18e1      	adds	r1, r4, r3
 800ecfe:	1c5a      	adds	r2, r3, #1
 800ed00:	2030      	movs	r0, #48	@ 0x30
 800ed02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed06:	4422      	add	r2, r4
 800ed08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed10:	3302      	adds	r3, #2
 800ed12:	e7c7      	b.n	800eca4 <_printf_common+0x58>
 800ed14:	2301      	movs	r3, #1
 800ed16:	4622      	mov	r2, r4
 800ed18:	4641      	mov	r1, r8
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	47c8      	blx	r9
 800ed1e:	3001      	adds	r0, #1
 800ed20:	d0e6      	beq.n	800ecf0 <_printf_common+0xa4>
 800ed22:	3601      	adds	r6, #1
 800ed24:	e7d9      	b.n	800ecda <_printf_common+0x8e>
	...

0800ed28 <_printf_i>:
 800ed28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed2c:	7e0f      	ldrb	r7, [r1, #24]
 800ed2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed30:	2f78      	cmp	r7, #120	@ 0x78
 800ed32:	4691      	mov	r9, r2
 800ed34:	4680      	mov	r8, r0
 800ed36:	460c      	mov	r4, r1
 800ed38:	469a      	mov	sl, r3
 800ed3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed3e:	d807      	bhi.n	800ed50 <_printf_i+0x28>
 800ed40:	2f62      	cmp	r7, #98	@ 0x62
 800ed42:	d80a      	bhi.n	800ed5a <_printf_i+0x32>
 800ed44:	2f00      	cmp	r7, #0
 800ed46:	f000 80d2 	beq.w	800eeee <_printf_i+0x1c6>
 800ed4a:	2f58      	cmp	r7, #88	@ 0x58
 800ed4c:	f000 80b9 	beq.w	800eec2 <_printf_i+0x19a>
 800ed50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed58:	e03a      	b.n	800edd0 <_printf_i+0xa8>
 800ed5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed5e:	2b15      	cmp	r3, #21
 800ed60:	d8f6      	bhi.n	800ed50 <_printf_i+0x28>
 800ed62:	a101      	add	r1, pc, #4	@ (adr r1, 800ed68 <_printf_i+0x40>)
 800ed64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed68:	0800edc1 	.word	0x0800edc1
 800ed6c:	0800edd5 	.word	0x0800edd5
 800ed70:	0800ed51 	.word	0x0800ed51
 800ed74:	0800ed51 	.word	0x0800ed51
 800ed78:	0800ed51 	.word	0x0800ed51
 800ed7c:	0800ed51 	.word	0x0800ed51
 800ed80:	0800edd5 	.word	0x0800edd5
 800ed84:	0800ed51 	.word	0x0800ed51
 800ed88:	0800ed51 	.word	0x0800ed51
 800ed8c:	0800ed51 	.word	0x0800ed51
 800ed90:	0800ed51 	.word	0x0800ed51
 800ed94:	0800eed5 	.word	0x0800eed5
 800ed98:	0800edff 	.word	0x0800edff
 800ed9c:	0800ee8f 	.word	0x0800ee8f
 800eda0:	0800ed51 	.word	0x0800ed51
 800eda4:	0800ed51 	.word	0x0800ed51
 800eda8:	0800eef7 	.word	0x0800eef7
 800edac:	0800ed51 	.word	0x0800ed51
 800edb0:	0800edff 	.word	0x0800edff
 800edb4:	0800ed51 	.word	0x0800ed51
 800edb8:	0800ed51 	.word	0x0800ed51
 800edbc:	0800ee97 	.word	0x0800ee97
 800edc0:	6833      	ldr	r3, [r6, #0]
 800edc2:	1d1a      	adds	r2, r3, #4
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	6032      	str	r2, [r6, #0]
 800edc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800edd0:	2301      	movs	r3, #1
 800edd2:	e09d      	b.n	800ef10 <_printf_i+0x1e8>
 800edd4:	6833      	ldr	r3, [r6, #0]
 800edd6:	6820      	ldr	r0, [r4, #0]
 800edd8:	1d19      	adds	r1, r3, #4
 800edda:	6031      	str	r1, [r6, #0]
 800eddc:	0606      	lsls	r6, r0, #24
 800edde:	d501      	bpl.n	800ede4 <_printf_i+0xbc>
 800ede0:	681d      	ldr	r5, [r3, #0]
 800ede2:	e003      	b.n	800edec <_printf_i+0xc4>
 800ede4:	0645      	lsls	r5, r0, #25
 800ede6:	d5fb      	bpl.n	800ede0 <_printf_i+0xb8>
 800ede8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edec:	2d00      	cmp	r5, #0
 800edee:	da03      	bge.n	800edf8 <_printf_i+0xd0>
 800edf0:	232d      	movs	r3, #45	@ 0x2d
 800edf2:	426d      	negs	r5, r5
 800edf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800edf8:	4859      	ldr	r0, [pc, #356]	@ (800ef60 <_printf_i+0x238>)
 800edfa:	230a      	movs	r3, #10
 800edfc:	e011      	b.n	800ee22 <_printf_i+0xfa>
 800edfe:	6821      	ldr	r1, [r4, #0]
 800ee00:	6833      	ldr	r3, [r6, #0]
 800ee02:	0608      	lsls	r0, r1, #24
 800ee04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee08:	d402      	bmi.n	800ee10 <_printf_i+0xe8>
 800ee0a:	0649      	lsls	r1, r1, #25
 800ee0c:	bf48      	it	mi
 800ee0e:	b2ad      	uxthmi	r5, r5
 800ee10:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee12:	4853      	ldr	r0, [pc, #332]	@ (800ef60 <_printf_i+0x238>)
 800ee14:	6033      	str	r3, [r6, #0]
 800ee16:	bf14      	ite	ne
 800ee18:	230a      	movne	r3, #10
 800ee1a:	2308      	moveq	r3, #8
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee22:	6866      	ldr	r6, [r4, #4]
 800ee24:	60a6      	str	r6, [r4, #8]
 800ee26:	2e00      	cmp	r6, #0
 800ee28:	bfa2      	ittt	ge
 800ee2a:	6821      	ldrge	r1, [r4, #0]
 800ee2c:	f021 0104 	bicge.w	r1, r1, #4
 800ee30:	6021      	strge	r1, [r4, #0]
 800ee32:	b90d      	cbnz	r5, 800ee38 <_printf_i+0x110>
 800ee34:	2e00      	cmp	r6, #0
 800ee36:	d04b      	beq.n	800eed0 <_printf_i+0x1a8>
 800ee38:	4616      	mov	r6, r2
 800ee3a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee3e:	fb03 5711 	mls	r7, r3, r1, r5
 800ee42:	5dc7      	ldrb	r7, [r0, r7]
 800ee44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee48:	462f      	mov	r7, r5
 800ee4a:	42bb      	cmp	r3, r7
 800ee4c:	460d      	mov	r5, r1
 800ee4e:	d9f4      	bls.n	800ee3a <_printf_i+0x112>
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d10b      	bne.n	800ee6c <_printf_i+0x144>
 800ee54:	6823      	ldr	r3, [r4, #0]
 800ee56:	07df      	lsls	r7, r3, #31
 800ee58:	d508      	bpl.n	800ee6c <_printf_i+0x144>
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	6861      	ldr	r1, [r4, #4]
 800ee5e:	4299      	cmp	r1, r3
 800ee60:	bfde      	ittt	le
 800ee62:	2330      	movle	r3, #48	@ 0x30
 800ee64:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee68:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee6c:	1b92      	subs	r2, r2, r6
 800ee6e:	6122      	str	r2, [r4, #16]
 800ee70:	f8cd a000 	str.w	sl, [sp]
 800ee74:	464b      	mov	r3, r9
 800ee76:	aa03      	add	r2, sp, #12
 800ee78:	4621      	mov	r1, r4
 800ee7a:	4640      	mov	r0, r8
 800ee7c:	f7ff fee6 	bl	800ec4c <_printf_common>
 800ee80:	3001      	adds	r0, #1
 800ee82:	d14a      	bne.n	800ef1a <_printf_i+0x1f2>
 800ee84:	f04f 30ff 	mov.w	r0, #4294967295
 800ee88:	b004      	add	sp, #16
 800ee8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	f043 0320 	orr.w	r3, r3, #32
 800ee94:	6023      	str	r3, [r4, #0]
 800ee96:	4833      	ldr	r0, [pc, #204]	@ (800ef64 <_printf_i+0x23c>)
 800ee98:	2778      	movs	r7, #120	@ 0x78
 800ee9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	6831      	ldr	r1, [r6, #0]
 800eea2:	061f      	lsls	r7, r3, #24
 800eea4:	f851 5b04 	ldr.w	r5, [r1], #4
 800eea8:	d402      	bmi.n	800eeb0 <_printf_i+0x188>
 800eeaa:	065f      	lsls	r7, r3, #25
 800eeac:	bf48      	it	mi
 800eeae:	b2ad      	uxthmi	r5, r5
 800eeb0:	6031      	str	r1, [r6, #0]
 800eeb2:	07d9      	lsls	r1, r3, #31
 800eeb4:	bf44      	itt	mi
 800eeb6:	f043 0320 	orrmi.w	r3, r3, #32
 800eeba:	6023      	strmi	r3, [r4, #0]
 800eebc:	b11d      	cbz	r5, 800eec6 <_printf_i+0x19e>
 800eebe:	2310      	movs	r3, #16
 800eec0:	e7ac      	b.n	800ee1c <_printf_i+0xf4>
 800eec2:	4827      	ldr	r0, [pc, #156]	@ (800ef60 <_printf_i+0x238>)
 800eec4:	e7e9      	b.n	800ee9a <_printf_i+0x172>
 800eec6:	6823      	ldr	r3, [r4, #0]
 800eec8:	f023 0320 	bic.w	r3, r3, #32
 800eecc:	6023      	str	r3, [r4, #0]
 800eece:	e7f6      	b.n	800eebe <_printf_i+0x196>
 800eed0:	4616      	mov	r6, r2
 800eed2:	e7bd      	b.n	800ee50 <_printf_i+0x128>
 800eed4:	6833      	ldr	r3, [r6, #0]
 800eed6:	6825      	ldr	r5, [r4, #0]
 800eed8:	6961      	ldr	r1, [r4, #20]
 800eeda:	1d18      	adds	r0, r3, #4
 800eedc:	6030      	str	r0, [r6, #0]
 800eede:	062e      	lsls	r6, r5, #24
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	d501      	bpl.n	800eee8 <_printf_i+0x1c0>
 800eee4:	6019      	str	r1, [r3, #0]
 800eee6:	e002      	b.n	800eeee <_printf_i+0x1c6>
 800eee8:	0668      	lsls	r0, r5, #25
 800eeea:	d5fb      	bpl.n	800eee4 <_printf_i+0x1bc>
 800eeec:	8019      	strh	r1, [r3, #0]
 800eeee:	2300      	movs	r3, #0
 800eef0:	6123      	str	r3, [r4, #16]
 800eef2:	4616      	mov	r6, r2
 800eef4:	e7bc      	b.n	800ee70 <_printf_i+0x148>
 800eef6:	6833      	ldr	r3, [r6, #0]
 800eef8:	1d1a      	adds	r2, r3, #4
 800eefa:	6032      	str	r2, [r6, #0]
 800eefc:	681e      	ldr	r6, [r3, #0]
 800eefe:	6862      	ldr	r2, [r4, #4]
 800ef00:	2100      	movs	r1, #0
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7f1 f984 	bl	8000210 <memchr>
 800ef08:	b108      	cbz	r0, 800ef0e <_printf_i+0x1e6>
 800ef0a:	1b80      	subs	r0, r0, r6
 800ef0c:	6060      	str	r0, [r4, #4]
 800ef0e:	6863      	ldr	r3, [r4, #4]
 800ef10:	6123      	str	r3, [r4, #16]
 800ef12:	2300      	movs	r3, #0
 800ef14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef18:	e7aa      	b.n	800ee70 <_printf_i+0x148>
 800ef1a:	6923      	ldr	r3, [r4, #16]
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	4649      	mov	r1, r9
 800ef20:	4640      	mov	r0, r8
 800ef22:	47d0      	blx	sl
 800ef24:	3001      	adds	r0, #1
 800ef26:	d0ad      	beq.n	800ee84 <_printf_i+0x15c>
 800ef28:	6823      	ldr	r3, [r4, #0]
 800ef2a:	079b      	lsls	r3, r3, #30
 800ef2c:	d413      	bmi.n	800ef56 <_printf_i+0x22e>
 800ef2e:	68e0      	ldr	r0, [r4, #12]
 800ef30:	9b03      	ldr	r3, [sp, #12]
 800ef32:	4298      	cmp	r0, r3
 800ef34:	bfb8      	it	lt
 800ef36:	4618      	movlt	r0, r3
 800ef38:	e7a6      	b.n	800ee88 <_printf_i+0x160>
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	4632      	mov	r2, r6
 800ef3e:	4649      	mov	r1, r9
 800ef40:	4640      	mov	r0, r8
 800ef42:	47d0      	blx	sl
 800ef44:	3001      	adds	r0, #1
 800ef46:	d09d      	beq.n	800ee84 <_printf_i+0x15c>
 800ef48:	3501      	adds	r5, #1
 800ef4a:	68e3      	ldr	r3, [r4, #12]
 800ef4c:	9903      	ldr	r1, [sp, #12]
 800ef4e:	1a5b      	subs	r3, r3, r1
 800ef50:	42ab      	cmp	r3, r5
 800ef52:	dcf2      	bgt.n	800ef3a <_printf_i+0x212>
 800ef54:	e7eb      	b.n	800ef2e <_printf_i+0x206>
 800ef56:	2500      	movs	r5, #0
 800ef58:	f104 0619 	add.w	r6, r4, #25
 800ef5c:	e7f5      	b.n	800ef4a <_printf_i+0x222>
 800ef5e:	bf00      	nop
 800ef60:	08013e39 	.word	0x08013e39
 800ef64:	08013e4a 	.word	0x08013e4a

0800ef68 <memmove>:
 800ef68:	4288      	cmp	r0, r1
 800ef6a:	b510      	push	{r4, lr}
 800ef6c:	eb01 0402 	add.w	r4, r1, r2
 800ef70:	d902      	bls.n	800ef78 <memmove+0x10>
 800ef72:	4284      	cmp	r4, r0
 800ef74:	4623      	mov	r3, r4
 800ef76:	d807      	bhi.n	800ef88 <memmove+0x20>
 800ef78:	1e43      	subs	r3, r0, #1
 800ef7a:	42a1      	cmp	r1, r4
 800ef7c:	d008      	beq.n	800ef90 <memmove+0x28>
 800ef7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef86:	e7f8      	b.n	800ef7a <memmove+0x12>
 800ef88:	4402      	add	r2, r0
 800ef8a:	4601      	mov	r1, r0
 800ef8c:	428a      	cmp	r2, r1
 800ef8e:	d100      	bne.n	800ef92 <memmove+0x2a>
 800ef90:	bd10      	pop	{r4, pc}
 800ef92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ef96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ef9a:	e7f7      	b.n	800ef8c <memmove+0x24>
 800ef9c:	0000      	movs	r0, r0
	...

0800efa0 <exp>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	ed2d 8b02 	vpush	{d8}
 800efa6:	ec55 4b10 	vmov	r4, r5, d0
 800efaa:	f000 f889 	bl	800f0c0 <__ieee754_exp>
 800efae:	eeb0 8a40 	vmov.f32	s16, s0
 800efb2:	eef0 8a60 	vmov.f32	s17, s1
 800efb6:	ec45 4b10 	vmov	d0, r4, r5
 800efba:	f000 f839 	bl	800f030 <finite>
 800efbe:	b168      	cbz	r0, 800efdc <exp+0x3c>
 800efc0:	a317      	add	r3, pc, #92	@ (adr r3, 800f020 <exp+0x80>)
 800efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc6:	4620      	mov	r0, r4
 800efc8:	4629      	mov	r1, r5
 800efca:	f7f1 fdbd 	bl	8000b48 <__aeabi_dcmpgt>
 800efce:	b160      	cbz	r0, 800efea <exp+0x4a>
 800efd0:	f7ff fc58 	bl	800e884 <__errno>
 800efd4:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800f010 <exp+0x70>
 800efd8:	2322      	movs	r3, #34	@ 0x22
 800efda:	6003      	str	r3, [r0, #0]
 800efdc:	eeb0 0a48 	vmov.f32	s0, s16
 800efe0:	eef0 0a68 	vmov.f32	s1, s17
 800efe4:	ecbd 8b02 	vpop	{d8}
 800efe8:	bd38      	pop	{r3, r4, r5, pc}
 800efea:	a30f      	add	r3, pc, #60	@ (adr r3, 800f028 <exp+0x88>)
 800efec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff0:	4620      	mov	r0, r4
 800eff2:	4629      	mov	r1, r5
 800eff4:	f7f1 fd8a 	bl	8000b0c <__aeabi_dcmplt>
 800eff8:	2800      	cmp	r0, #0
 800effa:	d0ef      	beq.n	800efdc <exp+0x3c>
 800effc:	f7ff fc42 	bl	800e884 <__errno>
 800f000:	2322      	movs	r3, #34	@ 0x22
 800f002:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800f018 <exp+0x78>
 800f006:	6003      	str	r3, [r0, #0]
 800f008:	e7e8      	b.n	800efdc <exp+0x3c>
 800f00a:	bf00      	nop
 800f00c:	f3af 8000 	nop.w
 800f010:	00000000 	.word	0x00000000
 800f014:	7ff00000 	.word	0x7ff00000
	...
 800f020:	fefa39ef 	.word	0xfefa39ef
 800f024:	40862e42 	.word	0x40862e42
 800f028:	d52d3051 	.word	0xd52d3051
 800f02c:	c0874910 	.word	0xc0874910

0800f030 <finite>:
 800f030:	b082      	sub	sp, #8
 800f032:	ed8d 0b00 	vstr	d0, [sp]
 800f036:	9801      	ldr	r0, [sp, #4]
 800f038:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f03c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f040:	0fc0      	lsrs	r0, r0, #31
 800f042:	b002      	add	sp, #8
 800f044:	4770      	bx	lr

0800f046 <with_errno>:
 800f046:	b510      	push	{r4, lr}
 800f048:	ed2d 8b02 	vpush	{d8}
 800f04c:	eeb0 8a40 	vmov.f32	s16, s0
 800f050:	eef0 8a60 	vmov.f32	s17, s1
 800f054:	4604      	mov	r4, r0
 800f056:	f7ff fc15 	bl	800e884 <__errno>
 800f05a:	eeb0 0a48 	vmov.f32	s0, s16
 800f05e:	eef0 0a68 	vmov.f32	s1, s17
 800f062:	ecbd 8b02 	vpop	{d8}
 800f066:	6004      	str	r4, [r0, #0]
 800f068:	bd10      	pop	{r4, pc}

0800f06a <xflow>:
 800f06a:	4603      	mov	r3, r0
 800f06c:	b507      	push	{r0, r1, r2, lr}
 800f06e:	ec51 0b10 	vmov	r0, r1, d0
 800f072:	b183      	cbz	r3, 800f096 <xflow+0x2c>
 800f074:	4602      	mov	r2, r0
 800f076:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f07a:	e9cd 2300 	strd	r2, r3, [sp]
 800f07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f082:	f7f1 fad1 	bl	8000628 <__aeabi_dmul>
 800f086:	ec41 0b10 	vmov	d0, r0, r1
 800f08a:	2022      	movs	r0, #34	@ 0x22
 800f08c:	b003      	add	sp, #12
 800f08e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f092:	f7ff bfd8 	b.w	800f046 <with_errno>
 800f096:	4602      	mov	r2, r0
 800f098:	460b      	mov	r3, r1
 800f09a:	e7ee      	b.n	800f07a <xflow+0x10>
 800f09c:	0000      	movs	r0, r0
	...

0800f0a0 <__math_uflow>:
 800f0a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f0a8 <__math_uflow+0x8>
 800f0a4:	f7ff bfe1 	b.w	800f06a <xflow>
 800f0a8:	00000000 	.word	0x00000000
 800f0ac:	10000000 	.word	0x10000000

0800f0b0 <__math_oflow>:
 800f0b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f0b8 <__math_oflow+0x8>
 800f0b4:	f7ff bfd9 	b.w	800f06a <xflow>
 800f0b8:	00000000 	.word	0x00000000
 800f0bc:	70000000 	.word	0x70000000

0800f0c0 <__ieee754_exp>:
 800f0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c4:	ec55 4b10 	vmov	r4, r5, d0
 800f0c8:	49b1      	ldr	r1, [pc, #708]	@ (800f390 <__ieee754_exp+0x2d0>)
 800f0ca:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f0ce:	428a      	cmp	r2, r1
 800f0d0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800f0d4:	d936      	bls.n	800f144 <__ieee754_exp+0x84>
 800f0d6:	49af      	ldr	r1, [pc, #700]	@ (800f394 <__ieee754_exp+0x2d4>)
 800f0d8:	428a      	cmp	r2, r1
 800f0da:	d914      	bls.n	800f106 <__ieee754_exp+0x46>
 800f0dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f0e0:	4323      	orrs	r3, r4
 800f0e2:	4622      	mov	r2, r4
 800f0e4:	d007      	beq.n	800f0f6 <__ieee754_exp+0x36>
 800f0e6:	462b      	mov	r3, r5
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7f1 f8e6 	bl	80002bc <__adddf3>
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	460d      	mov	r5, r1
 800f0f4:	e002      	b.n	800f0fc <__ieee754_exp+0x3c>
 800f0f6:	2e00      	cmp	r6, #0
 800f0f8:	f040 8118 	bne.w	800f32c <__ieee754_exp+0x26c>
 800f0fc:	ec45 4b10 	vmov	d0, r4, r5
 800f100:	b004      	add	sp, #16
 800f102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f106:	a38c      	add	r3, pc, #560	@ (adr r3, 800f338 <__ieee754_exp+0x278>)
 800f108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10c:	4620      	mov	r0, r4
 800f10e:	4629      	mov	r1, r5
 800f110:	f7f1 fd1a 	bl	8000b48 <__aeabi_dcmpgt>
 800f114:	4607      	mov	r7, r0
 800f116:	b128      	cbz	r0, 800f124 <__ieee754_exp+0x64>
 800f118:	2000      	movs	r0, #0
 800f11a:	b004      	add	sp, #16
 800f11c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f120:	f7ff bfc6 	b.w	800f0b0 <__math_oflow>
 800f124:	a386      	add	r3, pc, #536	@ (adr r3, 800f340 <__ieee754_exp+0x280>)
 800f126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12a:	4620      	mov	r0, r4
 800f12c:	4629      	mov	r1, r5
 800f12e:	f7f1 fced 	bl	8000b0c <__aeabi_dcmplt>
 800f132:	2800      	cmp	r0, #0
 800f134:	f000 8087 	beq.w	800f246 <__ieee754_exp+0x186>
 800f138:	4638      	mov	r0, r7
 800f13a:	b004      	add	sp, #16
 800f13c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f140:	f7ff bfae 	b.w	800f0a0 <__math_uflow>
 800f144:	4b94      	ldr	r3, [pc, #592]	@ (800f398 <__ieee754_exp+0x2d8>)
 800f146:	429a      	cmp	r2, r3
 800f148:	f240 80a9 	bls.w	800f29e <__ieee754_exp+0x1de>
 800f14c:	4b93      	ldr	r3, [pc, #588]	@ (800f39c <__ieee754_exp+0x2dc>)
 800f14e:	429a      	cmp	r2, r3
 800f150:	d879      	bhi.n	800f246 <__ieee754_exp+0x186>
 800f152:	4b93      	ldr	r3, [pc, #588]	@ (800f3a0 <__ieee754_exp+0x2e0>)
 800f154:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	4620      	mov	r0, r4
 800f15e:	4629      	mov	r1, r5
 800f160:	f7f1 f8aa 	bl	80002b8 <__aeabi_dsub>
 800f164:	4b8f      	ldr	r3, [pc, #572]	@ (800f3a4 <__ieee754_exp+0x2e4>)
 800f166:	00f7      	lsls	r7, r6, #3
 800f168:	443b      	add	r3, r7
 800f16a:	ed93 7b00 	vldr	d7, [r3]
 800f16e:	ed8d 7b00 	vstr	d7, [sp]
 800f172:	f1c6 0a01 	rsb	sl, r6, #1
 800f176:	4680      	mov	r8, r0
 800f178:	4689      	mov	r9, r1
 800f17a:	ebaa 0a06 	sub.w	sl, sl, r6
 800f17e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f182:	4640      	mov	r0, r8
 800f184:	4649      	mov	r1, r9
 800f186:	f7f1 f897 	bl	80002b8 <__aeabi_dsub>
 800f18a:	4604      	mov	r4, r0
 800f18c:	460d      	mov	r5, r1
 800f18e:	4622      	mov	r2, r4
 800f190:	462b      	mov	r3, r5
 800f192:	4620      	mov	r0, r4
 800f194:	4629      	mov	r1, r5
 800f196:	f7f1 fa47 	bl	8000628 <__aeabi_dmul>
 800f19a:	a36b      	add	r3, pc, #428	@ (adr r3, 800f348 <__ieee754_exp+0x288>)
 800f19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a0:	4606      	mov	r6, r0
 800f1a2:	460f      	mov	r7, r1
 800f1a4:	f7f1 fa40 	bl	8000628 <__aeabi_dmul>
 800f1a8:	a369      	add	r3, pc, #420	@ (adr r3, 800f350 <__ieee754_exp+0x290>)
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	f7f1 f883 	bl	80002b8 <__aeabi_dsub>
 800f1b2:	4632      	mov	r2, r6
 800f1b4:	463b      	mov	r3, r7
 800f1b6:	f7f1 fa37 	bl	8000628 <__aeabi_dmul>
 800f1ba:	a367      	add	r3, pc, #412	@ (adr r3, 800f358 <__ieee754_exp+0x298>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	f7f1 f87c 	bl	80002bc <__adddf3>
 800f1c4:	4632      	mov	r2, r6
 800f1c6:	463b      	mov	r3, r7
 800f1c8:	f7f1 fa2e 	bl	8000628 <__aeabi_dmul>
 800f1cc:	a364      	add	r3, pc, #400	@ (adr r3, 800f360 <__ieee754_exp+0x2a0>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	f7f1 f871 	bl	80002b8 <__aeabi_dsub>
 800f1d6:	4632      	mov	r2, r6
 800f1d8:	463b      	mov	r3, r7
 800f1da:	f7f1 fa25 	bl	8000628 <__aeabi_dmul>
 800f1de:	a362      	add	r3, pc, #392	@ (adr r3, 800f368 <__ieee754_exp+0x2a8>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	f7f1 f86a 	bl	80002bc <__adddf3>
 800f1e8:	4632      	mov	r2, r6
 800f1ea:	463b      	mov	r3, r7
 800f1ec:	f7f1 fa1c 	bl	8000628 <__aeabi_dmul>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	f7f1 f85e 	bl	80002b8 <__aeabi_dsub>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	4606      	mov	r6, r0
 800f202:	460f      	mov	r7, r1
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 fa0e 	bl	8000628 <__aeabi_dmul>
 800f20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f210:	f1ba 0f00 	cmp.w	sl, #0
 800f214:	d15c      	bne.n	800f2d0 <__ieee754_exp+0x210>
 800f216:	2200      	movs	r2, #0
 800f218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f21c:	4630      	mov	r0, r6
 800f21e:	4639      	mov	r1, r7
 800f220:	f7f1 f84a 	bl	80002b8 <__aeabi_dsub>
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f22c:	f7f1 fb26 	bl	800087c <__aeabi_ddiv>
 800f230:	4622      	mov	r2, r4
 800f232:	462b      	mov	r3, r5
 800f234:	f7f1 f840 	bl	80002b8 <__aeabi_dsub>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	2000      	movs	r0, #0
 800f23e:	495a      	ldr	r1, [pc, #360]	@ (800f3a8 <__ieee754_exp+0x2e8>)
 800f240:	f7f1 f83a 	bl	80002b8 <__aeabi_dsub>
 800f244:	e754      	b.n	800f0f0 <__ieee754_exp+0x30>
 800f246:	4b59      	ldr	r3, [pc, #356]	@ (800f3ac <__ieee754_exp+0x2ec>)
 800f248:	4620      	mov	r0, r4
 800f24a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f24e:	4629      	mov	r1, r5
 800f250:	a347      	add	r3, pc, #284	@ (adr r3, 800f370 <__ieee754_exp+0x2b0>)
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	f7f1 f9e7 	bl	8000628 <__aeabi_dmul>
 800f25a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f25e:	f7f1 f82d 	bl	80002bc <__adddf3>
 800f262:	f7f1 fc7b 	bl	8000b5c <__aeabi_d2iz>
 800f266:	4682      	mov	sl, r0
 800f268:	f7f1 f974 	bl	8000554 <__aeabi_i2d>
 800f26c:	a342      	add	r3, pc, #264	@ (adr r3, 800f378 <__ieee754_exp+0x2b8>)
 800f26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f272:	4606      	mov	r6, r0
 800f274:	460f      	mov	r7, r1
 800f276:	f7f1 f9d7 	bl	8000628 <__aeabi_dmul>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4620      	mov	r0, r4
 800f280:	4629      	mov	r1, r5
 800f282:	f7f1 f819 	bl	80002b8 <__aeabi_dsub>
 800f286:	a33e      	add	r3, pc, #248	@ (adr r3, 800f380 <__ieee754_exp+0x2c0>)
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	4680      	mov	r8, r0
 800f28e:	4689      	mov	r9, r1
 800f290:	4630      	mov	r0, r6
 800f292:	4639      	mov	r1, r7
 800f294:	f7f1 f9c8 	bl	8000628 <__aeabi_dmul>
 800f298:	e9cd 0100 	strd	r0, r1, [sp]
 800f29c:	e76f      	b.n	800f17e <__ieee754_exp+0xbe>
 800f29e:	4b44      	ldr	r3, [pc, #272]	@ (800f3b0 <__ieee754_exp+0x2f0>)
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d810      	bhi.n	800f2c6 <__ieee754_exp+0x206>
 800f2a4:	a338      	add	r3, pc, #224	@ (adr r3, 800f388 <__ieee754_exp+0x2c8>)
 800f2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	f7f1 f805 	bl	80002bc <__adddf3>
 800f2b2:	4b3d      	ldr	r3, [pc, #244]	@ (800f3a8 <__ieee754_exp+0x2e8>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f7f1 fc47 	bl	8000b48 <__aeabi_dcmpgt>
 800f2ba:	b138      	cbz	r0, 800f2cc <__ieee754_exp+0x20c>
 800f2bc:	4b3a      	ldr	r3, [pc, #232]	@ (800f3a8 <__ieee754_exp+0x2e8>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	4629      	mov	r1, r5
 800f2c4:	e712      	b.n	800f0ec <__ieee754_exp+0x2c>
 800f2c6:	f04f 0a00 	mov.w	sl, #0
 800f2ca:	e760      	b.n	800f18e <__ieee754_exp+0xce>
 800f2cc:	4682      	mov	sl, r0
 800f2ce:	e75e      	b.n	800f18e <__ieee754_exp+0xce>
 800f2d0:	4632      	mov	r2, r6
 800f2d2:	463b      	mov	r3, r7
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800f2da:	f7f0 ffed 	bl	80002b8 <__aeabi_dsub>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2e6:	f7f1 fac9 	bl	800087c <__aeabi_ddiv>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	460b      	mov	r3, r1
 800f2ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2f2:	f7f0 ffe1 	bl	80002b8 <__aeabi_dsub>
 800f2f6:	4642      	mov	r2, r8
 800f2f8:	464b      	mov	r3, r9
 800f2fa:	f7f0 ffdd 	bl	80002b8 <__aeabi_dsub>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	2000      	movs	r0, #0
 800f304:	4928      	ldr	r1, [pc, #160]	@ (800f3a8 <__ieee754_exp+0x2e8>)
 800f306:	f7f0 ffd7 	bl	80002b8 <__aeabi_dsub>
 800f30a:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800f30e:	4592      	cmp	sl, r2
 800f310:	db02      	blt.n	800f318 <__ieee754_exp+0x258>
 800f312:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f316:	e6eb      	b.n	800f0f0 <__ieee754_exp+0x30>
 800f318:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800f31c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f320:	2200      	movs	r2, #0
 800f322:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800f326:	f7f1 f97f 	bl	8000628 <__aeabi_dmul>
 800f32a:	e6e1      	b.n	800f0f0 <__ieee754_exp+0x30>
 800f32c:	2400      	movs	r4, #0
 800f32e:	2500      	movs	r5, #0
 800f330:	e6e4      	b.n	800f0fc <__ieee754_exp+0x3c>
 800f332:	bf00      	nop
 800f334:	f3af 8000 	nop.w
 800f338:	fefa39ef 	.word	0xfefa39ef
 800f33c:	40862e42 	.word	0x40862e42
 800f340:	d52d3051 	.word	0xd52d3051
 800f344:	c0874910 	.word	0xc0874910
 800f348:	72bea4d0 	.word	0x72bea4d0
 800f34c:	3e663769 	.word	0x3e663769
 800f350:	c5d26bf1 	.word	0xc5d26bf1
 800f354:	3ebbbd41 	.word	0x3ebbbd41
 800f358:	af25de2c 	.word	0xaf25de2c
 800f35c:	3f11566a 	.word	0x3f11566a
 800f360:	16bebd93 	.word	0x16bebd93
 800f364:	3f66c16c 	.word	0x3f66c16c
 800f368:	5555553e 	.word	0x5555553e
 800f36c:	3fc55555 	.word	0x3fc55555
 800f370:	652b82fe 	.word	0x652b82fe
 800f374:	3ff71547 	.word	0x3ff71547
 800f378:	fee00000 	.word	0xfee00000
 800f37c:	3fe62e42 	.word	0x3fe62e42
 800f380:	35793c76 	.word	0x35793c76
 800f384:	3dea39ef 	.word	0x3dea39ef
 800f388:	8800759c 	.word	0x8800759c
 800f38c:	7e37e43c 	.word	0x7e37e43c
 800f390:	40862e41 	.word	0x40862e41
 800f394:	7fefffff 	.word	0x7fefffff
 800f398:	3fd62e42 	.word	0x3fd62e42
 800f39c:	3ff0a2b1 	.word	0x3ff0a2b1
 800f3a0:	08013e70 	.word	0x08013e70
 800f3a4:	08013e60 	.word	0x08013e60
 800f3a8:	3ff00000 	.word	0x3ff00000
 800f3ac:	08013e80 	.word	0x08013e80
 800f3b0:	3defffff 	.word	0x3defffff

0800f3b4 <_init>:
 800f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b6:	bf00      	nop
 800f3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ba:	bc08      	pop	{r3}
 800f3bc:	469e      	mov	lr, r3
 800f3be:	4770      	bx	lr

0800f3c0 <_fini>:
 800f3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c2:	bf00      	nop
 800f3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3c6:	bc08      	pop	{r3}
 800f3c8:	469e      	mov	lr, r3
 800f3ca:	4770      	bx	lr
